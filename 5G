Option Explicit

' --- Windows API Declaration for OLE Message Filter ---
' Used to suppress Excel's "Server Busy" popups during SAP interaction
Private Declare PtrSafe Function CoRegisterMessageFilter Lib "OLE32.DLL" _
    (ByVal lpMessageFilter As LongPtr, ByRef lplpMessageFilter As LongPtr) As Long ' HRESULT return

' --- Windows API Declaration for Sleep Function ---
' Used for pauses during script execution
#If VBA7 Then ' Handles 64-bit Office versions
    Public Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As LongPtr)
#Else ' Handles 32-bit Office versions
    Public Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
#End If

' --- Global Objects required across calls ---
' These hold references to the SAP GUI objects once connected.
' They remain global as they are needed by both StartExtract (to set) and RunGUIScript (to use).
' *** USING EARLY BINDING - REQUIRES REFERENCE TO "SAP GUI Scripting API" Library ***
' (In VBA Editor: Tools -> References -> Check "SAP GUI Scripting API")
Public objGui       As GuiApplication ' SAP GUI Application object (main scripting interface)
Public objConn      As GuiConnection  ' SAP GUI Connection object (represents a connection to one system)
Public objSess      As GuiSession     ' SAP GUI Session object (represents a specific window/mode)
Public objSBar      As GuiStatusbar   ' SAP GUI Statusbar object (for reading messages)

' //========================================================================
' // Sub: StartExtract
' // Purpose: Main entry point. Handles all connection/session logic:
' //          1. Checks for an existing usable global session.
' //          2. If none, finds an existing connection to the target system.
' //          3. If connection found, finds/creates a session (/o).
' //          4. If NO connection found, attempts SSO login (logic integrated).
' //          5. If session obtained, calls RunGUIScript.
' //          Only this Sub should appear in the Macro Dialog (Alt+F8).
' //========================================================================
Public Sub StartExtract() ' <-- This is the macro you run from Excel

    ' --- CONFIGURATION CONSTANTS (Used within StartExtract logic) ---
    ' *** VITAL: Set ALL of these correctly for your environment ***
    Const cTARGET_SYSTEM_ID_CLIENT As String = "PEA100" ' <<< ADJUST: SystemID+Client (for FINDING existing)
    Const cTARGET_SYSTEM_DESCRIPTION As String = "9A. Symphony ECC Production" ' <<< ADJUST: EXACT Description (for SSO LOGIN)
    Const cSAP_LOGON_PATH As String = "C:\Program Files (x86)\SAP\FrontEnd\SAPgui\saplogon.exe" ' <<< VERIFY/ADJUST Path (for starting SAP Logon)
    Const cMAX_SESSIONS As Integer = 6          ' Max sessions per connection before /o fails
    Const cLOGON_TIMEOUT_SECONDS As Long = 60   ' Timeout (seconds) for SSO login wait

    ' --- Local Variables for StartExtract (including merged logic) ---
    Dim SapGuiAuto As Object          ' For GetObject("SAPGUI")
    Dim TargetConn As GuiConnection   ' Connection object for the target system
    Dim W_conn As GuiConnection       ' Loop variable for connections
    Dim W_Sess As GuiSession          ' Loop variable for sessions / Temp session holder
    Dim FirstFoundSess As GuiSession  ' Stores first valid session found (for /o fallback)
    Dim NewSess As GuiSession         ' Stores the newly created session via /o
    Dim TargetSessSSO As GuiSession   ' Stores the session obtained via SSO Login path
    Dim SessionObtained As Boolean    ' Flag: True if a suitable session was found/created/logged into
    Dim Session_Nr_All As Long        ' Stores the number of sessions in the relevant connection
    Dim i As Long                     ' Loop counter for Connections
    Dim j As Long                     ' Loop counter for Sessions
    Dim highestSessNum As Long        ' To find the newest session after /o
    Dim currentSessNum As Long
    Dim MsgResult As VbMsgBoxResult   ' To store result from MsgBox calls
    Dim currentTransaction As String  ' To check if existing session is alive
    Dim foundConnection As Boolean    ' Flag: True if connection for target system found
    Dim attempts As Integer           ' For retrying GetObject after starting SAP Logon
    Dim startTime As Single           ' For timeout checks (used in multiple places locally)

    ' Enable central error handling for this setup phase
    On Error GoTo ErrorHandler

    ' Optimize Excel performance
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual

    ' Initialize state variables
    SessionObtained = False
    Session_Nr_All = 0
    foundConnection = False
    Set TargetConn = Nothing
    Set FirstFoundSess = Nothing

    ' Basic check: Ensure target system constants are set
    If Trim$(cTARGET_SYSTEM_ID_CLIENT) = "" Or Trim$(cTARGET_SYSTEM_DESCRIPTION) = "" Then
        MsgBox "Target SAP system constants (cTARGET_SYSTEM_ID_CLIENT and/or cTARGET_SYSTEM_DESCRIPTION) are not defined in the VBA code." & vbCrLf & _
               "Please edit the code and set these values.", vbCritical + vbOKOnly, "Configuration Error"
        GoTo Cleanup ' Exit gracefully
    End If
    Debug.Print "====================================================="
    Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Starting Extract Process..."
    Debug.Print "Target System (ID+Client for Find): " & cTARGET_SYSTEM_ID_CLIENT
    Debug.Print "Target System (Description for SSO Login): " & cTARGET_SYSTEM_DESCRIPTION
    Debug.Print "-----------------------------------------------------"

    ' --- STEP 1: Check for existing valid global session ---
    If Not objSess Is Nothing Then
        On Error Resume Next
        If objSess.Info.SystemName & objSess.Info.Client = cTARGET_SYSTEM_ID_CLIENT Then
            currentTransaction = objSess.Info.TRANSACTION
            If Err.Number = 0 Then
                On Error GoTo ErrorHandler
                If objConn Is Nothing Then Set objConn = objSess.Parent
                If objSBar Is Nothing Then Set objSBar = objSess.FindById("wnd[0]/sbar")
                SessionObtained = True
                Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Reusing existing valid global session #" & objSess.Info.SessionNumber & " for " & cTARGET_SYSTEM_ID_CLIENT
                GoTo RunReportScript
            Else
                Err.Clear
                On Error GoTo ErrorHandler
                Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Existing global objSess for " & cTARGET_SYSTEM_ID_CLIENT & " is invalid/closed. Clearing global objects."
                Set objSess = Nothing: Set objConn = Nothing: Set objSBar = Nothing: Set objGui = Nothing
            End If
        Else
             Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Existing global objSess is for system " & objSess.Info.SystemName & objSess.Info.Client & ", not target " & cTARGET_SYSTEM_ID_CLIENT & ". Clearing global objects."
             Set objSess = Nothing: Set objConn = Nothing: Set objSBar = Nothing: Set objGui = Nothing
        End If
        On Error GoTo ErrorHandler
    End If

    ' --- STEP 2: Get SAP GUI Scripting Engine ---
    If objGui Is Nothing Then
        On Error Resume Next
        Set SapGuiAuto = GetObject("SAPGUI")
        Dim getObjectErrNum As Long: getObjectErrNum = Err.Number
        Err.Clear
        On Error GoTo ErrorHandler

        If getObjectErrNum = 0 And Not SapGuiAuto Is Nothing Then
            Set objGui = SapGuiAuto.GetScriptingEngine
            If objGui Is Nothing Then
                MsgBox "Could not get SAP GUI Scripting Engine even though GetObject('SAPGUI') succeeded." & vbCrLf & _
                       "Scripting might be disabled in SAP GUI options or by the server.", vbCritical, "Scripting Engine Error"
                GoTo Cleanup
            End If
            Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Successfully obtained SAP GUI Scripting Engine via GetObject."
        Else
            Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - GetObject(""SAPGUI"") failed (Error: " & getObjectErrNum & "). SAP Logon might not be running."
            Set SapGuiAuto = Nothing
        End If
    End If

    ' --- STEP 3: Find Existing Connection matching Target System (ID+Client) ---
    If Not objGui Is Nothing Then
        Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Searching for existing connection to system: " & cTARGET_SYSTEM_ID_CLIENT
        foundConnection = False
        For i = 0 To objGui.Children.Count - 1
            Set W_conn = objGui.Children(CLng(i))
            If Not W_conn Is Nothing Then
                 If W_conn.Children.Count > 0 Then
                     Set W_Sess = W_conn.Children(0)
                     If Not W_Sess Is Nothing Then
                         On Error Resume Next
                         Dim sysInfoCheck As String: sysInfoCheck = W_Sess.Info.SystemName & W_Sess.Info.Client
                         Dim infoErr As Long: infoErr = Err.Number
                         Err.Clear
                         On Error GoTo ErrorHandler
                         If infoErr = 0 And sysInfoCheck = cTARGET_SYSTEM_ID_CLIENT Then
                             Set TargetConn = W_conn
                             foundConnection = True
                             Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Found existing connection object for " & cTARGET_SYSTEM_ID_CLIENT & " (Description: '" & TargetConn.Description & "')"
                             Exit For
                         End If
                         Set W_Sess = Nothing
                     End If
                 End If
            End If
             Set W_conn = Nothing
        Next i
    Else
        Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - SAP GUI object (objGui) not available, cannot search for existing connections."
    End If


    ' --- STEP 4: Handle Based on Connection Found Status ---

    If foundConnection And Not TargetConn Is Nothing Then
        ' --- PATH A: Connection Found - Try to find/create session ---
        Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Path A: Existing connection found. Checking sessions..."
        Set objConn = TargetConn
        Session_Nr_All = objConn.Children.Count
        Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Checking " & Session_Nr_All & " existing session(s) on connection for " & cTARGET_SYSTEM_ID_CLIENT & "..."

        ' Check for an IDLE session
        Set FirstFoundSess = Nothing
        For j = 0 To objConn.Children.Count - 1
            Set W_Sess = objConn.Children(CLng(j))
            If Not W_Sess Is Nothing Then
                If FirstFoundSess Is Nothing Then Set FirstFoundSess = W_Sess
                On Error Resume Next
                Dim idleCheckTCode As String: idleCheckTCode = W_Sess.Info.TRANSACTION
                Dim idleErr As Long: idleErr = Err.Number
                Err.Clear
                On Error GoTo ErrorHandler
                If idleErr = 0 Then
                    Select Case UCase(idleCheckTCode)
                        Case "SESSION_MANAGER", "SMEN", "S000"
                            Set objSess = W_Sess
                            On Error Resume Next
                            Set objSBar = objSess.FindById("wnd[0]/sbar")
                            If objSBar Is Nothing Then Debug.Print "Warning: Could not get status bar for idle session #" & objSess.Info.SessionNumber
                            On Error GoTo ErrorHandler
                            SessionObtained = True
                            Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Found suitable idle session #" & objSess.Info.SessionNumber & " (TCode: " & idleCheckTCode & ")"
                            GoTo RunReportScript
                    End Select
                Else
                    Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Could not get transaction code for session #" & j + 1 & " (Error: " & idleErr & "). Skipping idle check for this session."
                End If
            End If
            Set W_Sess = Nothing
        Next j

        ' No idle session found, try to CREATE a new one using /o
        If Not SessionObtained Then
            Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - No idle session found for " & cTARGET_SYSTEM_ID_CLIENT & "."
            If FirstFoundSess Is Nothing Then
                MsgBox "No sessions could be accessed at all for system " & cTARGET_SYSTEM_ID_CLIENT & " on the identified connection, even though the connection was found." & vbCrLf & _
                       "Please check the state of your SAP sessions.", vbCritical, "Session Access Error"
                GoTo Cleanup
            End If

            If Session_Nr_All < cMAX_SESSIONS Then
                 Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Session limit (" & cMAX_SESSIONS & ") not reached (" & Session_Nr_All & " open). Attempting to create new session using /o in session #" & FirstFoundSess.Info.SessionNumber & "..."
                 On Error GoTo ErrorHandler ' Use main error handler for /o process

                 Set objSess = FirstFoundSess ' Temporarily use this session for /o command
                 If objSess.ActiveWindow.Name <> "wnd[0]" Then
                     MsgBox "The main window (wnd[0]) of session #" & objSess.Info.SessionNumber & " needed to execute /o is not active or accessible." & vbCrLf & _
                            "Please bring it to the front or ensure it's not busy/locked.", vbExclamation, "Action Required for /o"
                     Set objSess = Nothing ' Clear temp assignment
                     GoTo Cleanup
                 End If

                 objSess.FindById("wnd[0]/tbar[0]/okcd").Text = "/o"
                 objSess.FindById("wnd[0]").sendVKey 0
                 Set objSess = Nothing ' Clear temp assignment

                 Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - /o entered. Waiting for potential session overview popup (wnd[1])..."
                 Sleep 1000

                 Dim popupWnd As GuiModalWindow
                 On Error Resume Next
                 Set popupWnd = objGui.ActiveSession.FindById("wnd[1]", False)
                 On Error GoTo ErrorHandler

                 If Not popupWnd Is Nothing Then
                    Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Session overview popup (wnd[1]) found. Attempting to press Generate..."
                    Const GENERATE_BUTTON_ID As String = "wnd[1]/tbar[0]/btn[5]" ' <<< Verify this ID if /o fails
                    On Error Resume Next
                    popupWnd.FindById(GENERATE_BUTTON_ID).press
                    If Err.Number <> 0 Then
                        Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Failed to press Generate button " & GENERATE_BUTTON_ID & ". Error: " & Err.Description
                        Err.Clear
                        Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Attempting VKey 0 (Enter) on popup instead..."
                        popupWnd.sendVKey 0
                    Else
                        Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Generate button pressed."
                    End If
                    On Error GoTo ErrorHandler
                    Sleep 2000
                 Else
                    Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Session overview popup (wnd[1]) not detected, proceeding to find new session."
                    Sleep 1000
                 End If
                 Set popupWnd = Nothing

                 highestSessNum = 0
                 Set NewSess = Nothing
                 For j = 0 To objConn.Children.Count - 1
                     Set W_Sess = objConn.Children(CLng(j))
                     If Not W_Sess Is Nothing Then
                         On Error Resume Next
                         currentSessNum = W_Sess.Info.SessionNumber
                         If Err.Number = 0 Then
                            If currentSessNum > highestSessNum Then
                                highestSessNum = currentSessNum
                                Set NewSess = W_Sess
                            End If
                         Else
                            Debug.Print "Warning: Could not read session number for session index " & j & " while finding new session."
                            Err.Clear
                         End If
                         On Error GoTo ErrorHandler
                     End If
                 Next j

                 If NewSess Is Nothing Then
                     Err.Raise vbObjectError + 521, "StartExtract", "Could not identify the newly created session after using /o. Check SAP state."
                 End If

                 Set objSess = NewSess
                 Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Successfully identified new session #" & objSess.Info.SessionNumber & " created via /o."
                 On Error Resume Next
                 Set objSBar = objSess.FindById("wnd[0]/sbar")
                 If objSBar Is Nothing Then Debug.Print "Warning: Could not get status bar for new session immediately."
                 On Error GoTo ErrorHandler
                 SessionObtained = True
                 Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Proceeding with newly created session."
                 GoTo RunReportScript

            Else
                 MsgResult = MsgBox("Maximum number of sessions (" & Session_Nr_All & "/" & cMAX_SESSIONS & ") already open for system " & cTARGET_SYSTEM_ID_CLIENT & "." & vbCrLf & _
                                     "No idle session was found, and no new session can be created via /o." & vbCrLf & vbCrLf & _
                                     "Please close an existing session manually if you need to proceed.", vbCritical + vbOKOnly, "Session Limit Reached")
                 GoTo Cleanup
            End If
        End If ' End /o logic

    Else
        ' --- PATH B: No Connection Found (or objGui was Nothing) - Attempt SSO Logon (Integrated Logic) ---
        Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Path B: No existing connection found for " & cTARGET_SYSTEM_ID_CLIENT & " (or SAP GUI object not initially found)."
        Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Attempting new connection via SSO using description: '" & cTARGET_SYSTEM_DESCRIPTION & "'"

        ' --- Start of Integrated EstablishSsoConnection Logic ---
        On Error GoTo SsoLoginErrorHandler ' Use a specific handler for this block

        ' Reset relevant Global Objects before attempting new login
        Set objConn = Nothing
        Set objSess = Nothing
        Set objSBar = Nothing

        ' Step 1: Get/Ensure SAP GUI Scripting Engine
        If objGui Is Nothing Then
            Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - objGui is Nothing, attempting GetObject/Start Logon within SSO block..."
            On Error Resume Next
            Set SapGuiAuto = GetObject("SAPGUI")
            Dim getObjErrSso As Long: getObjErrSso = Err.Number
            Err.Clear
            On Error GoTo SsoLoginErrorHandler

            If getObjErrSso <> 0 Or SapGuiAuto Is Nothing Then
                 Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - GetObject(""SAPGUI"") failed within SSO block. Attempting to start SAP Logon Pad: " & cSAP_LOGON_PATH
                 Dim shellResult As Variant
                 On Error Resume Next
                 shellResult = Shell(cSAP_LOGON_PATH, vbNormalFocus)
                 Dim shellErr As Long: shellErr = Err.Number
                 Dim shellDesc As String: shellDesc = Err.Description
                 Err.Clear
                 On Error GoTo SsoLoginErrorHandler
                 If shellErr <> 0 Then
                     MsgBox "Failed to start SAP Logon Pad using Shell command." & vbCrLf & vbCrLf & _
                            "Error (" & shellErr & "): " & shellDesc & vbCrLf & _
                            "Please verify the cSAP_LOGON_PATH constant: " & vbCrLf & cSAP_LOGON_PATH, vbCritical, "Shell Command Error"
                     GoTo Cleanup ' Exit main sub on shell failure
                 End If
                 Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Shell command executed. Waiting 5 seconds..."
                 Sleep 5000

                 attempts = 0
                 Do
                     attempts = attempts + 1
                     Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Attempting GetObject(""SAPGUI"") after start (Attempt " & attempts & ")..."
                     On Error Resume Next
                     Set SapGuiAuto = GetObject("SAPGUI")
                     If Err.Number = 0 And Not SapGuiAuto Is Nothing Then Exit Do
                     Err.Clear
                     Sleep 2000
                 Loop While attempts < 5

                 If SapGuiAuto Is Nothing Then
                      MsgBox "SAP Logon Pad was started, but GetObject(""SAPGUI"") still failed." & vbCrLf & _
                             "Scripting might be disabled or SAP GUI has issues.", vbCritical, "Prerequisite Error - GetObject Failed"
                      GoTo Cleanup
                 End If
                 Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - GetObject(""SAPGUI"") successful after starting SAP Logon."
            Else
                 Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - GetObject(""SAPGUI"") succeeded within SSO block."
            End If

            Set objGui = SapGuiAuto.GetScriptingEngine ' Set global objGui
            If objGui Is Nothing Then
                MsgBox "Could not get SAP GUI Scripting Engine. Ensure scripting is enabled.", vbCritical, "Scripting Engine Error"
                GoTo Cleanup
            End If
            Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Successfully obtained SAP GUI Scripting Engine and set global objGui."
        Else
             Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Using existing global objGui object for SSO connection."
        End If

        ' Step 2: Open Connection using Description
        Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Attempting objGui.OpenConnection(""" & cTARGET_SYSTEM_DESCRIPTION & """, True)..."
        On Error Resume Next
        ' Use TargetConn locally first, then assign to global objConn on success
        Set TargetConn = objGui.OpenConnection(cTARGET_SYSTEM_DESCRIPTION, True)
        Dim openConnErr As Long: openConnErr = Err.Number
        Dim openConnDesc As String: openConnDesc = Err.Description
        Err.Clear
        On Error GoTo SsoLoginErrorHandler

        If openConnErr <> 0 Or TargetConn Is Nothing Then
            MsgBox "SSO Auto-Logon failed: Could not open connection using description '" & cTARGET_SYSTEM_DESCRIPTION & "'." & vbCrLf & vbCrLf & _
                   "Error (" & openConnErr & "): " & openConnDesc & vbCrLf & vbCrLf & _
                   "Check Description constant, SAP Logon config, and SSO credentials.", vbCritical, "SSO Connection Error"
            GoTo Cleanup
        End If
        Set objConn = TargetConn ' Set global connection
        Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - OpenConnection successful. Connection Description: '" & objConn.Description & "'"

        ' Step 3: Get Session created by SSO/SNC
        Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Waiting for session object to appear..."
        startTime = Timer
        Do
            If objConn.Children.Count > 0 Then Exit Do
            Sleep 500
            DoEvents
            If Timer - startTime > 15 Then
                 MsgBox "SSO Auto-Logon failed: Connection opened, but no session object appeared within 15 seconds.", vbCritical, "SSO Session Object Error"
                 GoTo Cleanup
            End If
        Loop

        Set TargetSessSSO = objConn.Children(0) ' Use local variable for clarity
        If TargetSessSSO Is Nothing Then
             MsgBox "SSO Auto-Logon failed: Could not get session object.", vbCritical, "SSO Session Object Error"
             GoTo Cleanup
        End If
        Set objSess = TargetSessSSO ' Set global session
        Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Session object obtained (ID: " & objSess.Info.SessionNumber & "). Waiting for active..."

        ' Step 4: Wait for Session to be Ready
        Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Waiting for session ready (Timeout: " & cLOGON_TIMEOUT_SECONDS & "s)..."
        startTime = Timer
        Do
            On Error Resume Next
            currentTransaction = objSess.Info.TRANSACTION
            Dim sessReadyErr As Long: sessReadyErr = Err.Number
            Err.Clear
            On Error GoTo SsoLoginErrorHandler
            If sessReadyErr = 0 Then
                If currentTransaction <> "" And UCase(currentTransaction) <> "SAPMSYST" Then
                    Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Session active. TCode: " & currentTransaction
                    Exit Do
                End If
            Else
                Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Waiting session ready (Info error: " & sessReadyErr & ")"
            End If
            Sleep 500
            DoEvents
            If Timer - startTime > cLOGON_TIMEOUT_SECONDS Then
                MsgBox "SSO Auto-Logon failed: Timeout (" & cLOGON_TIMEOUT_SECONDS & "s) waiting for SAP main menu.", vbCritical, "SSO Logon Timeout"
                GoTo Cleanup
            End If
        Loop

        ' Step 5: Get Status Bar
        On Error Resume Next
        Set objSBar = objSess.FindById("wnd[0]/sbar")
        If objSBar Is Nothing Then Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Warning: Could not get status bar after SSO login."
        On Error GoTo ErrorHandler ' Restore MAIN error handler after SSO block

        ' Step 6: SSO Success
        SessionObtained = True
        Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - SSO login process successful."

        ' Optional: Verify system match
        If Not objSess Is Nothing Then
           On Error Resume Next
           Dim loggedInSys As String: loggedInSys = objSess.Info.SystemName & objSess.Info.Client
           Dim sysCheckErr As Long: sysCheckErr = Err.Number
           Err.Clear
           On Error GoTo ErrorHandler
           If sysCheckErr = 0 Then
               If loggedInSys <> cTARGET_SYSTEM_ID_CLIENT Then
                    MsgBox "Warning: SSO login successful for '" & cTARGET_SYSTEM_DESCRIPTION & "', " & _
                           "but resulting system is '" & loggedInSys & "', not expected '" & cTARGET_SYSTEM_ID_CLIENT & "'. " & _
                           "Check constants/config.", vbExclamation, "System Mismatch Warning"
                    ' GoTo Cleanup ' Uncomment to exit on mismatch
               Else
                   Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - SSO login successful and system match verified (" & loggedInSys & ")."
               End If
           Else
               Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Warning: Could not verify SystemID+Client after SSO login. Error: " & sysCheckErr
           End If
        End If

        ' --- End of Integrated EstablishSsoConnection Logic ---
        If SessionObtained Then GoTo RunReportScript

    End If ' End Path A vs Path B


    ' --- Fallback Check ---
    If Not SessionObtained Then
        MsgBox "Could not find, create, or log into a suitable session for system " & cTARGET_SYSTEM_ID_CLIENT & " after all attempts.", vbCritical, "Session Error - Fallback"
        GoTo Cleanup
    End If


RunReportScript:
    ' Proceed only if a session was successfully obtained
    If SessionObtained And Not objSess Is Nothing Then
        Debug.Print "-----------------------------------------------------"
        Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Session ready (ID: " & objSess.Info.SessionNumber & "). Proceeding to run MB51 script..."
        Debug.Print "-----------------------------------------------------"
        RunGUIScript ' Call the Private sub for report steps
    Else
        MsgBox "Internal Error: Could not proceed to run GUI script. Session invalid.", vbCritical, "Internal Logic Error"
    End If

Cleanup:
    ' Restore Excel settings and release objects
    Debug.Print "-----------------------------------------------------"
    Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Running Cleanup for StartExtract..."

    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True

    Set TargetConn = Nothing
    Set W_conn = Nothing
    Set W_Sess = Nothing
    Set FirstFoundSess = Nothing
    Set NewSess = Nothing
    Set SapGuiAuto = Nothing
    Set TargetSessSSO = Nothing ' Clear SSO session variable

    ' Explicitly release GLOBAL SAP objects to disconnect scripting
     Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Releasing global SAP objects..."
     On Error Resume Next
     Set objSBar = Nothing
     Set objSess = Nothing
     Set objConn = Nothing
     Set objGui = Nothing
     On Error GoTo 0
     Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Global SAP objects released."

    Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - StartExtract finished."
    Debug.Print "====================================================="
    Exit Sub ' Ensure normal exit

' --- Error Handlers ---
ErrorHandler:
    ' General error handler for StartExtract (excluding specific SSO block)
    MsgBox "An error occurred during SAP session setup/creation (in StartExtract):" & vbCrLf & vbCrLf & _
           "Error Number: " & Err.Number & vbCrLf & _
           "Description: " & Err.Description & vbCrLf & _
           "Source: " & Err.Source & vbCrLf & vbCrLf & _
           "Check SAP status and Debug Window (Ctrl+G).", _
           vbCritical, "SAP Connection/Session Error"
    Resume Cleanup ' Go to cleanup after error

SsoLoginErrorHandler:
    ' Specific error handler for the integrated SSO login block
     MsgBox "An error occurred during the SAP SSO Logon attempt:" & vbCrLf & vbCrLf & _
           "Error Number: " & Err.Number & vbCrLf & _
           "Description: " & Err.Description & vbCrLf & _
           "Source: " & Err.Source, vbCritical, "SSO Logon Error"
     ' Ensure SessionObtained is False before cleanup
     SessionObtained = False
     Resume Cleanup ' Go to main cleanup after SSO error

End Sub


' //========================================================================
' // Sub: RunGUIScript (MB51 Extraction Logic)
' // Purpose: Executes MB51 steps: enters criteria, executes, waits, handles popups (integrated), exports.
' //          Called only by StartExtract. Declared Private.
' //========================================================================
Private Sub RunGUIScript()

    ' --- Constants specific to MB51 Execution (Localized) ---
     Const cTRANSACTION As String = "mb51"
     Const cPLANT As String = "1534"                                          ' <<< ADJUST: Your Plant Code
     Const cDATE_LOW As String = "01.03.2025"                                 ' <<< ADJUST: Start Date (DD.MM.YYYY)
     Const cDATE_HIGH As String = "31.03.2025"                                ' <<< ADJUST: End Date (DD.MM.YYYY)
     Const cLAYOUT As String = "AYUSH_TRY"                                    ' <<< ADJUST: Your ALV Layout Variant
     Const cDOWNLOAD_PATH As String = "Z:\Demand\Demand Review\SAP H2H Report" ' <<< ADJUST: Ensure folder EXISTS and is WRITABLE
     Const cFILENAME_PREFIX As String = "MB51 Report"
     Const cFILENAME_EXTENSION As String = ".XLSX"
     Const cREPORT_EXEC_TIMEOUT_SECONDS As Long = 900                         ' Timeout for report execution (15 min)
     Const cGRID_WAIT_TIMEOUT_SECONDS As Long = 180                           ' Timeout for results grid (3 min)
     Const cGRID_ID As String = "wnd[0]/usr/cntlGRID1/shellcont/shell"        ' ALV grid control ID
     Const cSTATUS_MSG_COMPLETE_1 As String = "Prepare List Output"           ' <<< ADJUST if needed
     Const cSTATUS_MSG_COMPLETE_2 As String = ""
     Const cSTATUS_MSG_COMPLETE_3 As String = ""

    ' --- Local Variables for RunGUIScript (including merged popup handling) ---
    Dim formattedDateLow As String
    Dim formattedDateHigh As String
    Dim formattedTimestamp As String
    Dim dynamicFilename As String
    Dim startTime As Single             ' Used locally for multiple timeout checks
    Dim success As Boolean
    Dim gridObject As GuiShell
    Dim currentStatus As String
    ' Variables for OLE Message Filter
    Dim lMsgFilter As LongPtr
    Dim lPreviousFilter As LongPtr
    Dim hResult As Long
    ' Variables for Integrated Popup Handling
    Dim popupWindow As GuiModalWindow
    Dim popupID As Variant ' *** CORRECTED: Must be Variant for For Each with Array() ***
    Dim handledPopup As Boolean

    ' Enable Central Error Handling for this Sub
    On Error GoTo RestoreFilterAndErrorHandler

    ' --- Pre-checks: Ensure global objects are valid ---
    If objSess Is Nothing Then Err.Raise vbObjectError + 510, "RunGUIScript", "SAP Session object (objSess) is not valid."
    If objSBar Is Nothing Then
        On Error Resume Next
        Set objSBar = objSess.FindById("wnd[0]/sbar")
        On Error GoTo RestoreFilterAndErrorHandler
        If objSBar Is Nothing Then Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Warning: Status bar object (objSBar) could not be obtained in RunGUIScript."
    End If
    Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - RunGUIScript started. Session validated."

    ' --- Step 1: Prepare Dynamic Filename ---
     On Error Resume Next
     formattedDateLow = Right$(cDATE_LOW, 4) & Mid$(cDATE_LOW, 4, 2) & Left$(cDATE_LOW, 2)
     formattedDateHigh = Right$(cDATE_HIGH, 4) & Mid$(cDATE_HIGH, 4, 2) & Left$(cDATE_HIGH, 2)
     If Err.Number <> 0 Then
         MsgBox "Could not parse dates (" & cDATE_LOW & ", " & cDATE_HIGH & ") for filename. Check format.", vbExclamation, "Filename Date Warning"
         Err.Clear
         formattedDateLow = "DateFrom"
         formattedDateHigh = "DateTo"
     End If
     On Error GoTo RestoreFilterAndErrorHandler
     formattedTimestamp = Format$(Now, "yyyymmdd_hhmmss")
     dynamicFilename = cFILENAME_PREFIX & "_" & formattedDateLow & "-" & formattedDateHigh & "_" & formattedTimestamp & cFILENAME_EXTENSION
     Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Dynamic filename created: " & dynamicFilename

    ' --- Step 2: Navigate to Transaction MB51 ---
     If objSess.ActiveWindow.Name <> "wnd[0]" Then
         Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Closing unexpected active window: " & objSess.ActiveWindow.Name & " before navigating."
         objSess.ActiveWindow.Close
         Sleep 250
     End If
     If objSess.Info.TRANSACTION <> UCase(cTRANSACTION) Then
         Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Navigating to transaction /n" & cTRANSACTION & "..."
         objSess.FindById("wnd[0]/tbar[0]/okcd").Text = "/n" & cTRANSACTION
         objSess.FindById("wnd[0]").sendVKey 0
         Sleep 500
     Else
         Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Already in transaction " & cTRANSACTION & "."
     End If

    ' --- Step 3 & 4: Clear Fields & Set Report Criteria ---
     On Error Resume Next
     objSess.FindById("wnd[0]/usr/ctxtMATNR-LOW").Text = ""
     objSess.FindById("wnd[0]/usr/ctxtMATNR-HIGH").Text = ""
     On Error GoTo RestoreFilterAndErrorHandler
     objSess.FindById("wnd[0]/usr/ctxtWERKS-LOW").Text = cPLANT
     objSess.FindById("wnd[0]/usr/ctxtBUDAT-LOW").Text = cDATE_LOW
     objSess.FindById("wnd[0]/usr/ctxtBUDAT-HIGH").Text = cDATE_HIGH
     objSess.FindById("wnd[0]/usr/radRFLAT_L").Select
     If Trim$(cLAYOUT) <> "" Then
       objSess.FindById("wnd[0]/usr/ctxtALV_DEF").Text = cLAYOUT
       Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Setting ALV Layout: " & cLAYOUT
     Else
       objSess.FindById("wnd[0]/usr/ctxtALV_DEF").Text = ""
       Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - No ALV Layout specified."
     End If
     Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Transaction " & cTRANSACTION & " criteria set."

    ' --- Start OLE Message Filter Suppression ---
     lMsgFilter = 0&
     hResult = CoRegisterMessageFilter(lMsgFilter, lPreviousFilter)
     If hResult <> 0 Then
         Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Warning: CoRegisterMessageFilter failed to register. HRESULT: " & Hex$(hResult)
         lPreviousFilter = 0
     Else
         Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - OLE Message Filter registered."
     End If

    ' --- Step 5: Execute Report ---
     objSess.FindById("wnd[0]/tbar[1]/btn[8]").press ' Execute (F8)
     Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Execute button pressed."

    ' --- Step 6: Wait for Report Execution (Primary Wait) ---
     Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Waiting for report execution (Primary Wait, Timeout: " & cREPORT_EXEC_TIMEOUT_SECONDS & "s)..."
     startTime = Timer
     Do
         ' Check Status Bar
         If Not objSBar Is Nothing Then
             currentStatus = Trim$(objSBar.Text)
             If (Len(cSTATUS_MSG_COMPLETE_1) > 0 And InStr(1, currentStatus, cSTATUS_MSG_COMPLETE_1, vbTextCompare) > 0) Or _
                (Len(cSTATUS_MSG_COMPLETE_2) > 0 And InStr(1, currentStatus, cSTATUS_MSG_COMPLETE_2, vbTextCompare) > 0) Or _
                (Len(cSTATUS_MSG_COMPLETE_3) > 0 And InStr(1, currentStatus, cSTATUS_MSG_COMPLETE_3, vbTextCompare) > 0) Then
                 Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Completion status detected: '" & currentStatus & "'"
                 Exit Do
             End If
         End If

         ' Check Busy Status
         If Not objSess.Busy Then
              If Not objSBar Is Nothing Then
                  currentStatus = Trim$(objSBar.Text)
                  If (Len(cSTATUS_MSG_COMPLETE_1) > 0 And InStr(1, currentStatus, cSTATUS_MSG_COMPLETE_1, vbTextCompare) > 0) Or _
                     (Len(cSTATUS_MSG_COMPLETE_2) > 0 And InStr(1, currentStatus, cSTATUS_MSG_COMPLETE_2, vbTextCompare) > 0) Or _
                     (Len(cSTATUS_MSG_COMPLETE_3) > 0 And InStr(1, currentStatus, cSTATUS_MSG_COMPLETE_3, vbTextCompare) > 0) Then
                       Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Completion status detected after Busy=False: '" & currentStatus & "'"
                       Exit Do
                  Else
                      Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Busy=False, completion status not seen. Checking grid next."
                      Exit Do
                  End If
              Else
                   Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Busy=False, status bar unavailable. Checking grid next."
                   Exit Do
              End If
         End If

         ' --- Integrated Popup Handling ---
         handledPopup = False
         On Error Resume Next
         For Each popupID In Array("wnd[1]", "wnd[2]") ' Check common popup window IDs
             Set popupWindow = Nothing
             Set popupWindow = objSess.FindById(popupID, False) ' Find without error if not present
             If Err.Number = 0 And Not popupWindow Is Nothing Then ' Popup found
                 handledPopup = True
                 Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Detected popup: " & popupID & " (Text: '" & popupWindow.Text & "')"
                 Debug.Print "    -> Sending VKey 0 (Enter)..."
                 popupWindow.sendVKey 0 ' Try Enter first
                 If Err.Number <> 0 Then ' If Enter failed
                     Debug.Print "    -> VKey 0 failed. Error: " & Err.Description: Err.Clear
                     Debug.Print "    -> Pressing btn[0]..."
                     popupWindow.FindById("tbar[0]/btn[0]").press ' Try default button
                     If Err.Number <> 0 Then Debug.Print "    -> btn[0] failed. Error: " & Err.Description: Err.Clear Else Debug.Print "    -> btn[0] pressed."
                 Else
                     Debug.Print "    -> VKey 0 sent."
                 End If
                 Sleep 500 ' Wait after handling
                 Exit For ' Assume one popup handled per cycle
             End If
             If Err.Number <> 0 Then Err.Clear ' Clear error if FindById failed
         Next popupID
         On Error GoTo RestoreFilterAndErrorHandler ' Restore main handler after popup check
         ' --- End Integrated Popup Handling ---

         DoEvents
         Sleep 250
         If Timer - startTime > cREPORT_EXEC_TIMEOUT_SECONDS Then
             Err.Raise vbObjectError + 513, "RunGUIScript", "Timeout waiting for primary report execution."
         End If
     Loop
     Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Primary wait loop exited."
     Sleep 250

    ' --- Step 7: Wait for Grid Control (Secondary Wait) ---
     Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Waiting for Results Grid (" & cGRID_ID & ", Timeout: " & cGRID_WAIT_TIMEOUT_SECONDS & "s)..."
     startTime = Timer
     Set gridObject = Nothing
     Do
         On Error Resume Next
         Set gridObject = objSess.FindById(cGRID_ID)
         Dim gridFindErr As Long: gridFindErr = Err.Number
         Err.Clear
         On Error GoTo RestoreFilterAndErrorHandler
         If gridFindErr = 0 And Not gridObject Is Nothing Then
             Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Results Grid object found."
             Exit Do
         End If

         ' --- Integrated Popup Handling ---
         handledPopup = False
         On Error Resume Next
         For Each popupID In Array("wnd[1]", "wnd[2]") ' Check common popup window IDs
             Set popupWindow = Nothing
             Set popupWindow = objSess.FindById(popupID, False) ' Find without error if not present
             If Err.Number = 0 And Not popupWindow Is Nothing Then ' Popup found
                 handledPopup = True
                 Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Detected popup during grid wait: " & popupID & " (Text: '" & popupWindow.Text & "')"
                 Debug.Print "    -> Sending VKey 0 (Enter)..."
                 popupWindow.sendVKey 0 ' Try Enter first
                 If Err.Number <> 0 Then ' If Enter failed
                     Debug.Print "    -> VKey 0 failed. Error: " & Err.Description: Err.Clear
                     Debug.Print "    -> Pressing btn[0]..."
                     popupWindow.FindById("tbar[0]/btn[0]").press ' Try default button
                     If Err.Number <> 0 Then Debug.Print "    -> btn[0] failed. Error: " & Err.Description: Err.Clear Else Debug.Print "    -> btn[0] pressed."
                 Else
                     Debug.Print "    -> VKey 0 sent."
                 End If
                 Sleep 500 ' Wait after handling
                 Exit For ' Assume one popup handled per cycle
             End If
             If Err.Number <> 0 Then Err.Clear ' Clear error if FindById failed
         Next popupID
         On Error GoTo RestoreFilterAndErrorHandler ' Restore main handler after popup check
         ' --- End Integrated Popup Handling ---

         If objSess.ActiveWindow.Name <> "wnd[0]" Then
              Err.Raise vbObjectError + 514, "RunGUIScript", "SAP Active Window changed unexpectedly to '" & objSess.ActiveWindow.Name & "' during grid wait."
         End If

         DoEvents
         Sleep 250
         If Timer - startTime > cGRID_WAIT_TIMEOUT_SECONDS Then
              Err.Raise vbObjectError + 515, "RunGUIScript", "Timeout waiting for results grid control."
         End If
     Loop
     Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Grid wait loop exited."
     Sleep 100

    ' --- Step 8: Export Results to Excel ---
     Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Proceeding with export..."
     success = False
     If gridObject Is Nothing Then
          On Error Resume Next
          Set gridObject = objSess.FindById(cGRID_ID)
          On Error GoTo RestoreFilterAndErrorHandler
          If gridObject Is Nothing Then Err.Raise vbObjectError + 516, "RunGUIScript", "Export failed: Grid object invalid."
          Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Grid obtained on second attempt before export."
     End If

     On Error Resume Next ' Use Resume Next for the export sequence
     gridObject.ContextMenu
     If Err.Number <> 0 Then Debug.Print "Error: ContextMenu: " & Err.Description: Err.Clear: GoTo ExportSequenceErrorCheck
     gridObject.SelectContextMenuItem "&XXL"
     If Err.Number <> 0 Then Debug.Print "Error: SelectContextMenuItem: " & Err.Description: Err.Clear: GoTo ExportSequenceErrorCheck
     Sleep 250
     objSess.FindById("wnd[1]/tbar[0]/btn[0]").press ' Continue
     If Err.Number <> 0 Then Debug.Print "Error: Format Continue: " & Err.Description: Err.Clear: GoTo ExportSequenceErrorCheck
     Sleep 250
     objSess.FindById("wnd[1]/usr/ctxtDY_PATH").Text = cDOWNLOAD_PATH ' Path
     If Err.Number <> 0 Then Debug.Print "Error: Set Path: " & Err.Description: Err.Clear: GoTo ExportSequenceErrorCheck
     objSess.FindById("wnd[1]/usr/ctxtDY_FILENAME").Text = dynamicFilename ' Filename
     If Err.Number <> 0 Then Debug.Print "Error: Set Filename: " & Err.Description: Err.Clear: GoTo ExportSequenceErrorCheck
     objSess.FindById("wnd[1]/tbar[0]/btn[11]").press ' Save/Generate/Replace
     If Err.Number <> 0 Then Debug.Print "Error: Save Button: " & Err.Description: Err.Clear: GoTo ExportSequenceErrorCheck
     success = (Err.Number = 0)
     If success Then Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Export commands sent to: " & cDOWNLOAD_PATH & "\" & dynamicFilename
     Sleep 1000

ExportSequenceErrorCheck:
     On Error GoTo RestoreFilterAndErrorHandler ' Restore main handler
     If Not success Then
          Err.Raise vbObjectError + 517, "RunGUIScript", "Export sequence failed. Check Debug Window. Ensure path exists/writable, check permissions/button IDs."
     End If

    GoTo RestoreFilterAndExit ' Go to normal exit


' --- Error Handler and Cleanup Section for RunGUIScript ---
RestoreFilterAndErrorHandler:
     Dim errNum As Long: errNum = Err.Number
     Dim errDesc As String: errDesc = Err.Description
     Dim errSource As String: errSource = Err.Source
     Debug.Print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
     Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - ERROR ENCOUNTERED in RunGUIScript!"
     Debug.Print "    Error #: " & errNum: Debug.Print "    Source:  " & errSource: Debug.Print "    Desc:    " & errDesc
     Debug.Print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
     If lPreviousFilter <> 0 Then
         On Error Resume Next
         hResult = CoRegisterMessageFilter(lPreviousFilter, lMsgFilter)
         If hResult <> 0 Then Debug.Print "Warning: Failed RESTORE OLE Filter (Error). HRESULT: " & Hex$(hResult) Else Debug.Print "OLE Filter restored (Error)."
         lPreviousFilter = 0
         On Error GoTo 0
     End If
     MsgBox "Error during SAP GUI script execution (MB51):" & vbCrLf & vbCrLf & _
            "Err #: " & errNum & vbCrLf & "Source: " & errSource & vbCrLf & "Desc: " & errDesc & vbCrLf & vbCrLf & _
            "Check SAP screen & Debug Window (Ctrl+G).", vbCritical, "SAP Scripting Runtime Error"
     On Error Resume Next ' Attempt cleanup
     If Not objSess Is Nothing Then
         Debug.Print "Attempting SAP cleanup after error..."
         If objSess.Busy Then Sleep 500
         If objSess.ActiveWindow.Name = "wnd[1]" Or objSess.ActiveWindow.Name = "wnd[2]" Then objSess.FindById("wnd[0]/tbar[0]/btn[12]").press: Sleep 250
         If objSess.ActiveWindow.Name = "wnd[0]" Then objSess.FindById("wnd[0]/tbar[0]/btn[15]").press: Sleep 250
         Debug.Print "SAP cleanup attempt finished."
     End If
     GoTo FinalCleanup ' Jump to final Excel cleanup

RestoreFilterAndExit:
    ' Normal exit path
     If lPreviousFilter <> 0 Then
         On Error Resume Next
         hResult = CoRegisterMessageFilter(lPreviousFilter, lMsgFilter)
         If hResult <> 0 Then Debug.Print "Warning: Failed RESTORE OLE Filter (Normal). HRESULT: " & Hex$(hResult) Else Debug.Print "OLE Filter restored (Normal)."
         lPreviousFilter = 0
         On Error GoTo 0
     End If
     On Error Resume Next ' Attempt SAP navigation cleanup
     Debug.Print "Navigating back in SAP..."
     If Not objSess Is Nothing Then
         If objSess.ActiveWindow.Name = "wnd[0]" Then
             objSess.FindById("wnd[0]/tbar[0]/btn[15]").press ' Exit
             Sleep 100
             If objSess.Info.TRANSACTION = UCase(cTRANSACTION) Then objSess.FindById("wnd[0]/tbar[0]/btn[3]").press ' Back
         ElseIf objSess.ActiveWindow.Name = "wnd[1]" Or objSess.ActiveWindow.Name = "wnd[2]" Then
              objSess.FindById("wnd[0]/tbar[0]/btn[12]").press ' Cancel/Close
         End If
     End If
     Debug.Print "SAP navigation cleanup finished."
     On Error GoTo 0
     Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - RunGUIScript finished normally."

FinalCleanup:
    ' Restore Excel settings (called from both error and normal exit)
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    On Error GoTo 0
    Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Exiting RunGUIScript."
    ' Return control to StartExtract
End Sub
