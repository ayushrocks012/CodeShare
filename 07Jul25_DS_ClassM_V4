'@Folder("Classes")
Option Explicit

'================================================================================================
' Class:       cProductLifecycle
' Purpose:     Represents a single product's entire lifecycle, including its status,
'              phase-in/out dates, successor relationships, and calculated forecast values.
' Used in:     MainModule (M_Forecasting) to calculate and apply lifecycle adjustments to forecasts.
' Version:     25.0
' Author:      Ayush Goyal
' Date:        07-Jul-2025
'================================================================================================

' --- Constants ---
Private Const DEFAULT_PHASE_OUT_PCT As Double = 1# ' Default to 100% if blank or invalid

'--- Private Member Variables (for Encapsulation) ---
' Core Product Identifiers
Private m_Affiliate As String
Private m_ForecastTier As String
Private m_ForecastSubTier As String
Private m_LocalItemNbr As String
Private m_Description As String
Private m_ISD As String
Private m_Status As ProductStatus

' Phase-Out Properties
Private m_IsPhasingOut As Boolean
Private m_PhaseOutDate As Date
Private m_PhaseOutPercent As Double
Private m_SupersededByProductID As String

' Phase-In Properties
Private m_IsPhasingIn As Boolean
Private m_PhaseInDate As Date
Private m_PhaseInPercent As Double

' Calculated Data
Private m_ForecastValues As Object ' Dictionary

'--- Public Properties (Get/Let) ---
Public Property Get Affiliate() As String: Affiliate = m_Affiliate: End Property 'The affiliate code (e.g., "UK", "IE")
Public Property Let Affiliate(ByVal Value As String): m_Affiliate = Value: End Property

Public Property Get ForecastTier() As String: ForecastTier = m_ForecastTier: End Property 'The product's main forecast grouping (e.g., "VITAL 1.5KCAL RPB")
Public Property Let ForecastTier(ByVal Value As String): m_ForecastTier = Value: End Property

Public Property Get ForecastSubTier() As String: ForecastSubTier = m_ForecastSubTier: End Property 'The product's secondary forecast grouping
Public Property Let ForecastSubTier(ByVal Value As String): m_ForecastSubTier = Value: End Property

Public Property Get LocalItemNbr() As String: LocalItemNbr = m_LocalItemNbr: End Property 'The local product code
Public Property Let LocalItemNbr(ByVal Value As String): m_LocalItemNbr = Value: End Property

Public Property Get Description() As String: Description = m_Description: End Property 'The product's description
Public Property Let Description(ByVal Value As String): m_Description = Value: End Property

Public Property Get ISD() As String: ISD = m_ISD: End Property 'The unique I-S-D identifier for the product
Public Property Let ISD(ByVal Value As String): m_ISD = Value: End Property

Public Property Get Status() As ProductStatus: Status = m_Status: End Property 'The product's lifecycle status (e.g., Active, Discontinued)
Public Property Let Status(ByVal Value As ProductStatus): m_Status = Value: End Property

Public Property Get PhaseOutDate() As Date: PhaseOutDate = m_PhaseOutDate: End Property 'The month in which the product begins to phase out
Public Property Let PhaseOutDate(ByVal Value As Date): m_PhaseOutDate = Value: End Property

Public Property Get PhaseOutPercent() As Double: PhaseOutPercent = m_PhaseOutPercent: End Property 'The percentage of the forecast to RETAIN in the phase-out month
Public Property Let PhaseOutPercent(ByVal Value As Double): m_PhaseOutPercent = Value: End Property

Public Property Get SupersededByProductID() As String: SupersededByProductID = m_SupersededByProductID: End Property 'The I-S-D of the product that is replacing this one
Public Property Let SupersededByProductID(ByVal Value As String): m_SupersededByProductID = Value: End Property

Public Property Get IsPhasingOut() As Boolean: IsPhasingOut = m_IsPhasingOut: End Property 'Flag indicating if the product is currently phasing out
Public Property Let IsPhasingOut(ByVal Value As Boolean): m_IsPhasingOut = Value: End Property

Public Property Get IsPhasingIn() As Boolean: IsPhasingIn = m_IsPhasingIn: End Property 'Flag indicating if the product is a successor that is phasing in
Public Property Let IsPhasingIn(ByVal Value As Boolean): m_IsPhasingIn = Value: End Property

Public Property Get PhaseInDate() As Date: PhaseInDate = m_PhaseInDate: End Property 'The month in which this product begins to phase in (as a successor)
Public Property Let PhaseInDate(ByVal Value As Date): m_PhaseInDate = Value: End Property

Public Property Get PhaseInPercent() As Double: PhaseInPercent = m_PhaseInPercent: End Property 'The percentage of forecast volume this product receives in its phase-in month
Public Property Let PhaseInPercent(ByVal Value As Double): m_PhaseInPercent = Value: End Property

Public Property Get ForecastValues() As Object: Set ForecastValues = m_ForecastValues: End Property 'A dictionary holding the calculated forecast values
Public Property Set ForecastValues(ByVal Value As Object): Set m_ForecastValues = Value: End Property


Private Sub Class_Initialize()
    ' Initialize the dictionary when a new object is created
    Set m_ForecastValues = CreateObject("Scripting.Dictionary")
End Sub

'--- Purpose: Initializes the object's properties from a row of data in the status array.
'------------------------------------------------------------------------------------------------
Public Sub Init(ByVal arrDataSource As Variant, ByVal lngRow As Long)
    Me.Affiliate = Trim$(arrDataSource(lngRow, PS_AFFILIATE_COL))
    Me.ForecastTier = Trim$(arrDataSource(lngRow, PS_TIER_COL))
    Me.ForecastSubTier = Trim$(arrDataSource(lngRow, PS_SUB_TIER_COL))
    Me.LocalItemNbr = Trim$(arrDataSource(lngRow, PS_LOCAL_ITEM_NBR_COL))
    Me.Description = Trim$(arrDataSource(lngRow, PS_DESC_COL))
    Me.ISD = Trim$(arrDataSource(lngRow, PS_ISD_COL))
    Me.Status = GetStatusEnum(Trim$(arrDataSource(lngRow, PS_STATUS_COL)))
    Me.SupersededByProductID = Trim$(arrDataSource(lngRow, PS_SUPERSEDED_BY_COL))
    
    '--- Safely handle phase-out details ---
    HandlePhaseOutInit arrDataSource, lngRow
End Sub

'--- Purpose: Calculates the forecast multiplier for a given month based on the object's status.
'--- Returns: A Double (e.g., 1.0, 0.5, 0.0) to adjust the base forecast.
'------------------------------------------------------------------------------------------------
Public Function GetForecastMultiplier(ByVal dteForecastDate As Date) As Double
    GetForecastMultiplier = 1 'Default to 100% for active products

    '--- Handle Phase-In logic ---
    If Me.IsPhasingIn And Me.PhaseInDate > 0 Then
        If FirstDayOfMonth(dteForecastDate) < FirstDayOfMonth(Me.PhaseInDate) Then
            GetForecastMultiplier = 0 'Forecast is zero before phase-in starts
            Exit Function
        ElseIf FirstDayOfMonth(dteForecastDate) = FirstDayOfMonth(Me.PhaseInDate) Then
            GetForecastMultiplier = Me.PhaseInPercent 'Apply phase-in percentage for the first month
            Exit Function
        End If
    End If

    '--- Handle Phase-Out logic ---
    If Me.IsPhasingOut And Me.PhaseOutDate > 0 Then
        If FirstDayOfMonth(dteForecastDate) > FirstDayOfMonth(Me.PhaseOutDate) Then
            GetForecastMultiplier = 0 'After phase-out month, forecast is zero
        ElseIf FirstDayOfMonth(dteForecastDate) = FirstDayOfMonth(Me.PhaseOutDate) Then
            ' Example: If PhaseOutPercent = 0.3, the old product keeps 30% of its forecast.
            GetForecastMultiplier = Me.PhaseOutPercent 'In phase-out month, apply the specified % to RETAIN
        End If
    End If
    
End Function

'--- Purpose: Finds the successor product (if any) and transfers the phased-out portion of the forecast.
'------------------------------------------------------------------------------------------------
Public Sub LinkAndTransferSuccessorForecast(ByVal dictMap As Object)
    If Not Me.IsPhasingOut Or Len(Me.SupersededByProductID) = 0 Then Exit Sub
    
    Dim strSuccessorKey As String
    strSuccessorKey = BuildCompositeKey(Me.Affiliate, Me.SupersededByProductID)
    
    If dictMap.Exists(strSuccessorKey) Then
        Dim objSuccessor As cProductLifecycle
        Set objSuccessor = dictMap.Item(strSuccessorKey)
        
        '--- Set the successor's phase-in details ---
        ' Example: If old product's PhaseOutPercent = 0.3 (keeps 30%),
        '          the successor's PhaseInPercent will be 0.7 (receives 70%).
        objSuccessor.IsPhasingIn = True
        objSuccessor.PhaseInDate = Me.PhaseOutDate
        objSuccessor.PhaseInPercent = 1 - Me.PhaseOutPercent
        
        '--- Transfer the phased-out value to the successor ---
        Dim varForecastKey As Variant
        For Each varForecastKey In Me.ForecastValues.Keys
            Dim dblOriginalValue As Double, dblMultiplier As Double, dblTransferValue As Double
            Dim arrKeyParts() As String
            
            arrKeyParts = Split(varForecastKey, "|")
            Dim dteForecastMonth As Date: dteForecastMonth = CDate(arrKeyParts(1))
            
            ' Only transfer value in the actual phase-out month
            If FirstDayOfMonth(dteForecastMonth) = FirstDayOfMonth(Me.PhaseOutDate) Then
                dblOriginalValue = Me.ForecastValues.Item(varForecastKey)
                dblMultiplier = Me.GetForecastMultiplier(dteForecastMonth)
                
                ' The value to transfer is the portion that was lost (Base * (1 - Retain %))
                If dblOriginalValue > 0 Then
                    dblTransferValue = dblOriginalValue * (1 - dblMultiplier)
                End If
                
                If objSuccessor.ForecastValues.Exists(varForecastKey) Then
                    objSuccessor.ForecastValues.Item(varForecastKey) = objSuccessor.ForecastValues.Item(varForecastKey) + dblTransferValue
                Else
                    objSuccessor.ForecastValues.Add varForecastKey, dblTransferValue
                End If
            End If
        Next varForecastKey
    End If
End Sub

'--- Purpose: Provides a simple string representation of the object for debugging.
'--- Returns: A string summarizing the object's key properties.
'------------------------------------------------------------------------------------------------
Public Function DebugSummary() As String
    DebugSummary = Me.Affiliate & " | " & Me.LocalItemNbr & " | " & GetStatusString(Me.Status)
End Function


'================================================================================================
'--- PRIVATE HELPER METHODS ---
'================================================================================================

'--- Purpose: Safely extracts and sets phase-out properties from the data array.
'------------------------------------------------------------------------------------------------
Private Sub HandlePhaseOutInit(ByVal arrDataSource As Variant, ByVal lngRow As Long)
    Dim varPhaseOutPct As Variant: varPhaseOutPct = arrDataSource(lngRow, PS_PHASE_OUT_PCT_COL)
    
    '--- Safely get the phase-out percentage ---
    If IsNumeric(varPhaseOutPct) And varPhaseOutPct >= 0 And varPhaseOutPct <= 1 Then
        Me.PhaseOutPercent = CDbl(varPhaseOutPct)
    Else
        Me.PhaseOutPercent = DEFAULT_PHASE_OUT_PCT
    End If

    '--- Set phase-out flag and date ---
    If Me.Status = psPhaseInOut Or Me.Status = psDiscontinued Then
        Me.IsPhasingOut = True
        If IsDate(arrDataSource(lngRow, PS_PHASE_OUT_DATE_COL)) Then
            Me.PhaseOutDate = CDate(arrDataSource(lngRow, PS_PHASE_OUT_DATE_COL))
        End If
    End If
End Sub

'--- Purpose: Returns the first day of the month for a given date.
'------------------------------------------------------------------------------------------------
Private Function FirstDayOfMonth(ByVal d As Date) As Date
    FirstDayOfMonth = DateSerial(Year(d), Month(d), 1)
End Function
