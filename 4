' //========================================================================
' // Sub: RunGUIScript (DEBUG VERSION - Refined Polling Loop)
' // Purpose: Executes MB51 steps, using a polling loop with error handling
' //          immediately after sending the execute command.
' //========================================================================
Private Sub RunGUIScript() ' <-- Still Private
    ' --- Constants specific to RunGUIScript ---
    Const cTRANSACTION As String = "mb51"
    Const cPLANT As String = "1534"                                 ' <<< ADJUST: Your Plant Code
    Const cDATE_LOW As String = "01.03.2025"                        ' <<< ADJUST: Start Date (DD.MM.YYYY format expected by code)
    Const cDATE_HIGH As String = "31.03.2025"                       ' <<< ADJUST: End Date (DD.MM.YYYY format expected by code)
    Const cLAYOUT As String = "AYUSH_TRY"                           ' <<< ADJUST: Your ALV Layout Variant (leave "" for default/no layout)
    Const cDOWNLOAD_PATH As String = "Z:\Demand\Demand Review\2025\03 Mar 25\SAP H2H Report" ' <<< ADJUST: Ensure this folder exists and is writable
    Const cFILENAME_PREFIX As String = "MB51 Report"
    Const cFILENAME_EXTENSION As String = ".XLSX"                   ' Ensure extension matches download format (&XXL -> XLSX typically)
    Const cOVERALL_TIMEOUT_SECONDS As Long = 1200                   ' <<< ADJUST IF NEEDED: Overall timeout for the entire report generation (e.g., 1200s = 20 min)
    Const cGRID_WAIT_TIMEOUT_SECONDS As Long = 180                  ' Timeout for waiting specifically for the grid object after status bar confirms completion
    Const cGRID_ID As String = "wnd[0]/usr/cntlGRID1/shellcont/shell" ' Standard ID of the ALV grid control in MB51 results

    ' --- Status Bar Messages Updated Based on User Input ---
    Const cSTATUS_MSG_COMPLETE_1 As String = "Prepare List Output"  ' Final message before list appears
    Const cSTATUS_MSG_COMPLETE_2 As String = ""                     ' Cleared
    Const cSTATUS_MSG_COMPLETE_3 As String = ""                     ' Cleared
    Const cSTATUS_MSG_PROCESSING As String = "Read MM Documents"    ' Intermediate processing message

    ' --- Local Variables for RunGUIScript ---
    Dim formattedDateLow As String
    Dim formattedDateHigh As String
    Dim formattedTimestamp As String
    Dim dynamicFilename As String
    Dim startTime As Single
    Dim success As Boolean
    Dim gridObject As Object
    Dim currentStatus As String
    Dim loopCounter As Long ' To prevent infinite loops in edge cases
    Dim oleErrorOccurred As Boolean ' Flag if OLE error happened during status read

    On Error GoTo GuiScriptError
    Debug.Print "--------------------------------------------------"
    Debug.Print Format(Now, "hh:nn:ss") & " - RunGUIScript Started (Polling Version)."

    ' --- Pre-checks ---
    If objSess Is Nothing Then Debug.Print Format(Now, "hh:nn:ss") & " - ERROR: objSess is Nothing.": MsgBox "SAP Session object (objSess) is not valid.", vbCritical, "Script Error": Exit Sub
    If objSBar Is Nothing Then
       Debug.Print Format(Now, "hh:nn:ss") & " - WARNING: objSBar was Nothing, attempting to set."
       On Error Resume Next: Set objSBar = objSess.FindById("wnd[0]/sbar"): On Error GoTo GuiScriptError
       If objSBar Is Nothing Then MsgBox "SAP Status Bar object (objSBar) could not be found/set.", vbCritical, "Script Error": Exit Sub
    End If
    Debug.Print Format(Now, "hh:nn:ss") & " - Pre-checks passed."

    ' --- Step 1: Prepare Dynamic Filename ---
    Debug.Print Format(Now, "hh:nn:ss") & " - Preparing dynamic filename..."
    On Error Resume Next
    formattedDateLow = Right$(cDATE_LOW, 4) & Mid$(cDATE_LOW, 4, 2) & Left$(cDATE_LOW, 2)
    formattedDateHigh = Right$(cDATE_HIGH, 4) & Mid$(cDATE_HIGH, 4, 2) & Left$(cDATE_HIGH, 2)
    If Err.Number <> 0 Then MsgBox "Could not parse dates (" & cDATE_LOW & ", " & cDATE_HIGH & ") for filename.", vbExclamation, "Filename Warning": Err.Clear: formattedDateLow = "DateFrom": formattedDateHigh = "DateTo"
    On Error GoTo GuiScriptError
    formattedTimestamp = Format$(Now, "yyyymmdd_hhmmss")
    dynamicFilename = cFILENAME_PREFIX & "_" & formattedDateLow & "-" & formattedDateHigh & "_" & formattedTimestamp & cFILENAME_EXTENSION
    Debug.Print Format(Now, "hh:nn:ss") & " - Dynamic Filename: " & dynamicFilename

    ' --- Step 2: Navigate to Transaction and Set Criteria ---
    Debug.Print Format(Now, "hh:nn:ss") & " - Setting TCode: " & cTRANSACTION
    objSess.FindById("wnd[0]/tbar[0]/okcd").Text = cTRANSACTION
    Debug.Print Format(Now, "hh:nn:ss") & " - Sending Enter key..."
    objSess.FindById("wnd[0]").sendVKey 0
    Debug.Print Format(Now, "hh:nn:ss") & " - Enter key sent. Pausing briefly..."
    Sleep 500

    ' --- Step 3: Clear Potentially Interfering Fields ---
    Debug.Print Format(Now, "hh:nn:ss") & " - Clearing Material fields..."
    On Error Resume Next
    objSess.FindById("wnd[0]/usr/ctxtMATNR-LOW").Text = ""
    objSess.FindById("wnd[0]/usr/ctxtMATNR-HIGH").Text = ""
    On Error GoTo GuiScriptError
    Debug.Print Format(Now, "hh:nn:ss") & " - Material fields cleared (errors ignored)."

    ' --- Step 4: Set Report Criteria ---
    Debug.Print Format(Now, "hh:nn:ss") & " - Setting criteria (Plant, Dates, Layout)..."
    objSess.FindById("wnd[0]/usr/ctxtWERKS-LOW").Text = cPLANT
    objSess.FindById("wnd[0]/usr/ctxtBUDAT-LOW").Text = cDATE_LOW
    objSess.FindById("wnd[0]/usr/ctxtBUDAT-HIGH").Text = cDATE_HIGH
    objSess.FindById("wnd[0]/usr/radRFLAT_L").Select
    If Trim$(cLAYOUT) <> "" Then objSess.FindById("wnd[0]/usr/ctxtALV_DEF").Text = cLAYOUT
    Debug.Print Format(Now, "hh:nn:ss") & " - Criteria set."

    ' --- Step 5: Execute Report ---
    Debug.Print Format(Now, "hh:nn:ss") & " - Sending Execute command (sendVKey 8)..."
    objSess.FindById("wnd[0]").sendVKey 8 ' 8 corresponds to F8 (Execute)
    Debug.Print Format(Now, "hh:nn:ss") & " - Execute command sent. Immediately starting polling loop."
    Sleep 500 ' Short pause to allow status bar to potentially update initially

    ' --- Step 6: REVISED - Polling Loop for Status Bar with Error Handling ---
    Debug.Print Format(Now, "hh:nn:ss") & " - Entering REVISED Step 6 Polling Loop..."
    startTime = Timer
    loopCounter = 0
    Do
        loopCounter = loopCounter + 1
        oleErrorOccurred = False ' Reset flag for this iteration

        ' --- Attempt to Read Status Bar ---
        Debug.Print Format(Now, "hh:nn:ss") & "   (Loop 6 - Iter " & loopCounter & ") Attempting to read Status Bar..."
        On Error Resume Next ' *** Temporarily ignore errors during status bar read ***
        currentStatus = Trim$(objSBar.Text)
        If Err.Number <> 0 Then
            oleErrorOccurred = True ' Mark that an error occurred
            Debug.Print Format(Now, "hh:nn:ss") & "   (Loop 6 - Iter " & loopCounter & ") OLE Error reading status bar! Error: " & Err.Description & " (" & Err.Number & ")"
            Err.Clear ' Clear the error
        End If
        On Error GoTo GuiScriptError ' *** Restore main error handling ***
        Debug.Print Format(Now, "hh:nn:ss") & "   (Loop 6 - Iter " & loopCounter & ") Status Bar Read Attempt Finished. Text: '" & currentStatus & "'"

        ' --- Check for Completion Message (only if read was successful) ---
        If Not oleErrorOccurred Then
            If (Len(cSTATUS_MSG_COMPLETE_1) > 0 And InStr(1, currentStatus, cSTATUS_MSG_COMPLETE_1, vbTextCompare) > 0) Or _
               (Len(cSTATUS_MSG_COMPLETE_2) > 0 And InStr(1, currentStatus, cSTATUS_MSG_COMPLETE_2, vbTextCompare) > 0) Or _
               (Len(cSTATUS_MSG_COMPLETE_3) > 0 And InStr(1, currentStatus, cSTATUS_MSG_COMPLETE_3, vbTextCompare) > 0) Then
                Debug.Print Format(Now, "hh:nn:ss") & "   (Loop 6 - Iter " & loopCounter & ") Completion message found in status bar. Exiting loop."
                Exit Do ' Exit loop, proceed to grid check
            Else
                 Debug.Print Format(Now, "hh:nn:ss") & "   (Loop 6 - Iter " & loopCounter & ") Status bar read OK, but not completion message."
                 ' Optional: Check for known intermediate messages
                 If InStr(1, currentStatus, cSTATUS_MSG_PROCESSING, vbTextCompare) > 0 Then
                     Debug.Print Format(Now, "hh:nn:ss") & "   (Loop 6 - Iter " & loopCounter & ") Status: Still processing ('" & cSTATUS_MSG_PROCESSING & "')."
                 End If
            End If
        End If

        ' --- Wait Logic ---
        DoEvents ' Keep Excel responsive
        If oleErrorOccurred Then
            Debug.Print Format(Now, "hh:nn:ss") & "   (Loop 6 - Iter " & loopCounter & ") OLE Error occurred, sleeping longer (5 seconds)..."
            Sleep 5000 ' Wait longer if reading status bar failed, SAP might be very busy
        Else
            Debug.Print Format(Now, "hh:nn:ss") & "   (Loop 6 - Iter " & loopCounter & ") Sleeping shorter (1 second)..."
            Sleep 1000 ' Wait shorter if read was successful but not complete yet
        End If

        ' --- Check Overall Timeout ---
        If Timer - startTime > cOVERALL_TIMEOUT_SECONDS Then
            Debug.Print Format(Now, "hh:nn:ss") & "   (Loop 6) OVERALL TIMEOUT REACHED!"
            MsgBox "The report generation timed out after " & cOVERALL_TIMEOUT_SECONDS & " seconds (Polling Loop).", vbCritical, "Timeout Error"
            On Error Resume Next
            objSess.FindById("wnd[0]/tbar[0]/btn[15]").press
            Exit Sub
        End If
        Debug.Print Format(Now, "hh:nn:ss") & "   (Loop 6 - Iter " & loopCounter & ") Looping..."

    Loop ' Loop until completion message is found or timeout
    Debug.Print Format(Now, "hh:nn:ss") & " - Exited Step 6 Polling Loop."
    Sleep 500 ' Pause after loop before checking grid


    ' --- Step 7: Wait for Grid Control (Final Confirmation) ---
    ' Now that status bar indicated completion, double-check grid exists
    Debug.Print Format(Now, "hh:nn:ss") & " - Entering Step 7 Grid Confirmation Loop (" & cGRID_ID & ")..."
    startTime = Timer
    Do
        Set gridObject = Nothing
        On Error Resume Next ' Ignore error if grid not ready
        Set gridObject = objSess.FindById(cGRID_ID)
        On Error GoTo GuiScriptError ' Restore error handling

        If Not gridObject Is Nothing Then
             Debug.Print Format(Now, "hh:nn:ss") & "   (Loop 7) Grid object found. Proceeding."
             Exit Do ' Grid found, proceed to export
        Else
             Debug.Print Format(Now, "hh:nn:ss") & "   (Loop 7) Grid object not found yet."
        End If

        ' Check for Unexpected Windows
         If objSess.ActiveWindow.Name <> "wnd[0]" Then
             Debug.Print Format(Now, "hh:nn:ss") & "   (Loop 7) WARNING: Active window is '" & objSess.ActiveWindow.Name & "'!"
             MsgBox "Warning: SAP Active Window changed unexpectedly during grid wait to '" & objSess.ActiveWindow.Name & "'.", vbExclamation
             On Error Resume Next: objSess.FindById("wnd[0]/tbar[0]/btn[15]").press: Exit Sub
         End If

        DoEvents
        Sleep 250
        If Timer - startTime > cGRID_WAIT_TIMEOUT_SECONDS Then
             Debug.Print Format(Now, "hh:nn:ss") & "   (Loop 7) TIMEOUT waiting for grid object!"
             MsgBox "Timeout (" & cGRID_WAIT_TIMEOUT_SECONDS & "s) waiting specifically for results grid object (" & cGRID_ID & ") after status bar indicated completion.", vbCritical, "Timeout Error"
             On Error Resume Next: objSess.FindById("wnd[0]/tbar[0]/btn[15]").press: Exit Sub
        End If
        Debug.Print Format(Now, "hh:nn:ss") & "   (Loop 7) Looping..."
    Loop
    Debug.Print Format(Now, "hh:nn:ss") & " - Exited Step 7 Grid Confirmation Loop."


    ' --- Step 8: Export Results to Excel ---
    ' (Code remains the same as previous debug version)
    Debug.Print Format(Now, "hh:nn:ss") & " - Proceeding with export..."
    success = False
    On Error Resume Next

    If gridObject Is Nothing Then Debug.Print Format(Now, "hh:nn:ss") & " - ERROR: Grid object is Nothing before export.": MsgBox "Export failed: Grid object could not be obtained.", vbCritical, "Script Error": GoTo ExportError

    Debug.Print Format(Now, "hh:nn:ss") & "   Calling gridObject.ContextMenu..."
    gridObject.ContextMenu
    If Err.Number <> 0 Then Debug.Print Format(Now, "hh:nn:ss") & "   ERROR during ContextMenu: " & Err.Description: GoTo ExportError
    Debug.Print Format(Now, "hh:nn:ss") & "   Calling gridObject.SelectContextMenuItem '&XXL'..."
    gridObject.SelectContextMenuItem "&XXL"
    If Err.Number <> 0 Then Debug.Print Format(Now, "hh:nn:ss") & "   ERROR during SelectContextMenuItem: " & Err.Description: GoTo ExportError

    Debug.Print Format(Now, "hh:nn:ss") & "   Pausing before format dialog..."
    Sleep 500
    Debug.Print Format(Now, "hh:nn:ss") & "   Pressing Continue on format dialog (wnd[1]/btn[0])..."
    objSess.FindById("wnd[1]/tbar[0]/btn[0]").press
    If Err.Number <> 0 Then Debug.Print Format(Now, "hh:nn:ss") & "   ERROR pressing Continue on format dialog (wnd[1]): " & Err.Description: GoTo ExportError

    Debug.Print Format(Now, "hh:nn:ss") & "   Pausing before save dialog..."
    Sleep 500
    Debug.Print Format(Now, "hh:nn:ss") & "   Setting download path: " & cDOWNLOAD_PATH
    objSess.FindById("wnd[1]/usr/ctxtDY_PATH").Text = cDOWNLOAD_PATH
    If Err.Number <> 0 Then Debug.Print Format(Now, "hh:nn:ss") & "   ERROR setting download path (wnd[1]): " & Err.Description: GoTo ExportError
    Debug.Print Format(Now, "hh:nn:ss") & "   Setting download filename: " & dynamicFilename
    objSess.FindById("wnd[1]/usr/ctxtDY_FILENAME").Text = dynamicFilename
    If Err.Number <> 0 Then Debug.Print Format(Now, "hh:nn:ss") & "   ERROR setting download filename (wnd[1]): " & Err.Description: GoTo ExportError
    Debug.Print Format(Now, "hh:nn:ss") & "   Pressing Save/Generate button (wnd[1]/btn[0])..."
    objSess.FindById("wnd[1]/tbar[0]/btn[0]").press
    If Err.Number <> 0 Then Debug.Print Format(Now, "hh:nn:ss") & "   ERROR pressing Save/Generate button (wnd[1]): " & Err.Description: GoTo ExportError

    Debug.Print Format(Now, "hh:nn:ss") & " - Export steps submitted."
    success = True

ExportError:
    On Error GoTo GuiScriptError
    If Not success Then
        Debug.Print Format(Now, "hh:nn:ss") & " - Export failed. Error #: " & Err.Number & ", Desc: " & Err.Description
        If Err.Number <> 0 Then MsgBox "An error occurred during the export process." & vbCrLf & vbCrLf & "Error: " & Err.Description & " (" & Err.Number & ")", vbExclamation, "Export Warning": Err.Clear
        Else MsgBox "The export process did not complete successfully (no specific error code caught).", vbExclamation, "Export Warning"
    Else Debug.Print Format(Now, "hh:nn:ss") & " - Export marked as successful."
    End If

    ' --- Step 9: Navigate Back ---
    Debug.Print Format(Now, "hh:nn:ss") & " - Navigating back..."
    On Error Resume Next
    objSess.FindById("wnd[0]/tbar[0]/btn[15]").press
    Sleep 250
    objSess.FindById("wnd[0]/tbar[0]/btn[15]").press
    On Error GoTo GuiScriptError

    Debug.Print Format(Now, "hh:nn:ss") & " - RunGUIScript finished normally."
    Debug.Print "--------------------------------------------------"
    Exit Sub

GuiScriptError:
    Debug.Print Format(Now, "hh:nn:ss") & " - *** CRITICAL ERROR ***"
    Debug.Print Format(Now, "hh:nn:ss") & "   Error #: " & Err.Number
    Debug.Print Format(Now, "hh:nn:ss") & "   Description: " & Err.Description
    MsgBox "A critical error occurred during SAP GUI script execution:" & vbCrLf & vbCrLf & "Error Number: " & Err.Number & vbCrLf & "Description: " & Err.Description, vbCritical, "SAP Scripting Runtime Error"
    On Error Resume Next
    If Not objSess Is Nothing Then
       Select Case objSess.ActiveWindow.Name: Case "wnd[0]", "wnd[1]", "wnd[2]": objSess.FindById("wnd[0]/tbar[0]/btn[15]").press: Case Else: objSess.FindById("wnd[0]/tbar[0]/btn[15]").press: End Select
    End If
    On Error GoTo 0
    Application.Calculation = xlCalculationAutomatic: Application.ScreenUpdating = True
    Debug.Print Format(Now, "hh:nn:ss") & " - Exiting via GuiScriptError handler."
    Debug.Print "--------------------------------------------------"
End Sub
