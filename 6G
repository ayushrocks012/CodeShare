Option Explicit

' --- Windows API Declaration for OLE Message Filter ---
Private Declare PtrSafe Function CoRegisterMessageFilter Lib "OLE32.DLL" _
    (ByVal lpMessageFilter As LongPtr, ByRef lplpMessageFilter As LongPtr) As Long ' HRESULT return

' --- Windows API Declaration for Sleep Function ---
#If VBA7 Then
    Public Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As LongPtr)
#Else
    Public Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
#End If

' --- Global Objects required across calls ---
' *** USING EARLY BINDING - REQUIRES REFERENCE TO "SAP GUI Scripting API" Library ***
Public objGui       As GuiApplication
Public objConn      As GuiConnection
Public objSess      As GuiSession
Public objSBar      As GuiStatusbar

' //========================================================================
' // Sub: StartExtract
' // Purpose: Main entry point. Handles all connection/session logic.
' //========================================================================
Public Sub StartExtract()

    ' --- CONFIGURATION CONSTANTS ---
    Const cTARGET_SYSTEM_ID_CLIENT As String = "PEA100" ' <<< ADJUST: SystemID+Client (for FINDING existing)
    Const cTARGET_SYSTEM_DESCRIPTION As String = "9A. Symphony ECC Production" ' <<< ADJUST: EXACT Description (for SSO LOGIN)
    Const cSAP_LOGON_PATH As String = "C:\Program Files (x86)\SAP\FrontEnd\SAPgui\saplogon.exe" ' <<< VERIFY/ADJUST Path
    Const cMAX_SESSIONS As Integer = 6
    Const cLOGON_TIMEOUT_SECONDS As Long = 60

    ' --- Local Variables ---
    Dim SapGuiAuto As Object
    Dim TargetConn As GuiConnection
    Dim W_conn As GuiConnection
    Dim W_Sess As GuiSession
    Dim FirstFoundSess As GuiSession
    Dim NewSess As GuiSession
    Dim TargetSessSSO As GuiSession
    Dim SessionObtained As Boolean
    Dim Session_Nr_All As Long
    Dim i As Long
    Dim j As Long
    Dim highestSessNum As Long
    Dim currentSessNum As Long
    Dim MsgResult As VbMsgBoxResult
    Dim currentTransaction As String
    Dim foundConnection As Boolean
    Dim attempts As Integer
    Dim startTime As Single

    ' --- Mark Start of Execution & Initialize ---
    Debug.Print vbCrLf & "====================================================="
    Debug.Print "   *** NEW RUN START: StartExtract *** (" & Format(Now, "yyyy-mm-dd hh:nn:ss") & ")"
    Debug.Print "====================================================="

    On Error GoTo ErrorHandler

    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual

    SessionObtained = False
    Session_Nr_All = 0
    foundConnection = False
    Set TargetConn = Nothing
    Set FirstFoundSess = Nothing

    Debug.Print "Target System (ID+Client for Find): '" & cTARGET_SYSTEM_ID_CLIENT & "'"
    Debug.Print "Target System (Description for SSO Login): '" & cTARGET_SYSTEM_DESCRIPTION & "'"
    Debug.Print "SAP Logon Path: '" & cSAP_LOGON_PATH & "'"
    Debug.Print "Max Sessions: " & cMAX_SESSIONS
    Debug.Print "SSO Logon Timeout: " & cLOGON_TIMEOUT_SECONDS & "s"
    Debug.Print "-----------------------------------------------------"

    ' Basic check: Constants
    If Trim$(cTARGET_SYSTEM_ID_CLIENT) = "" Or Trim$(cTARGET_SYSTEM_DESCRIPTION) = "" Then
        MsgBox "Config Error: Target system constants not defined.", vbCritical
        GoTo Cleanup
    End If

    ' --- STEP 1: Check Existing Global Session ---
    Debug.Print "STEP 1: Checking for existing global session object (objSess)..."
    If Not objSess Is Nothing Then
        Debug.Print "  - Global objSess exists. Checking validity for system '" & cTARGET_SYSTEM_ID_CLIENT & "'..."
        On Error Resume Next
        Dim tempSysName As String, tempClient As String, tempTCode As String
        tempSysName = objSess.Info.SystemName
        tempClient = objSess.Info.Client
        tempTCode = objSess.Info.TRANSACTION ' Check if session responds
        Dim sessInfoErr As Long: sessInfoErr = Err.Number
        Err.Clear
        On Error GoTo ErrorHandler

        If sessInfoErr = 0 Then
            If tempSysName & tempClient = cTARGET_SYSTEM_ID_CLIENT Then
                ' Session is valid and for the correct system
                Debug.Print "  - SUCCESS: Global objSess is valid and matches target system."
                If objConn Is Nothing Then Set objConn = objSess.Parent: Debug.Print "  - Set global objConn from objSess.Parent."
                If objSBar Is Nothing Then Set objSBar = objSess.FindById("wnd[0]/sbar"): Debug.Print "  - Set global objSBar from objSess."
                SessionObtained = True
                Debug.Print "  - Proceeding with existing global session #" & objSess.Info.SessionNumber
                GoTo RunReportScript
            Else
                 Debug.Print "  - Global objSess is for wrong system ('" & tempSysName & tempClient & "'). Clearing globals."
                 Set objSess = Nothing: Set objConn = Nothing: Set objSBar = Nothing: Set objGui = Nothing
            End If
        Else
            Debug.Print "  - Global objSess is invalid/closed (Error accessing Info: " & sessInfoErr & "). Clearing globals."
            Set objSess = Nothing: Set objConn = Nothing: Set objSBar = Nothing: Set objGui = Nothing
        End If
    Else
        Debug.Print "  - Global objSess is Nothing."
    End If

    ' --- STEP 2: Get SAP GUI Scripting Engine ---
    Debug.Print "-----------------------------------------------------"
    Debug.Print "STEP 2: Getting SAP GUI Scripting Engine..."
    If objGui Is Nothing Then
        Debug.Print "  - Global objGui is Nothing. Attempting GetObject(""SAPGUI"")..."
        On Error Resume Next
        Set SapGuiAuto = GetObject("SAPGUI")
        Dim getObjectErrNum As Long: getObjectErrNum = Err.Number
        Err.Clear
        On Error GoTo ErrorHandler

        If getObjectErrNum = 0 And Not SapGuiAuto Is Nothing Then
            Debug.Print "  - GetObject(""SAPGUI"") successful. Attempting GetScriptingEngine..."
            Set objGui = SapGuiAuto.GetScriptingEngine
            If objGui Is Nothing Then
                MsgBox "Error: Could not get Scripting Engine from SAPGUI object.", vbCritical
                GoTo Cleanup
            End If
            Debug.Print "  - SUCCESS: Obtained SAP GUI Scripting Engine via GetObject."
        Else
            Debug.Print "  - GetObject(""SAPGUI"") failed (Error: " & getObjectErrNum & "). SAP Logon may not be running."
            Set SapGuiAuto = Nothing ' Ensure it's clear
        End If
    Else
        Debug.Print "  - Using existing global objGui object."
    End If

    ' --- STEP 3: Find Existing Connection ---
    Debug.Print "-----------------------------------------------------"
    Debug.Print "STEP 3: Finding existing connection for System/Client '" & cTARGET_SYSTEM_ID_CLIENT & "'..."
    If Not objGui Is Nothing Then
        foundConnection = False
        Debug.Print "  - Looping through " & objGui.Children.Count & " GUI children (connections)..."
        For i = 0 To objGui.Children.Count - 1
            Set W_conn = Nothing ' Ensure clean slate for loop
            On Error Resume Next ' Handle potential errors accessing connection properties
            Set W_conn = objGui.Children(CLng(i))
            If Err.Number <> 0 Then
                Debug.Print "    - Error accessing connection at index " & i & ". Skipping."
                Err.Clear
                GoTo NextConnection ' Use GoTo for clarity in error handling within loop
            End If
            On Error GoTo ErrorHandler ' Restore main handler

            If Not W_conn Is Nothing Then
                 Debug.Print "    - Checking Connection Index " & i & " (Description: '" & W_conn.Description & "')..."
                 If W_conn.Children.Count > 0 Then
                     Set W_Sess = Nothing ' Ensure clean slate
                     On Error Resume Next ' Handle potential errors accessing session properties
                     Set W_Sess = W_conn.Children(0) ' Check first session
                     If Err.Number <> 0 Then
                         Debug.Print "      - Error accessing first session of connection " & i & ". Skipping connection."
                         Err.Clear
                         GoTo NextConnection
                     End If
                     On Error GoTo ErrorHandler ' Restore main handler

                     If Not W_Sess Is Nothing Then
                         On Error Resume Next ' Handle potential errors accessing Info properties
                         Dim sysInfoCheck As String: sysInfoCheck = W_Sess.Info.SystemName & W_Sess.Info.Client
                         Dim infoErr As Long: infoErr = Err.Number
                         Err.Clear
                         On Error GoTo ErrorHandler

                         If infoErr = 0 Then
                            Debug.Print "      - First session System/Client: '" & sysInfoCheck & "'"
                            If sysInfoCheck = cTARGET_SYSTEM_ID_CLIENT Then
                                 Set TargetConn = W_conn ' Found the connection
                                 foundConnection = True
                                 Debug.Print "      - MATCH FOUND! Storing this connection."
                                 Set W_Sess = Nothing ' Release temp session
                                 Exit For ' Exit the connection loop
                            End If
                         Else
                            Debug.Print "      - Error reading Info for first session (Error: " & infoErr & "). Cannot verify system."
                         End If
                         Set W_Sess = Nothing ' Release temp session
                     Else
                         Debug.Print "      - Could not get first session object for connection " & i & "."
                     End If
                 Else
                     Debug.Print "    - Connection Index " & i & " has no sessions. Skipping."
                 End If
            Else
                 Debug.Print "    - Could not get connection object at index " & i & "."
            End If
NextConnection:
             Set W_conn = Nothing ' Release loop connection object
        Next i
        If Not foundConnection Then Debug.Print "  - No existing connection found matching '" & cTARGET_SYSTEM_ID_CLIENT & "'."
    Else
        Debug.Print "  - Cannot search for connections because objGui is not valid."
    End If


    ' --- STEP 4: Handle Based on Connection Found Status ---
    Debug.Print "-----------------------------------------------------"
    Debug.Print "STEP 4: Determining session strategy..."

    If foundConnection And Not TargetConn Is Nothing Then
        ' --- PATH A: Connection Found ---
        Debug.Print "  - PATH A: Existing connection found. Checking for usable session..."
        Set objConn = TargetConn
        Session_Nr_All = objConn.Children.Count
        Debug.Print "    - Connection has " & Session_Nr_All & " session(s)."

        ' Check for an IDLE session
        Debug.Print "    - Checking for an IDLE session (SESSION_MANAGER, SMEN, S000)..."
        Set FirstFoundSess = Nothing
        SessionObtained = False
        For j = 0 To objConn.Children.Count - 1
            Set W_Sess = objConn.Children(CLng(j))
            If Not W_Sess Is Nothing Then
                Debug.Print "      - Checking Session Index " & j & " (ID: " & W_Sess.Info.SessionNumber & ")"
                If FirstFoundSess Is Nothing Then Set FirstFoundSess = W_Sess ' Store first valid one found
                On Error Resume Next
                Dim idleCheckTCode As String: idleCheckTCode = W_Sess.Info.TRANSACTION
                Dim idleErr As Long: idleErr = Err.Number
                Err.Clear
                On Error GoTo ErrorHandler
                If idleErr = 0 Then
                    Debug.Print "        - Transaction Code: '" & idleCheckTCode & "'"
                    Select Case UCase(idleCheckTCode)
                        Case "SESSION_MANAGER", "SMEN", "S000"
                            Set objSess = W_Sess
                            On Error Resume Next
                            Set objSBar = objSess.FindById("wnd[0]/sbar")
                            On Error GoTo ErrorHandler
                            If objSBar Is Nothing Then Debug.Print "        - Warning: Could not get status bar for idle session."
                            SessionObtained = True
                            Debug.Print "        - SUCCESS: Found suitable idle session #" & objSess.Info.SessionNumber
                            GoTo RunReportScript ' Found one, exit loop and proceed
                    End Select
                Else
                    Debug.Print "        - Error getting transaction code (Error: " & idleErr & "). Skipping idle check."
                End If
            Else
                 Debug.Print "      - Could not get session object at index " & j & "."
            End If
            Set W_Sess = Nothing ' Release loop variable
        Next j

        ' No idle session found, try to CREATE a new one using /o
        If Not SessionObtained Then
            Debug.Print "    - No idle session found."
            If FirstFoundSess Is Nothing Then
                MsgBox "Error: No sessions could be accessed on the found connection.", vbCritical
                GoTo Cleanup
            End If

            If Session_Nr_All < cMAX_SESSIONS Then
                 Debug.Print "    - Session limit not reached (" & Session_Nr_All & "/" & cMAX_SESSIONS & "). Attempting /o in session #" & FirstFoundSess.Info.SessionNumber & "..."
                 On Error GoTo ErrorHandler

                 Set objSess = FirstFoundSess ' Use first found session to execute /o
                 Debug.Print "      - Checking if wnd[0] of session #" & objSess.Info.SessionNumber & " is accessible..."
                 If objSess.ActiveWindow.Name <> "wnd[0]" Then
                     MsgBox "Error: Main window (wnd[0]) of session #" & objSess.Info.SessionNumber & " needed for /o is not active.", vbExclamation
                     Set objSess = Nothing
                     GoTo Cleanup
                 End If

                 Debug.Print "      - Executing /o command..."
                 objSess.FindById("wnd[0]/tbar[0]/okcd").Text = "/o"
                 objSess.FindById("wnd[0]").sendVKey 0
                 Set objSess = Nothing ' Release temporary session handle

                 Debug.Print "      - Waiting for potential popup (wnd[1])..."
                 Sleep 1000

                 Dim popupWnd As GuiModalWindow
                 On Error Resume Next
                 Set popupWnd = objGui.ActiveSession.FindById("wnd[1]", False) ' Check active session for popup
                 On Error GoTo ErrorHandler

                 If Not popupWnd Is Nothing Then
                    Debug.Print "      - Popup (wnd[1]) detected. Pressing Generate button..."
                    Const GENERATE_BUTTON_ID As String = "wnd[1]/tbar[0]/btn[5]"
                    On Error Resume Next
                    popupWnd.FindById(GENERATE_BUTTON_ID).press
                    If Err.Number <> 0 Then Debug.Print "        - Generate button press failed (Error: " & Err.Description & "). Trying Enter...": Err.Clear: popupWnd.sendVKey 0 Else Debug.Print "        - Generate button pressed."
                    On Error GoTo ErrorHandler
                    Sleep 2000 ' Wait longer after popup
                 Else
                    Debug.Print "      - Popup (wnd[1]) not detected. Assuming direct session creation."
                    Sleep 1000
                 End If
                 Set popupWnd = Nothing

                 Debug.Print "      - Finding newly created session (highest session number)..."
                 highestSessNum = 0
                 Set NewSess = Nothing
                 ' Need to re-evaluate connection children count as it might have changed
                 If objConn Is Nothing Then Err.Raise vbObjectError + 520, "StartExtract", "Connection object lost before finding new session."
                 For j = 0 To objConn.Children.Count - 1
                     Set W_Sess = objConn.Children(CLng(j))
                     If Not W_Sess Is Nothing Then
                         On Error Resume Next
                         currentSessNum = W_Sess.Info.SessionNumber
                         If Err.Number = 0 Then
                            If currentSessNum > highestSessNum Then highestSessNum = currentSessNum: Set NewSess = W_Sess
                         Else
                            Debug.Print "        - Warning: Error reading session number for index " & j & "." : Err.Clear
                         End If
                         On Error GoTo ErrorHandler
                     End If
                 Next j

                 If NewSess Is Nothing Then Err.Raise vbObjectError + 521, "StartExtract", "Could not identify new session after /o."

                 Set objSess = NewSess ' Set global session to the new one
                 Debug.Print "      - SUCCESS: Identified new session #" & objSess.Info.SessionNumber & " created via /o."
                 On Error Resume Next
                 Set objSBar = objSess.FindById("wnd[0]/sbar")
                 On Error GoTo ErrorHandler
                 If objSBar Is Nothing Then Debug.Print "      - Warning: Could not get status bar for new session."
                 SessionObtained = True
                 Debug.Print "    - Proceeding with newly created session."
                 GoTo RunReportScript

            Else
                 Debug.Print "    - Session limit reached (" & Session_Nr_All & "/" & cMAX_SESSIONS & "). Cannot create new session via /o."
                 MsgResult = MsgBox("Max sessions reached. No idle session found.", vbCritical + vbOKOnly)
                 GoTo Cleanup
            End If
        End If ' End /o logic

    Else
        ' --- PATH B: No Connection Found (or objGui was Nothing) - Attempt SSO Logon ---
        Debug.Print "  - PATH B: No existing connection found for target or objGui invalid. Attempting SSO login..."
        Debug.Print "    - Using Description: '" & cTARGET_SYSTEM_DESCRIPTION & "'"

        ' --- Start of Integrated EstablishSsoConnection Logic ---
        On Error GoTo SsoLoginErrorHandler ' Use specific handler

        Set objConn = Nothing: Set objSess = Nothing: Set objSBar = Nothing ' Reset globals for new login

        ' Step 1: Get/Ensure SAP GUI Scripting Engine
        If objGui Is Nothing Then
            Debug.Print "    - SSO Step 1: objGui is Nothing. Attempting GetObject/Start Logon..."
            On Error Resume Next
            Set SapGuiAuto = GetObject("SAPGUI")
            Dim getObjErrSso As Long: getObjErrSso = Err.Number: Err.Clear
            On Error GoTo SsoLoginErrorHandler
            If getObjErrSso <> 0 Or SapGuiAuto Is Nothing Then
                 Debug.Print "      - GetObject failed. Starting SAP Logon: '" & cSAP_LOGON_PATH & "'"
                 Dim shellResult As Variant: On Error Resume Next
                 shellResult = Shell(cSAP_LOGON_PATH, vbNormalFocus)
                 Dim shellErr As Long: shellErr = Err.Number: Dim shellDesc As String: shellDesc = Err.Description: Err.Clear
                 On Error GoTo SsoLoginErrorHandler
                 If shellErr <> 0 Then MsgBox "Shell Error (" & shellErr & "): " & shellDesc, vbCritical: GoTo Cleanup
                 Debug.Print "      - Shell executed. Waiting 5s..." : Sleep 5000
                 attempts = 0
                 Do
                     attempts = attempts + 1: Debug.Print "      - GetObject attempt " & attempts & "..."
                     On Error Resume Next: Set SapGuiAuto = GetObject("SAPGUI"): If Err.Number = 0 And Not SapGuiAuto Is Nothing Then Exit Do: Err.Clear: Sleep 2000
                 Loop While attempts < 5
                 If SapGuiAuto Is Nothing Then MsgBox "GetObject still failed after starting Logon.", vbCritical: GoTo Cleanup
                 Debug.Print "      - GetObject successful after starting Logon."
            Else
                 Debug.Print "      - GetObject successful."
            End If
            Set objGui = SapGuiAuto.GetScriptingEngine
            If objGui Is Nothing Then MsgBox "Could not get Scripting Engine.", vbCritical: GoTo Cleanup
            Debug.Print "      - Scripting Engine obtained."
        Else
             Debug.Print "    - SSO Step 1: Using existing objGui."
        End If

        ' Step 2: Open Connection
        Debug.Print "    - SSO Step 2: Opening Connection '" & cTARGET_SYSTEM_DESCRIPTION & "'..."
        On Error Resume Next
        Set TargetConn = objGui.OpenConnection(cTARGET_SYSTEM_DESCRIPTION, True)
        Dim openConnErr As Long: openConnErr = Err.Number: Dim openConnDesc As String: openConnDesc = Err.Description: Err.Clear
        On Error GoTo SsoLoginErrorHandler
        If openConnErr <> 0 Or TargetConn Is Nothing Then MsgBox "OpenConnection Error (" & openConnErr & "): " & openConnDesc, vbCritical: GoTo Cleanup
        Set objConn = TargetConn ' Set global
        Debug.Print "      - OpenConnection successful. Connection: '" & objConn.Description & "'"

        ' Step 3: Get Session
        Debug.Print "    - SSO Step 3: Waiting for session object..."
        startTime = Timer
        Do
            If objConn.Children.Count > 0 Then Exit Do
            Sleep 500: DoEvents
            If Timer - startTime > 15 Then MsgBox "Timeout waiting for session object.", vbCritical: GoTo Cleanup
        Loop
        Set TargetSessSSO = objConn.Children(0)
        If TargetSessSSO Is Nothing Then MsgBox "Could not get session object.", vbCritical: GoTo Cleanup
        Set objSess = TargetSessSSO ' Set global
        Debug.Print "      - Session object obtained (ID: " & objSess.Info.SessionNumber & ")."

        ' Step 4: Wait for Session Ready
        Debug.Print "    - SSO Step 4: Waiting for session ready (Timeout: " & cLOGON_TIMEOUT_SECONDS & "s)..."
        startTime = Timer
        Do
            On Error Resume Next
            currentTransaction = objSess.Info.TRANSACTION
            Dim sessReadyErr As Long: sessReadyErr = Err.Number: Err.Clear
            On Error GoTo SsoLoginErrorHandler
            If sessReadyErr = 0 Then
                If currentTransaction <> "" And UCase(currentTransaction) <> "SAPMSYST" Then Debug.Print "      - Session active. TCode: '" & currentTransaction & "'": Exit Do
            Else
                Debug.Print "      - Waiting session ready (Info error: " & sessReadyErr & ")"
            End If
            Sleep 500: DoEvents
            If Timer - startTime > cLOGON_TIMEOUT_SECONDS Then MsgBox "Timeout waiting for main menu.", vbCritical: GoTo Cleanup
        Loop

        ' Step 5: Get Status Bar
        Debug.Print "    - SSO Step 5: Getting status bar..."
        On Error Resume Next
        Set objSBar = objSess.FindById("wnd[0]/sbar")
        On Error GoTo ErrorHandler ' Restore MAIN handler
        If objSBar Is Nothing Then Debug.Print "      - Warning: Could not get status bar." Else Debug.Print "      - Status bar obtained."

        ' Step 6: SSO Success
        SessionObtained = True
        Debug.Print "    - SSO Step 6: SSO login process successful."

        ' Optional: Verify system match
        If Not objSess Is Nothing Then
           On Error Resume Next
           Dim loggedInSys As String: loggedInSys = objSess.Info.SystemName & objSess.Info.Client
           Dim sysCheckErr As Long: sysCheckErr = Err.Number: Err.Clear
           On Error GoTo ErrorHandler
           If sysCheckErr = 0 Then
               If loggedInSys <> cTARGET_SYSTEM_ID_CLIENT Then
                    MsgBox "Warning: SSO login successful but system mismatch ('" & loggedInSys & "' vs '" & cTARGET_SYSTEM_ID_CLIENT & "').", vbExclamation
               Else
                   Debug.Print "      - System match verified ('" & loggedInSys & "')."
               End If
           Else
               Debug.Print "      - Warning: Could not verify system match after SSO login (Error: " & sysCheckErr & ")."
           End If
        End If

        ' --- End of Integrated SSO Logic ---
        If SessionObtained Then GoTo RunReportScript Else GoTo Cleanup ' Should always be true here unless error occurred

    End If ' End Path A vs Path B


    ' --- Fallback Check ---
    If Not SessionObtained Then
        Debug.Print "ERROR: Fallback reached - session not obtained."
        MsgBox "Could not get a usable SAP session after all attempts.", vbCritical
        GoTo Cleanup
    End If


RunReportScript:
    ' Proceed only if a session was successfully obtained
    If SessionObtained And Not objSess Is Nothing Then
        Debug.Print "-----------------------------------------------------"
        Debug.Print "STEP 5: Session ready. Calling RunGUIScript..."
        Debug.Print "  - Session ID: " & objSess.Info.SessionNumber
        Debug.Print "  - System/Client: " & objSess.Info.SystemName & "/" & objSess.Info.Client
        Debug.Print "  - User: " & objSess.Info.User
        Debug.Print "-----------------------------------------------------"
        RunGUIScript ' Call the Private sub for report steps
    Else
        Debug.Print "INTERNAL ERROR: Reached RunReportScript label but SessionObtained=" & SessionObtained & " or objSess is Nothing."
        MsgBox "Internal Error: Could not proceed to run GUI script.", vbCritical
    End If

Cleanup:
    Debug.Print "-----------------------------------------------------"
    Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Running Cleanup for StartExtract..."

    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True

    Set TargetConn = Nothing: Debug.Print "  - Released TargetConn"
    Set W_conn = Nothing: Debug.Print "  - Released W_conn"
    Set W_Sess = Nothing: Debug.Print "  - Released W_Sess"
    Set FirstFoundSess = Nothing: Debug.Print "  - Released FirstFoundSess"
    Set NewSess = Nothing: Debug.Print "  - Released NewSess"
    Set SapGuiAuto = Nothing: Debug.Print "  - Released SapGuiAuto"
    Set TargetSessSSO = Nothing: Debug.Print "  - Released TargetSessSSO"

    ' Explicitly release GLOBAL SAP objects
     Debug.Print "  - Releasing global SAP objects..."
     On Error Resume Next
     Set objSBar = Nothing: Debug.Print "    - Released objSBar"
     Set objSess = Nothing: Debug.Print "    - Released objSess"
     Set objConn = Nothing: Debug.Print "    - Released objConn"
     Set objGui = Nothing: Debug.Print "    - Released objGui"
     On Error GoTo 0
     Debug.Print "  - Global SAP objects released."

    Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - StartExtract finished."
    Debug.Print "=====================================================" & vbCrLf
    Exit Sub

' --- Error Handlers ---
ErrorHandler:
    Dim errNum As Long: errNum = Err.Number
    Dim errDesc As String: errDesc = Err.Description
    Dim errSource As String: errSource = Err.Source
    Debug.Print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - ERROR ENCOUNTERED in StartExtract (General Handler)!"
    Debug.Print "    Error #: " & errNum: Debug.Print "    Source:  " & errSource: Debug.Print "    Desc:    " & errDesc
    Debug.Print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    MsgBox "Error during SAP session setup/creation:" & vbCrLf & vbCrLf & _
           "Err #: " & errNum & vbCrLf & "Desc: " & errDesc, vbCritical
    Resume Cleanup

SsoLoginErrorHandler:
    Dim ssoErrNum As Long: ssoErrNum = Err.Number
    Dim ssoErrDesc As String: ssoErrDesc = Err.Description
    Dim ssoErrSource As String: ssoErrSource = Err.Source
    Debug.Print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - ERROR ENCOUNTERED during SSO Login Attempt!"
    Debug.Print "    Error #: " & ssoErrNum: Debug.Print "    Source:  " & ssoErrSource: Debug.Print "    Desc:    " & ssoErrDesc
    Debug.Print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
     MsgBox "Error during SAP SSO Logon attempt:" & vbCrLf & vbCrLf & _
           "Err #: " & ssoErrNum & vbCrLf & "Desc: " & ssoErrDesc, vbCritical
     SessionObtained = False ' Ensure flag is false
     Resume Cleanup ' Go to main cleanup

End Sub


' //========================================================================
' // Sub: RunGUIScript (MB51 Extraction Logic)
' // Purpose: Executes MB51 steps. Called only by StartExtract. Declared Private.
' //========================================================================
Private Sub RunGUIScript()

    ' --- Constants specific to MB51 Execution ---
     Const cTRANSACTION As String = "mb51"
     Const cPLANT As String = "1534"
     Const cDATE_LOW As String = "01.03.2025"
     Const cDATE_HIGH As String = "31.03.2025"
     Const cLAYOUT As String = "AYUSH_TRY"
     Const cDOWNLOAD_PATH As String = "Z:\Demand\Demand Review\SAP H2H Report"
     Const cFILENAME_PREFIX As String = "MB51 Report"
     Const cFILENAME_EXTENSION As String = ".XLSX"
     Const cREPORT_EXEC_TIMEOUT_SECONDS As Long = 900
     Const cGRID_WAIT_TIMEOUT_SECONDS As Long = 180
     Const cGRID_ID As String = "wnd[0]/usr/cntlGRID1/shellcont/shell"
     Const cSTATUS_MSG_COMPLETE_1 As String = "Prepare List Output"
     Const cSTATUS_MSG_COMPLETE_2 As String = ""
     Const cSTATUS_MSG_COMPLETE_3 As String = ""

    ' --- Local Variables ---
    Dim formattedDateLow As String, formattedDateHigh As String, formattedTimestamp As String
    Dim dynamicFilename As String
    Dim startTime As Single
    Dim success As Boolean
    Dim gridObject As GuiShell
    Dim currentStatus As String
    Dim lMsgFilter As LongPtr, lPreviousFilter As LongPtr, hResult As Long
    Dim popupWindow As GuiModalWindow, popupID As Variant, handledPopup As Boolean

    On Error GoTo RestoreFilterAndErrorHandler

    ' --- Pre-checks ---
    Debug.Print "Entering RunGUIScript..."
    If objSess Is Nothing Then Err.Raise vbObjectError + 510, "RunGUIScript", "objSess is not valid."
    If objSBar Is Nothing Then
        On Error Resume Next: Set objSBar = objSess.FindById("wnd[0]/sbar"): On Error GoTo RestoreFilterAndErrorHandler
        If objSBar Is Nothing Then Debug.Print "  - Warning: objSBar could not be obtained."
    End If
    Debug.Print "  - Session and Status Bar objects checked (Status Bar " & IIf(objSBar Is Nothing, "Not ", "") & "obtained)."

    ' --- Step 1: Prepare Filename ---
    Debug.Print "STEP 1: Preparing dynamic filename..."
     On Error Resume Next
     formattedDateLow = Right$(cDATE_LOW, 4) & Mid$(cDATE_LOW, 4, 2) & Left$(cDATE_LOW, 2)
     formattedDateHigh = Right$(cDATE_HIGH, 4) & Mid$(cDATE_HIGH, 4, 2) & Left$(cDATE_HIGH, 2)
     If Err.Number <> 0 Then MsgBox "Date parse warning.", vbExclamation: Err.Clear: formattedDateLow = "DateFrom": formattedDateHigh = "DateTo"
     On Error GoTo RestoreFilterAndErrorHandler
     formattedTimestamp = Format$(Now, "yyyymmdd_hhmmss")
     dynamicFilename = cFILENAME_PREFIX & "_" & formattedDateLow & "-" & formattedDateHigh & "_" & formattedTimestamp & cFILENAME_EXTENSION
     Debug.Print "  - Filename: '" & dynamicFilename & "'"

    ' --- Step 2: Navigate to Transaction ---
    Debug.Print "STEP 2: Navigating to transaction '" & cTRANSACTION & "'..."
     If objSess.ActiveWindow.Name <> "wnd[0]" Then Debug.Print "  - Closing window: " & objSess.ActiveWindow.Name: objSess.ActiveWindow.Close: Sleep 250
     If objSess.Info.TRANSACTION <> UCase(cTRANSACTION) Then
         Debug.Print "  - Executing /n" & cTRANSACTION & "..."
         objSess.FindById("wnd[0]/tbar[0]/okcd").Text = "/n" & cTRANSACTION
         objSess.FindById("wnd[0]").sendVKey 0: Sleep 500
     Else
         Debug.Print "  - Already in transaction " & cTRANSACTION & "."
     End If
     Debug.Print "  - Navigation complete (Current TCode: " & objSess.Info.TRANSACTION & ")."

    ' --- Step 3 & 4: Set Criteria ---
    Debug.Print "STEP 3/4: Setting report criteria..."
     On Error Resume Next ' Clear potentially existing fields
     objSess.FindById("wnd[0]/usr/ctxtMATNR-LOW").Text = "": Debug.Print "  - Cleared MATNR-LOW"
     objSess.FindById("wnd[0]/usr/ctxtMATNR-HIGH").Text = "": Debug.Print "  - Cleared MATNR-HIGH"
     On Error GoTo RestoreFilterAndErrorHandler
     objSess.FindById("wnd[0]/usr/ctxtWERKS-LOW").Text = cPLANT: Debug.Print "  - Set Plant: '" & cPLANT & "'"
     objSess.FindById("wnd[0]/usr/ctxtBUDAT-LOW").Text = cDATE_LOW: Debug.Print "  - Set Date Low: '" & cDATE_LOW & "'"
     objSess.FindById("wnd[0]/usr/ctxtBUDAT-HIGH").Text = cDATE_HIGH: Debug.Print "  - Set Date High: '" & cDATE_HIGH & "'"
     objSess.FindById("wnd[0]/usr/radRFLAT_L").Select: Debug.Print "  - Selected 'Flat List' radio button."
     If Trim$(cLAYOUT) <> "" Then objSess.FindById("wnd[0]/usr/ctxtALV_DEF").Text = cLAYOUT: Debug.Print "  - Set Layout: '" & cLAYOUT & "'" Else objSess.FindById("wnd[0]/usr/ctxtALV_DEF").Text = "": Debug.Print "  - Cleared Layout field."
     Debug.Print "  - Criteria setting complete."

    ' --- Start OLE Message Filter ---
    Debug.Print "STEP 5a: Registering OLE Message Filter..."
     lMsgFilter = 0&
     hResult = CoRegisterMessageFilter(lMsgFilter, lPreviousFilter)
     If hResult <> 0 Then Debug.Print "  - Warning: CoRegisterMessageFilter failed (HRESULT: " & Hex$(hResult) & ").": lPreviousFilter = 0 Else Debug.Print "  - OLE Filter registered."

    ' --- Step 5: Execute Report ---
    Debug.Print "STEP 5b: Executing report (Pressing F8)..."
     objSess.FindById("wnd[0]/tbar[1]/btn[8]").press ' Execute (F8)
     Debug.Print "  - Execute button pressed."

    ' --- Step 6: Wait for Report Execution ---
    Debug.Print "STEP 6: Waiting for report execution (Primary Wait - Timeout: " & cREPORT_EXEC_TIMEOUT_SECONDS & "s)..."
     startTime = Timer
     Do
         ' Check Status Bar
         If Not objSBar Is Nothing Then
             currentStatus = Trim$(objSBar.Text)
             If Len(currentStatus) > 0 Then Debug.Print "  - Wait Loop 1: Status='" & currentStatus & "', Busy=" & objSess.Busy ' Print status if not empty
             If (Len(cSTATUS_MSG_COMPLETE_1) > 0 And InStr(1, currentStatus, cSTATUS_MSG_COMPLETE_1, vbTextCompare) > 0) Or _
                (Len(cSTATUS_MSG_COMPLETE_2) > 0 And InStr(1, currentStatus, cSTATUS_MSG_COMPLETE_2, vbTextCompare) > 0) Or _
                (Len(cSTATUS_MSG_COMPLETE_3) > 0 And InStr(1, currentStatus, cSTATUS_MSG_COMPLETE_3, vbTextCompare) > 0) Then
                 Debug.Print "  - Wait Loop 1: Completion status detected: '" & currentStatus & "'"
                 Exit Do
             End If
         End If
         ' Check Busy Status
         If Not objSess.Busy Then
              Debug.Print "  - Wait Loop 1: Busy flag is now False."
              If Not objSBar Is Nothing Then currentStatus = Trim$(objSBar.Text) Else currentStatus = "[Status Bar N/A]"
              If (Len(cSTATUS_MSG_COMPLETE_1) > 0 And InStr(1, currentStatus, cSTATUS_MSG_COMPLETE_1, vbTextCompare) > 0) Or _
                 (Len(cSTATUS_MSG_COMPLETE_2) > 0 And InStr(1, currentStatus, cSTATUS_MSG_COMPLETE_2, vbTextCompare) > 0) Or _
                 (Len(cSTATUS_MSG_COMPLETE_3) > 0 And InStr(1, currentStatus, cSTATUS_MSG_COMPLETE_3, vbTextCompare) > 0) Then
                   Debug.Print "  - Wait Loop 1: Completion status detected after Busy=False: '" & currentStatus & "'"
              Else
                   Debug.Print "  - Wait Loop 1: Busy=False, completion status not seen. Status='" & currentStatus & "'. Checking grid next."
              End If
              Exit Do
         End If
         ' Integrated Popup Handling
         handledPopup = False: On Error Resume Next
         For Each popupID In Array("wnd[1]", "wnd[2]")
             Set popupWindow = objSess.FindById(popupID, False)
             If Err.Number = 0 And Not popupWindow Is Nothing Then
                 handledPopup = True: Debug.Print "  - Wait Loop 1: Popup detected: " & popupID & " ('" & popupWindow.Text & "'). Handling..."
                 popupWindow.sendVKey 0 ' Try Enter
                 If Err.Number <> 0 Then Debug.Print "    - VKey 0 failed. Error: " & Err.Description: Err.Clear: popupWindow.FindById("tbar[0]/btn[0]").press ' Try Btn0
                 Sleep 500: Exit For
             End If: If Err.Number <> 0 Then Err.Clear
         Next popupID: On Error GoTo RestoreFilterAndErrorHandler
         ' End Popup Handling
         DoEvents: Sleep 250
         If Timer - startTime > cREPORT_EXEC_TIMEOUT_SECONDS Then Err.Raise vbObjectError + 513, "RunGUIScript", "Timeout waiting primary execution."
     Loop
     Debug.Print "  - Primary wait loop exited."

    ' --- Step 7: Wait for Grid Control ---
    Debug.Print "STEP 7: Waiting for Results Grid (" & cGRID_ID & ", Timeout: " & cGRID_WAIT_TIMEOUT_SECONDS & "s)..."
     startTime = Timer
     Set gridObject = Nothing
     Do
         On Error Resume Next: Set gridObject = objSess.FindById(cGRID_ID): Dim gridFindErr As Long: gridFindErr = Err.Number: Err.Clear: On Error GoTo RestoreFilterAndErrorHandler
         If gridFindErr = 0 And Not gridObject Is Nothing Then Debug.Print "  - Wait Loop 2: Grid object found.": Exit Do
         ' Integrated Popup Handling
         handledPopup = False: On Error Resume Next
         For Each popupID In Array("wnd[1]", "wnd[2]")
             Set popupWindow = objSess.FindById(popupID, False)
             If Err.Number = 0 And Not popupWindow Is Nothing Then
                 handledPopup = True: Debug.Print "  - Wait Loop 2: Popup detected: " & popupID & " ('" & popupWindow.Text & "'). Handling..."
                 popupWindow.sendVKey 0 ' Try Enter
                 If Err.Number <> 0 Then Debug.Print "    - VKey 0 failed. Error: " & Err.Description: Err.Clear: popupWindow.FindById("tbar[0]/btn[0]").press ' Try Btn0
                 Sleep 500: Exit For
             End If: If Err.Number <> 0 Then Err.Clear
         Next popupID: On Error GoTo RestoreFilterAndErrorHandler
         ' End Popup Handling
         If objSess.ActiveWindow.Name <> "wnd[0]" Then Err.Raise vbObjectError + 514, "RunGUIScript", "Active Window changed during grid wait: " & objSess.ActiveWindow.Name
         DoEvents: Sleep 250
         If Timer - startTime > cGRID_WAIT_TIMEOUT_SECONDS Then Err.Raise vbObjectError + 515, "RunGUIScript", "Timeout waiting for grid control."
     Loop
     Debug.Print "  - Grid wait loop exited."

    ' --- Step 8: Export Results ---
    Debug.Print "STEP 8: Exporting results..."
     success = False
     If gridObject Is Nothing Then On Error Resume Next: Set gridObject = objSess.FindById(cGRID_ID): On Error GoTo RestoreFilterAndErrorHandler: If gridObject Is Nothing Then Err.Raise vbObjectError + 516, "RunGUIScript", "Grid invalid before export."
     On Error Resume Next ' Use Resume Next for export sequence
     Debug.Print "  - Export Step 1: ContextMenu" : gridObject.ContextMenu: If Err.Number <> 0 Then Debug.Print "    - Error: " & Err.Description: Err.Clear: GoTo ExportSequenceErrorCheck
     Debug.Print "  - Export Step 2: SelectContextMenuItem '&XXL'" : gridObject.SelectContextMenuItem "&XXL": If Err.Number <> 0 Then Debug.Print "    - Error: " & Err.Description: Err.Clear: GoTo ExportSequenceErrorCheck
     Debug.Print "  - Export Step 3: Press Continue (wnd[1]/btn[0])": Sleep 250: objSess.FindById("wnd[1]/tbar[0]/btn[0]").press: If Err.Number <> 0 Then Debug.Print "    - Error: " & Err.Description: Err.Clear: GoTo ExportSequenceErrorCheck
     Debug.Print "  - Export Step 4: Set Path '" & cDOWNLOAD_PATH & "'": Sleep 250: objSess.FindById("wnd[1]/usr/ctxtDY_PATH").Text = cDOWNLOAD_PATH: If Err.Number <> 0 Then Debug.Print "    - Error: " & Err.Description: Err.Clear: GoTo ExportSequenceErrorCheck
     Debug.Print "  - Export Step 5: Set Filename '" & dynamicFilename & "'": objSess.FindById("wnd[1]/usr/ctxtDY_FILENAME").Text = dynamicFilename: If Err.Number <> 0 Then Debug.Print "    - Error: " & Err.Description: Err.Clear: GoTo ExportSequenceErrorCheck
     Debug.Print "  - Export Step 6: Press Save/Generate (wnd[1]/btn[11])": objSess.FindById("wnd[1]/tbar[0]/btn[11]").press: If Err.Number <> 0 Then Debug.Print "    - Error: " & Err.Description: Err.Clear: GoTo ExportSequenceErrorCheck
     success = (Err.Number = 0) ' Check success only after last step attempt
     If success Then Debug.Print "  - SUCCESS: Export commands sent." Else Debug.Print "  - FAILURE: Export sequence interrupted by error."
     Sleep 1000

ExportSequenceErrorCheck:
     On Error GoTo RestoreFilterAndErrorHandler ' Restore main handler
     If Not success Then Err.Raise vbObjectError + 517, "RunGUIScript", "Export sequence failed. Check Debug Window."

    Debug.Print "STEP 9: Export successful. Proceeding to cleanup."
    GoTo RestoreFilterAndExit

' --- Error Handler and Cleanup ---
RestoreFilterAndErrorHandler:
     Dim errNum As Long: errNum = Err.Number: Dim errDesc As String: errDesc = Err.Description: Dim errSource As String: errSource = Err.Source
     Debug.Print "!!!!!!!!!!!!!!!!!!! ERROR in RunGUIScript !!!!!!!!!!!!!!!!!!!"
     Debug.Print "  Err #: " & errNum: Debug.Print "  Source: " & errSource: Debug.Print "  Desc: " & errDesc
     Debug.Print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
     If lPreviousFilter <> 0 Then On Error Resume Next: hResult = CoRegisterMessageFilter(lPreviousFilter, lMsgFilter): If hResult <> 0 Then Debug.Print "Warning: Failed RESTORE OLE Filter (Error)." Else Debug.Print "OLE Filter restored (Error).": lPreviousFilter = 0: On Error GoTo 0
     MsgBox "Error during MB51 script:" & vbCrLf & "Err #: " & errNum & vbCrLf & "Desc: " & errDesc, vbCritical
     On Error Resume Next: If Not objSess Is Nothing Then Debug.Print "Attempting SAP cleanup after error...": If objSess.Busy Then Sleep 500: If objSess.ActiveWindow.Name <> "wnd[0]" Then objSess.ActiveWindow.Close: Sleep 250: If objSess.ActiveWindow.Name = "wnd[0]" Then objSess.FindById("wnd[0]/tbar[0]/btn[15]").press: Sleep 250: Debug.Print "SAP cleanup attempt finished."
     GoTo FinalCleanup

RestoreFilterAndExit:
     Debug.Print "STEP 10: Normal Exit Cleanup..."
     If lPreviousFilter <> 0 Then On Error Resume Next: hResult = CoRegisterMessageFilter(lPreviousFilter, lMsgFilter): If hResult <> 0 Then Debug.Print "Warning: Failed RESTORE OLE Filter (Normal)." Else Debug.Print "OLE Filter restored (Normal).": lPreviousFilter = 0: On Error GoTo 0
     On Error Resume Next: Debug.Print "  - Navigating back in SAP..."
     If Not objSess Is Nothing Then If objSess.ActiveWindow.Name = "wnd[0]" Then objSess.FindById("wnd[0]/tbar[0]/btn[15]").press: Sleep 100: If objSess.Info.TRANSACTION = UCase(cTRANSACTION) Then objSess.FindById("wnd[0]/tbar[0]/btn[3]").press ElseIf objSess.ActiveWindow.Name <> "wnd[0]" Then objSess.ActiveWindow.Close
     Debug.Print "  - SAP navigation cleanup finished."
     On Error GoTo 0
     Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - RunGUIScript finished normally."

FinalCleanup:
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    On Error GoTo 0
    Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Exiting RunGUIScript."
End Sub
