Option Explicit

' --- Windows API Declaration for Sleep Function ---
#If VBA7 Then
    Public Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As LongPtr)
#Else
    Public Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
#End If

' --- Global Objects (Optional for this test, but useful for eventual merge) ---
' *** USING EARLY BINDING - REQUIRES REFERENCE TO "SAP GUI Scripting API" Library ***
Public objGui As GuiApplication ' SAP GUI Application object
Public objConn As GuiConnection  ' SAP GUI Connection object
Public objSess As GuiSession     ' SAP GUI Session object
' Public objSBar As GuiStatusbar   ' Not needed for this simple test

' //========================================================================
' // Sub: TestSapSsoLogon
' // Purpose: Attempts to connect to a specified SAP system using OpenConnection by Description,
' //          assuming SSO/SNC handles the authentication based on SAP Logon Pad settings.
' //          Attempts to start SAP Logon Pad if not running. Includes debugging to list
' //          available connection descriptions. Sets global objects objGui, objConn, objSess upon success.
' //========================================================================
Public Sub TestSapSsoLogon()

    ' --- CONFIGURATION ---
    ' *** VITAL: This description MUST EXACTLY match the entry in your SAP Logon Pad ***
    ' *** Updated based on user screenshot ***
    Const SAP_SYSTEM_DESCRIPTION As String = "9A. Symphony ECC Production" ' <<< From Screenshot
    Const LOGON_TIMEOUT_SECONDS As Long = 45 ' Timeout for waiting for session after OpenConnection
    ' *** Path to your SAP Logon executable - VERIFY AND ADJUST IF NECESSARY ***
    Const SAP_LOGON_PATH As String = "C:\Program Files (x86)\SAP\FrontEnd\SAPgui\saplogon.exe" ' Common 32-bit path on 64-bit Win
    ' Other possible paths:
    ' Const SAP_LOGON_PATH As String = "C:\Program Files\SAP\FrontEnd\SAPgui\saplogon.exe" ' Common 64-bit path or 32-bit on 32-bit Win

    ' --- Local Variables ---
    Dim SapGuiAuto As Object
    Dim TargetConn As GuiConnection
    Dim TargetSess As GuiSession
    Dim W_conn As GuiConnection ' For listing connections
    Dim i As Long               ' Loop counter
    Dim startTime As Single
    Dim attempts As Integer

    On Error GoTo ErrorHandler

    ' --- Initialize ---
    Set objGui = Nothing
    Set objConn = Nothing
    Set objSess = Nothing
    Set TargetConn = Nothing
    Set TargetSess = Nothing

    Debug.Print "Attempting to connect to SAP via SSO using OpenConnection by Description..."

    ' --- Step 1: Get SAP GUI Scripting Engine (Attempt to start SAP Logon if needed) ---
    On Error Resume Next ' Temporarily disable error handling for GetObject
    Set SapGuiAuto = GetObject("SAPGUI")
    If Err.Number <> 0 Then
        Err.Clear ' Clear the error from GetObject failing
        Debug.Print "GetObject(""SAPGUI"") failed. Attempting to start SAP Logon Pad..."
        On Error GoTo ErrorHandler ' Re-enable standard error handling for Shell etc.

        ' --- Attempt to start SAP Logon Pad ---
        Dim shellResult As Variant
        On Error Resume Next ' Handle error if Shell command fails (e.g., path incorrect)
        shellResult = Shell(SAP_LOGON_PATH, vbNormalFocus)
        If Err.Number <> 0 Then
             MsgBox "Failed to start SAP Logon Pad using Shell command." & vbCrLf & vbCrLf & _
                    "Error: " & Err.Description & vbCrLf & _
                    "Please verify the SAP_LOGON_PATH constant in the VBA code: " & vbCrLf & SAP_LOGON_PATH, vbCritical, "Shell Command Error"
             Err.Clear
             On Error GoTo ErrorHandler
             GoTo Cleanup ' Exit if shell fails
        End If
        On Error GoTo ErrorHandler ' Restore main handler

        Debug.Print "Shell command executed. Waiting for SAP Logon Pad to initialize..."
        Sleep 5000 ' Wait 5 seconds for SAP Logon to start

        ' --- Try GetObject again after starting ---
        attempts = 0
        Do
            attempts = attempts + 1
            Debug.Print "Attempting GetObject(""SAPGUI"") again (Attempt " & attempts & ")..."
            On Error Resume Next ' Check GetObject again
            Set SapGuiAuto = GetObject("SAPGUI")
            If Err.Number = 0 And Not SapGuiAuto Is Nothing Then
                Debug.Print "GetObject(""SAPGUI"") successful after starting SAP Logon."
                Exit Do ' Success!
            End If
            Err.Clear
            Sleep 2000 ' Wait 2 more seconds before retrying
        Loop While attempts < 3 ' Try a few times

        If SapGuiAuto Is Nothing Then
             MsgBox "SAP Logon Pad was started, but GetObject(""SAPGUI"") still failed. Scripting might be disabled or SAP GUI has issues.", vbCritical, "Prerequisite Error"
             GoTo Cleanup
        End If
    End If
    On Error GoTo ErrorHandler ' Restore main error handling

    ' --- Now we should have SapGuiAuto, get the Scripting Engine ---
    Set objGui = SapGuiAuto.GetScriptingEngine
    If objGui Is Nothing Then
        MsgBox "Could not get SAP GUI Scripting Engine. Ensure scripting is enabled in SAP GUI options.", vbCritical, "Scripting Error"
        GoTo Cleanup
    End If
    Debug.Print "Successfully obtained SAP GUI Scripting Engine."

    ' --- *** ADDED DEBUG: List available connection descriptions *** ---
    Debug.Print "-----------------------------------------------------"
    Debug.Print "Listing connections visible to scripting engine:"
    If objGui.Connections.Count > 0 Then
        For i = 0 To objGui.Connections.Count - 1
            Set W_conn = objGui.Connections(CLng(i))
            If Not W_conn Is Nothing Then
                Debug.Print " - Connection " & i & ": Description = '" & W_conn.Description & "'"
            End If
            Set W_conn = Nothing
        Next i
    Else
        Debug.Print " (No existing connections found by script)"
    End If
     Debug.Print "-----------------------------------------------------"
     Debug.Print "Attempting to open connection using description: '" & SAP_SYSTEM_DESCRIPTION & "'"
    ' --- *** END OF ADDED DEBUG *** ---


    ' --- Step 2: Open Connection using Description (Triggers SSO/SNC via SAP Logon config) ---
    On Error Resume Next ' Handle errors during connection opening
    Set TargetConn = objGui.OpenConnection(SAP_SYSTEM_DESCRIPTION, True) ' True = Open synchronously
    If Err.Number <> 0 Or TargetConn Is Nothing Then
        MsgBox "Auto-Logon failed: Could not open connection for '" & SAP_SYSTEM_DESCRIPTION & "'." & vbCrLf & vbCrLf & _
               "Error: " & Err.Description & vbCrLf & vbCrLf & _
               "Please check the System Description in VBA code EXACTLY matches SAP Logon Pad (see Debug Window listing), and ensure SSO/SNC is working correctly.", vbCritical, "Connection Error"
        Err.Clear
        On Error GoTo ErrorHandler
        GoTo Cleanup
    End If
    On Error GoTo ErrorHandler ' Restore error handling
    Debug.Print "OpenConnection successful. Connection Description: " & TargetConn.Description

    ' --- Step 3: Get Session created by SSO/SNC ---
    If TargetConn.Children.Count = 0 Then
        Debug.Print "No session found immediately after OpenConnection. Waiting..."
        Sleep 2000 ' Wait a bit longer in case session creation is slow
        If TargetConn.Children.Count = 0 Then
            MsgBox "Auto-Logon failed: Connection opened, but no session object was created automatically (SSO/SNC might have failed silently or is disabled for scripting).", vbCritical, "Session Error"
            GoTo Cleanup
        End If
    End If

    Set TargetSess = TargetConn.Children(0) ' Get the first (and likely only) session
    If TargetSess Is Nothing Then
         MsgBox "Auto-Logon failed: Could not get session object after opening connection.", vbCritical, "Session Error"
         GoTo Cleanup
    End If
    Debug.Print "Session object obtained (Session Number: " & TargetSess.Info.SessionNumber & "). Waiting for it to become active..."

    ' --- Step 4: Wait for Session to be Ready ---
    startTime = Timer
    Do
         On Error Resume Next ' Info property might fail if session is not fully ready
         Dim currentTCode As String: currentTCode = TargetSess.Info.TRANSACTION
         Dim errNum As Long: errNum = Err.Number
         On Error GoTo ErrorHandler ' Restore handler

         If errNum = 0 And currentTCode <> "" And currentTCode <> "SAPMSYST" Then
             Debug.Print "Session active. Current Transaction: " & currentTCode
             Exit Do ' Logon likely complete if transaction is set
         End If

         Sleep 500
         DoEvents
         If Timer - startTime > LOGON_TIMEOUT_SECONDS Then
             MsgBox "Auto-Logon failed: Timeout waiting for SAP main menu after opening connection (SSO/SNC might have failed or is slow).", vbCritical, "Logon Timeout"
             GoTo Cleanup
         End If
    Loop

    ' --- Success ---
    Set objConn = TargetConn ' Set global variable
    Set objSess = TargetSess ' Set global variable
    MsgBox "Successfully connected and logged into SAP system '" & SAP_SYSTEM_DESCRIPTION & "' via SSO/SNC." & vbCrLf & _
           "Session Number: " & objSess.Info.SessionNumber & vbCrLf & _
           "Current Transaction: " & objSess.Info.TRANSACTION, vbInformation, "Logon Successful"
    GoTo Cleanup

ErrorHandler:
    MsgBox "An error occurred during SAP SSO Logon attempt:" & vbCrLf & vbCrLf & _
           "Error Number: " & Err.Number & vbCrLf & _
           "Description: " & Err.Description, vbCritical, "SAP Logon Error"
    ' Fall through to Cleanup

Cleanup:
    ' Release local objects
    Set SapGuiAuto = Nothing
    Set TargetConn = Nothing
    Set TargetSess = Nothing
    Set W_conn = Nothing ' Release loop variable
    Debug.Print "TestSapSsoLogon finished."

End Sub
