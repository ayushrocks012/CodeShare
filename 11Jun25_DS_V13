'@Folder("Forecasting")
Option Explicit

' =================================================================================================================
' --- STANDARD MODULE CODE (ROBUST VERSION) ---
' =================================================================================================================
' --- MODULE-LEVEL CONSTANTS ---
Private Const MAIN_SHEET As String = "Main"
Private Const STATUS_SHEET As String = "Product Status"
Private Const DEMAND_SHEET As String = "Demand Forecast"
Private Const HISTORY_SHEET As String = "Historical Sales"
Private Const SUMMARY_SHEET As String = "Summary"
Private Const LOG_SHEET As String = "Log"

' --- PRODUCT STATUSES ---
Private Const STATUS_ACTIVE As String = "Active"
Private Const STATUS_PHASE_IN_OUT As String = "PhaseIn-PhaseOut"
Private Const STATUS_DISCONTINUED As String = "Discontinued"
Private Const STATUS_NEW As String = "New"
Private Const STATUS_UNKNOWN As String = "Unknown"

' --- LOG LEVELS ---
Private Enum LogLevel
    INFO
    WARN
    ERR
End Enum

' =================================================================================================================
' Main Procedure: UpdateForeCast_Click
' =================================================================================================================
Public Sub UpdateForeCast_Click()
    Const PROC_NAME As String = "UpdateForeCast_Click"
    Dim TWB As Workbook, NewWB As Workbook
    Dim MainSheet As Worksheet, WS_Summary As Worksheet, WS_ProductStatus As Worksheet
    Dim WS_DemandForecast As Worksheet, WS_HistoricalSales As Worksheet, WS_Log As Worksheet
    Dim StartTime As Double: StartTime = Timer

    ' --- 1. SETUP & INITIALIZATION ---
    On Error GoTo ErrorHandler
    
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.Calculation = xlCalculationManual
    Application.StatusBar = "Initializing forecast process..."

    Set TWB = ThisWorkbook
    Set MainSheet = TWB.Sheets(MAIN_SHEET)
    Set WS_ProductStatus = TWB.Sheets(STATUS_SHEET)
    Set WS_DemandForecast = TWB.Sheets(DEMAND_SHEET)
    Set WS_HistoricalSales = TWB.Sheets(HISTORY_SHEET)

    ' --- Create Log sheet FIRST ---
    On Error Resume Next
    TWB.Sheets(LOG_SHEET).Delete
    On Error GoTo ErrorHandler
    Set WS_Log = TWB.Sheets.Add(After:=TWB.Sheets(TWB.Sheets.Count))
    InitializeLogSheet WS_Log
    WriteToLog WS_Log, LogLevel.INFO, "Log sheet initialized.", PROC_NAME

    ' --- 2. INPUT VALIDATION ---
    WriteToLog WS_Log, LogLevel.INFO, "Starting input validation...", PROC_NAME
    If Not ValidateAllInputs(WS_ProductStatus, WS_DemandForecast, WS_HistoricalSales, WS_Log) Then
        WriteToLog WS_Log, LogLevel.ERR, "Input validation failed. Aborting process.", PROC_NAME
        MsgBox "Input data validation failed. Please check the '" & LOG_SHEET & "' sheet for details. Aborting.", vbCritical
        GoTo Cleanup
    End If
    WriteToLog WS_Log, LogLevel.INFO, "Input validation successful.", PROC_NAME

    ' --- Continue Setup ---
    On Error Resume Next
    TWB.Sheets(SUMMARY_SHEET).Delete
    On Error GoTo ErrorHandler
    Set WS_Summary = TWB.Sheets.Add(After:=TWB.Sheets(TWB.Sheets.Count))
    WS_Summary.Name = SUMMARY_SHEET
    WriteToLog WS_Log, LogLevel.INFO, "Summary sheet created.", PROC_NAME

    ' --- 3. CORE PROCESSING (IN-MEMORY) ---
    Application.StatusBar = "Loading data into memory..."
    WriteToLog WS_Log, LogLevel.INFO, "Loading data into memory...", PROC_NAME
    Dim StatusData As Variant, HistoryData As Variant
    StatusData = LoadDataToArray(WS_ProductStatus)
    HistoryData = LoadDataToArray(WS_HistoricalSales)
    WriteToLog WS_Log, LogLevel.INFO, "Loaded " & UBound(StatusData, 1) - 1 & " products from Status sheet.", PROC_NAME
    WriteToLog WS_Log, LogLevel.INFO, "Loaded " & UBound(HistoryData, 1) - 1 & " historical sales records.", PROC_NAME

    Application.StatusBar = "Building product lifecycle map..."
    Dim LifecycleMap As Object
    Set LifecycleMap = BuildLifecycleMap(StatusData, WS_Log)

    Application.StatusBar = "Creating family sheets..."
    CreateFamilySheets TWB, StatusData, WS_DemandForecast, WS_Summary, WS_Log

    Application.StatusBar = "Processing forecast data..."
    ProcessForecastData TWB, StatusData, HistoryData, WS_DemandForecast, WS_Summary, WS_Log, LifecycleMap

    ' --- 4. FINALIZATION ---
    Application.StatusBar = "Creating final report workbook..."
    WriteToLog WS_Log, LogLevel.INFO, "Creating final report workbook...", PROC_NAME
    Set NewWB = CreateOutputWorkbook(TWB, WS_Summary, WS_Log)
    
    If Not NewWB Is Nothing Then
        Application.StatusBar = "Saving final report..."
        Dim FilePath As String
        FilePath = TWB.Path & "\Demand ForeCast - " & Format$(Now, "DDMMYYYY_HHMMSS") & ".xlsx"
        NewWB.SaveAs FilePath
        NewWB.Close SaveChanges:=False
        WriteToLog WS_Log, LogLevel.INFO, "Final report saved to: " & FilePath, PROC_NAME
    End If

    ' --- 5. CLEANUP ---
Cleanup:
    Application.StatusBar = False
    Application.Calculation = xlCalculationAutomatic
    If Not MainSheet Is Nothing Then MainSheet.Activate
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    WriteToLog WS_Log, LogLevel.INFO, "Process completed in " & Format(Timer - StartTime, "0.00") & " seconds.", PROC_NAME
    MsgBox "Forecast Update Completed. See '" & LOG_SHEET & "' for details.", vbInformation
    Exit Sub

ErrorHandler:
    Dim ErrMsg As String
    ErrMsg = "An unexpected error occurred!" & vbCrLf & _
             "Error Number: " & Err.Number & vbCrLf & _
             "Procedure: " & Err.Source & vbCrLf & _
             "Description: " & Err.Description
    
    If Not WS_Log Is Nothing Then
        WriteToLog WS_Log, LogLevel.ERR, "Error " & Err.Number & ": " & Err.Description, Err.Source
    End If
    
    MsgBox ErrMsg, vbCritical, "Process Halted"
    Resume Cleanup
End Sub

' =================================================================================================================
' Validation Procedures
' =================================================================================================================
Private Function ValidateAllInputs(ByVal WS_Status As Worksheet, ByVal WS_Demand As Worksheet, ByVal WS_History As Worksheet, ByVal WS_Log As Worksheet) As Boolean
    Const PROC_NAME As String = "ValidateAllInputs"
    Dim IsValid As Boolean: IsValid = True
    
    ' Validate Product Status Sheet
    Dim statusHeaders() As String
    statusHeaders = Split("Family,I-S-D,Status,Superseding Product ID", ",")
    If Not ValidateHeaders(WS_Status, statusHeaders, WS_Log) Then IsValid = False
    If WS_Status.Cells(WS_Status.Rows.Count, "A").End(xlUp).Row < 2 Then
        WriteToLog WS_Log, LogLevel.ERR, "'" & WS_Status.Name & "' sheet contains no data.", PROC_NAME
        IsValid = False
    End If
    
    ' Validate Demand Forecast Sheet
    Dim demandHeaders() As String
    demandHeaders = Split("Family", ",")
    If Not ValidateHeaders(WS_Demand, demandHeaders, WS_Log) Then IsValid = False
    If WS_Demand.Cells(WS_Demand.Rows.Count, "A").End(xlUp).Row < 2 Then
        WriteToLog WS_Log, LogLevel.ERR, "'" & WS_Demand.Name & "' sheet contains no data.", PROC_NAME
        IsValid = False
    End If

    ' Validate Historical Sales Sheet
    Dim historyHeaders() As String
    historyHeaders = Split("Family,I-S-D", ",")
    If Not ValidateHeaders(WS_History, historyHeaders, WS_Log) Then IsValid = False
     If WS_History.Cells(WS_History.Rows.Count, "A").End(xlUp).Row < 2 Then
        WriteToLog WS_Log, LogLevel.WARN, "'" & WS_History.Name & "' sheet contains no data. Forecasts for existing products will be zero.", PROC_NAME
    End If

    ValidateAllInputs = IsValid
End Function

Private Function ValidateHeaders(ByVal WS As Worksheet, ByVal requiredHeaders() As String, ByVal WS_Log As Worksheet) As Boolean
    Const PROC_NAME As String = "ValidateHeaders"
    Dim Header As Variant, Found As Boolean, HeaderRange As Range
    Dim LastCol As Long
    
    LastCol = WS.Cells(1, WS.Columns.Count).End(xlToLeft).Column
    Set HeaderRange = WS.Range("A1", WS.Cells(1, LastCol))
    ValidateHeaders = True
    
    For Each Header In requiredHeaders
        Found = (Not HeaderRange.Find(Header, LookIn:=xlValues, LookAt:=xlWhole) Is Nothing)
        If Not Found Then
            WriteToLog WS_Log, LogLevel.ERR, "Required header '" & Header & "' not found in sheet '" & WS.Name & "'.", PROC_NAME
            ValidateHeaders = False
        Else
            WriteToLog WS_Log, LogLevel.INFO, "Header '" & Header & "' found in sheet '" & WS.Name & "'.", PROC_NAME
        End If
    Next Header
End Function


' =================================================================================================================
' Core Processing Procedures
' =================================================================================================================
Private Sub CreateFamilySheets(ByVal TWB As Workbook, ByVal StatusData As Variant, ByVal WS_DemandForecast As Worksheet, ByVal WS_Summary As Worksheet, ByVal WS_Log As Worksheet)
    Const PROC_NAME As String = "CreateFamilySheets"
    WriteToLog WS_Log, LogLevel.INFO, "Starting...", PROC_NAME
    
    Dim DemandForecastLRow As Long, ProductStatusLRow As Long
    Dim CurrFamilyRow As Long, CurrProductRow As Long
    Dim CurrFamily As String, CurrProductFamily As String
    Dim WS_NewFamily As Worksheet

    DemandForecastLRow = WS_DemandForecast.Cells(WS_DemandForecast.Rows.Count, "A").End(xlUp).Row
    ProductStatusLRow = UBound(StatusData, 1)
    
    SetupSummaryHeaders WS_Summary, StatusData

    For CurrFamilyRow = 2 To DemandForecastLRow
        CurrFamily = Trim$(WS_DemandForecast.Range("A" & CurrFamilyRow).Value)
        
        If Len(CurrFamily) > 0 Then
            On Error Resume Next
            TWB.Sheets(CurrFamily).Delete
            On Error GoTo 0
            
            Set WS_NewFamily = TWB.Sheets.Add(After:=TWB.Sheets(TWB.Sheets.Count))
            WS_NewFamily.Name = CurrFamily
            WriteToLog WS_Log, LogLevel.INFO, "Created sheet for family: " & CurrFamily, PROC_NAME
            
            WS_NewFamily.Range("A1:D1").Value = Array(StatusData(1, 1), StatusData(1, 2), StatusData(1, 3), StatusData(1, 4))
            WS_NewFamily.Range("E1").Value = "Active/Discontinued"
            WS_NewFamily.Range("F1").Value = "Phase Out Month"
            
            Dim NextFreeRow As Long: NextFreeRow = 2
            For CurrProductRow = 2 To ProductStatusLRow
                CurrProductFamily = LCase$(Trim$(StatusData(CurrProductRow, 1)))
                If CurrProductFamily = LCase$(CurrFamily) Then
                    WS_NewFamily.Range("A" & NextFreeRow & ":D" & NextFreeRow).Value = Array(StatusData(CurrProductRow, 1), StatusData(CurrProductRow, 2), StatusData(CurrProductRow, 3), StatusData(CurrProductRow, 4))
                    NextFreeRow = NextFreeRow + 1
                End If
            Next CurrProductRow
        End If
    Next CurrFamilyRow
    WriteToLog WS_Log, LogLevel.INFO, "Finished.", PROC_NAME
End Sub

Private Sub ProcessForecastData(ByVal TWB As Workbook, ByVal StatusData As Variant, ByVal HistoryData As Variant, ByVal WS_DemandForecast As Worksheet, ByVal WS_Summary As Worksheet, ByVal WS_Log As Worksheet, ByVal LifecycleMap As Object)
    Const PROC_NAME As String = "ProcessForecastData"
    WriteToLog WS_Log, LogLevel.INFO, "Starting...", PROC_NAME

    Dim WS_CurrentFamily As Worksheet, CurrFamily As String, DemandForecastLRow As Long, CurrFamilyRow As Long
    DemandForecastLRow = WS_DemandForecast.Cells(WS_DemandForecast.Rows.Count, "A").End(xlUp).Row

    For CurrFamilyRow = 2 To DemandForecastLRow
        CurrFamily = Trim$(WS_DemandForecast.Range("A" & CurrFamilyRow).Value)
        Application.StatusBar = "Processing family: " & CurrFamily & "..."
        
        If SheetExists(TWB, CurrFamily) Then
            Set WS_CurrentFamily = TWB.Sheets(CurrFamily)
            WriteToLog WS_Log, LogLevel.INFO, "Begin processing for family: " & CurrFamily, PROC_NAME
            CalculateAndFormatFamilySheet WS_CurrentFamily, StatusData, HistoryData, WS_DemandForecast, WS_Log, LifecycleMap
            AppendToSummarySheet WS_CurrentFamily, WS_Summary
            WriteToLog WS_Log, LogLevel.INFO, "Finished processing for family: " & CurrFamily, PROC_NAME
            Set WS_CurrentFamily = Nothing
        End If
    Next CurrFamilyRow
    WriteToLog WS_Log, LogLevel.INFO, "Finished.", PROC_NAME
End Sub

Private Sub CalculateAndFormatFamilySheet(ByVal WS_CurrentFamily As Worksheet, ByVal StatusData As Variant, ByVal HistoryData As Variant, ByVal WS_DemandForecast As Worksheet, ByVal WS_Log As Worksheet, ByVal LifecycleMap As Object)
    Const PROC_NAME As String = "CalculateAndFormatFamilySheet"
    Dim FamilyLRow As Long, FamilyLCol As Long, HistLCol As Long
    Dim ProdGroupSum As Double, FamilySum As Double, TotalForecastCalculated As Double, OriginalFamilyDemand As Double
    Dim MonthCount As Long
    
    MonthCount = GetHistoricalMonthCount(WS_DemandForecast, HistoryData)
    
    Dim DemandForecastLCol As Long, HeaderRow As Variant
    DemandForecastLCol = WS_DemandForecast.Cells(1, WS_DemandForecast.Columns.Count).End(xlToLeft).Column
    HeaderRow = GetCombinedHeaderRow(WS_DemandForecast, HistoryData, MonthCount, DemandForecastLCol)
    
    AddNewProductsToFamilySheet WS_CurrentFamily, StatusData
    FamilyLRow = WS_CurrentFamily.Cells(WS_CurrentFamily.Rows.Count, "A").End(xlUp).Row
    
    If FamilyLRow < 2 Then
        WriteToLog WS_Log, LogLevel.WARN, "No products found to process for family: " & WS_CurrentFamily.Name, PROC_NAME
        Exit Sub
    End If
    
    Dim OutputArray() As Variant
    ReDim OutputArray(1 To FamilyLRow, 1 To UBound(HeaderRow))
    
    Dim r As Long, c As Long
    For c = 1 To UBound(HeaderRow): OutputArray(1, c) = HeaderRow(c): Next c
    For r = 2 To FamilyLRow
        For c = 1 To 4: OutputArray(r, c) = WS_CurrentFamily.Cells(r, c).Value: Next c
    Next r
    
    HistLCol = 6 + MonthCount
    Dim DemandData As Variant, DemandDataRow As Variant
    
    For r = 2 To FamilyLRow
        Dim CurrProduct As String, CurrProductFamily As String, CurrGroupID As String
        CurrProductFamily = OutputArray(r, 1)
        CurrProduct = OutputArray(r, 4)
        If InStr(CurrProduct, "-") > 0 Then CurrGroupID = Split(CurrProduct, "-")(0) & Split(CurrProduct, "-")(1) Else CurrGroupID = CurrProduct

        Dim CurrentLifecycle As cProductLifecycle
        Debug.Assert LifecycleMap.Exists(CurrProduct) ' Assert the product exists in the map
        If LifecycleMap.Exists(CurrProduct) Then Set CurrentLifecycle = LifecycleMap.Item(CurrProduct) Else Set CurrentLifecycle = New cProductLifecycle
        
        OutputArray(r, 5) = CurrentLifecycle.Status
        If CurrentLifecycle.PhaseOutDate > 0 Then OutputArray(r, 6) = CurrentLifecycle.PhaseOutDate

        Dim HistoricSalesRow As Variant
        HistoricSalesRow = GetHistoricalDataRow(CurrProduct, HistoryData, MonthCount + 4)
        For c = 1 To UBound(HistoricSalesRow): OutputArray(r, c + 6) = HistoricSalesRow(c): Next c
        
        ProdGroupSum = GetHistoricalSum(CurrProductFamily, CurrGroupID, HistoryData, MonthCount + 4)
        FamilySum = GetHistoricalFamilySum(CurrProductFamily, HistoryData, LifecycleMap, MonthCount + 4)
        
        DemandDataRow = Application.Match(CurrProductFamily, WS_DemandForecast.Columns(1), 0)
        
        If IsNumeric(DemandDataRow) Then
            DemandData = WS_DemandForecast.Range(WS_DemandForecast.Cells(DemandDataRow, 2), WS_DemandForecast.Cells(DemandDataRow, DemandForecastLCol)).Value
            For c = (HistLCol + 1) To UBound(OutputArray, 2)
                Dim ForecastValue As Double
                OriginalFamilyDemand = DemandData(1, c - HistLCol)
                
                Debug.Assert FamilySum >= 0 'Denominator should not be negative
                ForecastValue = CalculateForecastValue(CurrentLifecycle, OutputArray(1, c), ProdGroupSum, FamilySum, OriginalFamilyDemand)
                OutputArray(r, c) = ForecastValue
            Next c
        End If
    Next r
    
    WS_CurrentFamily.Cells.Clear
    WS_CurrentFamily.Range("A1").Resize(UBound(OutputArray, 1), UBound(OutputArray, 2)).Value = OutputArray
    
    ' --- Sanity Check Assertion ---
    TotalForecastCalculated = Application.WorksheetFunction.Sum(WS_CurrentFamily.Range(WS_CurrentFamily.Cells(2, UBound(OutputArray, 2)), WS_CurrentFamily.Cells(FamilyLRow, UBound(OutputArray, 2))))
    OriginalFamilyDemand = DemandData(1, UBound(DemandData, 2))
    'Check if total calculated forecast for the last month is within 0.1% of the input forecast
    If OriginalFamilyDemand > 0 Then
        Debug.Assert Abs(TotalForecastCalculated - OriginalFamilyDemand) / OriginalFamilyDemand < 0.001
    End If
    
    FormatEnhancedSheet WS_CurrentFamily
End Sub

Private Function CalculateForecastValue(ByVal Lifecycle As cProductLifecycle, ByVal ForecastDate As Date, ByVal ProdGroupSum As Double, ByVal FamilySum As Double, ByVal FamilyDemand As Double) As Double
    Dim BaseForecast As Double: BaseForecast = 0
    If FamilySum > 0 Then
        BaseForecast = (ProdGroupSum * FamilyDemand) / FamilySum
    End If

    Dim FinalForecast As Double: FinalForecast = BaseForecast

    Select Case Lifecycle.Status
        Case STATUS_PHASE_IN_OUT
            If Lifecycle.PhaseOutDate > 0 And ForecastDate >= Lifecycle.PhaseOutDate Then
                If Month(ForecastDate) = Month(Lifecycle.PhaseOutDate) And Year(ForecastDate) = Year(Lifecycle.PhaseOutDate) Then
                    FinalForecast = BaseForecast * Lifecycle.PhaseOutPercent
                Else
                    FinalForecast = 0
                End If
            End If
        Case STATUS_DISCONTINUED
             If Lifecycle.PhaseOutDate > 0 And ForecastDate >= Lifecycle.PhaseOutDate Then FinalForecast = 0
    End Select

    If Lifecycle.IsPhasingIn Then
        If ForecastDate < Lifecycle.PhaseInDate Then
            FinalForecast = 0
        ElseIf Month(ForecastDate) = Month(Lifecycle.PhaseInDate) And Year(ForecastDate) = Year(Lifecycle.PhaseInDate) Then
            FinalForecast = BaseForecast * Lifecycle.PhaseInPercent
        End If
    End If
    CalculateForecastValue = FinalForecast
End Function

Private Function BuildLifecycleMap(ByVal StatusData As Variant, ByVal WS_Log As Worksheet) As Object
    Const PROC_NAME As String = "BuildLifecycleMap"
    WriteToLog WS_Log, LogLevel.INFO, "Starting...", PROC_NAME
    Dim r As Long, ProductID As String, productKey As Variant
    Dim TempLifecycle As cProductLifecycle, SuccessorLifecycle As cProductLifecycle
    Dim LifecycleDict As Object: Set LifecycleDict = CreateObject("Scripting.Dictionary")
    
    For r = 2 To UBound(StatusData, 1)
        ProductID = Trim$(StatusData(r, 4))
        If Len(ProductID) > 0 And Not LifecycleDict.Exists(ProductID) Then
            Set TempLifecycle = New cProductLifecycle
            With TempLifecycle
                .ProductID = ProductID
                .Status = Trim$(StatusData(r, 5))
                .SupersededByProductID = Trim$(StatusData(r, 8))
                If .Status = STATUS_PHASE_IN_OUT Or .Status = STATUS_DISCONTINUED Then
                    .IsPhasingOut = True
                    If IsDate(StatusData(r, 6)) Then .PhaseOutDate = CDate(StatusData(r, 6))
                    If IsNumeric(StatusData(r, 7)) Then .PhaseOutPercent = CDbl(StatusData(r, 7))
                End If
            End With
            LifecycleDict.Add ProductID, TempLifecycle
        End If
    Next r

    For Each productKey In LifecycleDict.Keys
        Set TempLifecycle = LifecycleDict.Item(productKey)
        If TempLifecycle.IsPhasingOut And Len(TempLifecycle.SupersededByProductID) > 0 Then
            If LifecycleDict.Exists(TempLifecycle.SupersededByProductID) Then
                Set SuccessorLifecycle = LifecycleDict.Item(TempLifecycle.SupersededByProductID)
                With SuccessorLifecycle
                    .IsPhasingIn = True
                    .ReplacesProductID = TempLifecycle.ProductID
                    .PhaseInDate = TempLifecycle.PhaseOutDate
                    .PhaseInPercent = 1 - TempLifecycle.PhaseOutPercent
                End With
            Else
                WriteToLog WS_Log, LogLevel.WARN, "Product '" & TempLifecycle.ProductID & "' has SupersededByProductID '" & TempLifecycle.SupersededByProductID & "', but it was not found.", PROC_NAME
            End If
        End If
    Next productKey
    
    WriteToLog WS_Log, LogLevel.INFO, "Finished building map for " & LifecycleDict.Count & " unique products.", PROC_NAME
    Set BuildLifecycleMap = LifecycleDict
End Function

' =================================================================================================================
' Formatting & Utility Procedures
' =================================================================================================================
Private Sub FormatEnhancedSheet(ByVal WS As Worksheet)
    ' This procedure remains largely the same as the previous version
    If WS.Cells(1, 1).Value = "" Then Exit Sub
    Dim LastRow As Long, LastCol As Long, TotalRow As Long
    Dim HistLCol As Long, i As Long, r As Long
    
    LastRow = WS.Cells(WS.Rows.Count, "A").End(xlUp).Row
    LastCol = WS.Cells(1, WS.Columns.Count).End(xlToLeft).Column
    TotalRow = LastRow + 1
    
    For i = 7 To LastCol
        WS.Cells(TotalRow, i).Value = Application.WorksheetFunction.Sum(WS.Range(WS.Cells(2, i), WS.Cells(LastRow, i)))
    Next i
    WS.Cells(TotalRow, 1).Value = "TOTAL"
    
    Dim HeaderRange As Range, DataRange As Range, TotalRange As Range, FullRange As Range
    Set HeaderRange = WS.Range(WS.Cells(1, 1), WS.Cells(1, LastCol))
    Set DataRange = WS.Range(WS.Cells(2, 1), WS.Cells(LastRow, LastCol))
    Set TotalRange = WS.Range(WS.Cells(TotalRow, 1), WS.Cells(TotalRow, LastCol))
    Set FullRange = WS.Range(WS.Cells(1, 1), WS.Cells(TotalRow, LastCol))
    
    FullRange.Interior.ColorIndex = xlNone
    FullRange.Borders.LineStyle = xlNone
    FullRange.Font.Bold = False
    
    With HeaderRange
        .Font.Bold = True
        .Font.Color = vbWhite
        .Interior.Color = RGB(47, 85, 151)
        .VerticalAlignment = xlCenter
    End With
    
    With TotalRange
        .Font.Bold = True
        .Interior.Color = RGB(221, 235, 247)
    End With
    
    For r = 2 To LastRow
        If r Mod 2 = 0 Then
            WS.Range(WS.Cells(r, 1), WS.Cells(r, LastCol)).Interior.Color = RGB(242, 242, 242)
        End If
    Next r
    
    HistLCol = GetLastHistoricalColumn(WS)
    If HistLCol > 6 Then
        WS.Range(WS.Cells(2, 7), WS.Cells(LastRow, HistLCol)).Interior.Color = RGB(220, 220, 220)
        With WS.Range(WS.Cells(1, HistLCol), WS.Cells(TotalRow, HistLCol)).Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .Color = RGB(47, 85, 151)
            .Weight = xlMedium
        End With
    End If
    
    FullRange.Borders.LineStyle = xlContinuous
    FullRange.Borders.Weight = xlThin
    FullRange.Borders.Color = RGB(210, 210, 210)
    
    WS.Range(WS.Cells(2, 7), WS.Cells(TotalRow, LastCol)).NumberFormat = "_(* #,##0_);_(* (#,##0);_(* ""-""??_);_(@_)"
    WS.Range(WS.Cells(1, 7), WS.Cells(1, LastCol)).NumberFormat = "mmm-yy"
    
    WS.Cells.EntireColumn.AutoFit
    WS.Activate
    WS.Range("A2").Select
    ActiveWindow.FreezePanes = True
End Sub

Private Function CreateOutputWorkbook(ByVal TWB As Workbook, ByVal WS_Summary As Worksheet, ByVal WS_Log As Worksheet) As Workbook
    Const PROC_NAME As String = "CreateOutputWorkbook"
    WriteToLog WS_Log, LogLevel.INFO, "Starting...", PROC_NAME
    
    Dim WB As Workbook, WS As Worksheet
    Dim SheetNames As Object: Set SheetNames = CreateObject("System.Collections.ArrayList")
    
    Dim SummaryLastRow As Long
    SummaryLastRow = WS_Summary.Cells(WS_Summary.Rows.Count, "A").End(xlUp).Row
    If SummaryLastRow > 1 Then
        Dim SummaryLastCol As Long
        SummaryLastCol = WS_Summary.Cells(1, WS_Summary.Columns.Count).End(xlToLeft).Column
        WS_Summary.Range("A1", WS_Summary.Cells(SummaryLastRow, SummaryLastCol)).Sort Key1:=WS_Summary.Range("D2"), Order1:=xlAscending, Header:=xlYes
        FormatEnhancedSheet WS_Summary
    End If
    
    For Each WS In TWB.Worksheets
        Select Case WS.Name
            Case MAIN_SHEET, STATUS_SHEET, HISTORY_SHEET, DEMAND_SHEET, LOG_SHEET
            Case Else: SheetNames.Add WS.Name
        End Select
    Next WS
    
    If SheetNames.Count = 0 Then
        WriteToLog WS_Log, LogLevel.WARN, "No family sheets were generated to create an output workbook.", PROC_NAME
        Set CreateOutputWorkbook = Nothing
        Exit Function
    End If
    
    TWB.Sheets(SheetNames.ToArray).Move
    Set WB = ActiveWorkbook
    
    On Error Resume Next
    WB.Sheets(SUMMARY_SHEET).Activate
    On Error GoTo 0
    
    WriteToLog WS_Log, LogLevel.INFO, "Finished.", PROC_NAME
    Set CreateOutputWorkbook = WB
End Function

' --- Other helper functions (largely unchanged) ---
Private Function GetHistoricalFamilySum(ByVal FamilyName As String, ByVal HistoryData As Variant, ByVal LifecycleMap As Object, ByVal HistLCol As Long) As Double
    Dim TotalSum As Double, r As Long, c As Long
    Dim HSProduct As String, HSFamily As String
    TotalSum = 0
    For r = 2 To UBound(HistoryData, 1)
        HSFamily = LCase$(Trim$(HistoryData(r, 1)))
        If HSFamily = LCase$(FamilyName) Then
            HSProduct = Trim$(HistoryData(r, 4))
            Dim HSLifecycle As cProductLifecycle
            If LifecycleMap.Exists(HSProduct) Then Set HSLifecycle = LifecycleMap.Item(HSProduct)
            
            If Not HSLifecycle Is Nothing Then
                For c = 5 To HistLCol
                    Dim IncludeSale As Boolean: IncludeSale = False
                    If HSLifecycle.Status <> STATUS_DISCONTINUED Then
                        IncludeSale = True
                    Else
                        If HSLifecycle.PhaseOutDate > 0 And IsDate(HistoryData(1, c)) Then
                                If CDate(HistoryData(1, c)) < HSLifecycle.PhaseOutDate Then IncludeSale = True
                        Else
                            IncludeSale = True
                        End If
                    End If
                    If IncludeSale Then TotalSum = TotalSum + Val(HistoryData(r, c))
                Next c
            End If
            Set HSLifecycle = Nothing
        End If
    Next r
    GetHistoricalFamilySum = TotalSum
End Function
Private Sub AddNewProductsToFamilySheet(ByVal WS_CurrentFamily As Worksheet, ByVal StatusData As Variant)
    Dim ProductStatusLRow As Long, FamilyLRow As Long, CurrProdRow As Long, CurrProduct As String, CurrProductFamily As String, ActiveType As String
    ProductStatusLRow = UBound(StatusData, 1)
    For CurrProdRow = 2 To ProductStatusLRow
        CurrProductFamily = LCase$(Trim$(StatusData(CurrProdRow, 1))): ActiveType = Trim$(StatusData(CurrProdRow, 5)): CurrProduct = Trim$(StatusData(CurrProdRow, 4))
        If CurrProductFamily = LCase$(WS_CurrentFamily.Name) And ActiveType = STATUS_NEW Then
            If WS_CurrentFamily.Range("D:D").Find(What:=CurrProduct, LookIn:=xlValues, LookAt:=xlWhole) Is Nothing Then
                FamilyLRow = WS_CurrentFamily.Cells(WS_CurrentFamily.Rows.Count, "A").End(xlUp).Row + 1
                WS_CurrentFamily.Range("A" & FamilyLRow & ":D" & FamilyLRow).Value = Array(StatusData(CurrProdRow, 1), StatusData(CurrProdRow, 2), StatusData(CurrProdRow, 3), StatusData(CurrProdRow, 4))
            End If
        End If
    Next CurrProdRow
End Sub
Private Sub AppendToSummarySheet(ByVal WS_Family As Worksheet, ByVal WS_Summary As Worksheet)
    Dim FamilyLRow As Long, FamilyLCol As Long, SummaryLRow As Long, FamilyData As Variant
    FamilyLRow = WS_Family.Cells(WS_Family.Rows.Count, "A").End(xlUp).Row - 1: If FamilyLRow < 2 Then Exit Sub
    FamilyLCol = WS_Family.Cells(1, WS_Family.Columns.Count).End(xlToLeft).Column
    SummaryLRow = WS_Summary.Cells(WS_Summary.Rows.Count, "A").End(xlUp).Row
    If IsEmpty(WS_Summary.Range("G1").Value) Then WS_Family.Range("G1", WS_Family.Cells(1, FamilyLCol)).Copy WS_Summary.Range("G1")
    FamilyData = WS_Family.Range("A2", WS_Family.Cells(FamilyLRow, FamilyLCol)).Value
    WS_Summary.Range("A" & SummaryLRow + 1).Resize(UBound(FamilyData, 1), UBound(FamilyData, 2)).Value = FamilyData
End Sub
Private Function GetHistoricalDataRow(ByVal ProductName As String, ByVal HistoryData As Variant, ByVal HistLCol As Long) As Variant
    Dim r As Long, c As Long, Result() As Variant
    ReDim Result(1 To HistLCol - 4)
    For r = 2 To UBound(HistoryData, 1)
        If Trim$(HistoryData(r, 4)) = ProductName Then
            For c = 5 To HistLCol: Result(c - 4) = HistoryData(r, c): Next c
            GetHistoricalDataRow = Result: Exit Function
        End If
    Next r
    GetHistoricalDataRow = Result
End Function
Private Function GetHistoricalSum(ByVal FamilyName As String, ByVal GroupID As String, ByVal HistoryData As Variant, ByVal HistLCol As Long) As Double
    Dim TotalSum As Double, i As Long, r As Long, CurrentGroupID As String, CurrentFamily As String, CurrentProduct As String
    TotalSum = 0
    For r = 2 To UBound(HistoryData, 1)
        CurrentFamily = UCase$(Trim$(HistoryData(r, 1))): CurrentProduct = Trim$(HistoryData(r, 4))
        If InStr(CurrentProduct, "-") > 0 Then CurrentGroupID = Split(CurrentProduct, "-")(0) & Split(CurrentProduct, "-")(1) Else CurrentGroupID = CurrentProduct
        If CurrentGroupID = GroupID And CurrentFamily = UCase$(FamilyName) Then
            For i = 5 To HistLCol: TotalSum = TotalSum + Val(HistoryData(r, i)): Next i
        End If
    Next r
    GetHistoricalSum = TotalSum
End Function
Private Function LoadDataToArray(ByVal WS As Worksheet) As Variant
    Dim LRow As Long, LCol As Long
    LRow = WS.Cells(WS.Rows.Count, "A").End(xlUp).Row: LCol = WS.Cells(1, WS.Columns.Count).End(xlToLeft).Column
    If LRow > 1 And LCol > 1 Then LoadDataToArray = WS.Range(WS.Cells(1, 1), WS.Cells(LRow, LCol)).Value Else Dim TempArray(1 To 1, 1 To 1) As Variant: TempArray(1, 1) = "": LoadDataToArray = TempArray
End Function
Private Function GetCombinedHeaderRow(ByVal WS_Demand As Worksheet, ByVal HistoryData As Variant, ByVal MonthCount As Long, ByVal DemandLCol As Long) As Variant
    Dim HistHeaders() As Variant, DemandHeaders() As Variant, c As Long, Combined() As Variant
    ReDim HistHeaders(1 To MonthCount)
    For c = 1 To MonthCount: HistHeaders(c) = HistoryData(1, c + 4): Next c
    DemandHeaders = WS_Demand.Range(WS_Demand.Cells(1, 2), WS_Demand.Cells(1, DemandLCol)).Value
    ReDim Combined(1 To 6 + MonthCount + (DemandLCol - 1))
    Combined(1) = "Family": Combined(2) = "Local Item Nbr": Combined(3) = "Desc": Combined(4) = "I-S-D": Combined(5) = "Active/Discontinued": Combined(6) = "Phase Out Month"
    For c = 1 To UBound(HistHeaders): Combined(c + 6) = HistHeaders(c): Next c
    For c = 1 To UBound(DemandHeaders, 2): Combined(c + 6 + MonthCount) = DemandHeaders(1, c): Next c
    GetCombinedHeaderRow = Combined
End Function
Private Function GetHistoricalMonthCount(ByVal WS_Demand As Worksheet, ByVal HistoryData As Variant) As Long
    Dim HistLCol As Long, CurrCol As Long, Count As Long
    On Error Resume Next
    HistLCol = UBound(HistoryData, 2)
    If Err.Number <> 0 Then GetHistoricalMonthCount = 0: Exit Function
    On Error GoTo 0
    Count = 0
    For CurrCol = 5 To HistLCol
        If IsDate(WS_Demand.Cells(1, 2).Value) And IsDate(HistoryData(1, CurrCol)) Then
            If CDate(WS_Demand.Cells(1, 2).Value) > CDate(HistoryData(1, CurrCol)) Then Count = Count + 1 Else Exit For
        End If
    Next CurrCol
    GetHistoricalMonthCount = Count
End Function
Private Function GetLastHistoricalColumn(ByVal WS As Worksheet) As Long
    Dim DemandForecastStartDate As Date, LastCol As Long, i As Long
    LastCol = WS.Cells(1, WS.Columns.Count).End(xlToLeft).Column
    For i = 7 To LastCol
        If IsDate(WS.Cells(1, i).Value) Then DemandForecastStartDate = WS.Cells(1, i).Value: Exit For
    Next i
    If Not IsDate(DemandForecastStartDate) Then GetLastHistoricalColumn = LastCol: Exit Function
    GetLastHistoricalColumn = 6
    For i = 7 To LastCol
        If IsDate(WS.Cells(1, i).Value) Then
            If CDate(WS.Cells(1, i).Value) < DemandForecastStartDate Then GetLastHistoricalColumn = i Else Exit For
        End If
    Next i
End Function
Private Function SheetExists(ByVal WB As Workbook, ByVal SheetName As String) As Boolean
    Dim WS As Worksheet
    On Error Resume Next: Set WS = WB.Sheets(SheetName): On Error GoTo 0
    SheetExists = Not WS Is Nothing
End Function
Private Sub InitializeLogSheet(ByVal WS As Worksheet)
    WS.Name = LOG_SHEET
    With WS.Range("A1:D1")
        .Value = Array("Timestamp", "Procedure", "Type", "Message")
        .Font.Bold = True
    End With
    WS.Columns("A:D").AutoFit
End Sub
Private Sub WriteToLog(ByVal WS As Worksheet, ByVal Level As LogLevel, ByVal Message As String, Optional ByVal ProcedureName As String = "General")
    Dim NextRow As Long, LogType As String
    NextRow = WS.Cells(WS.Rows.Count, "A").End(xlUp).Row + 1
    Select Case Level
        Case LogLevel.INFO: LogType = "INFO"
        Case LogLevel.WARN: LogType = "WARN"
        Case LogLevel.ERR: LogType = "ERROR"
    End Select
    With WS
        .Cells(NextRow, "A").Value = Now
        .Cells(NextRow, "B").Value = ProcedureName
        .Cells(NextRow, "C").Value = LogType
        .Cells(NextRow, "D").Value = Message
        .Cells(NextRow, "D").WrapText = True
    End With
End Sub
Private Sub SetupSummaryHeaders(ByVal WS_Summary As Worksheet, ByVal StatusData As Variant)
    WS_Summary.Range("A1:D1").Value = Array(StatusData(1, 1), StatusData(1, 2), StatusData(1, 3), StatusData(1, 4))
    WS_Summary.Range("E1").Value = "Active/Discontinued"
    WS_Summary.Range("F1").Value = "Phase Out Month"
End Sub
