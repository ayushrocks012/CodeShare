'@Folder("Configuration")
Option Explicit

'================================================================================================
' Module:      M_Config
' Purpose:     This module defines all global constants and utility functions for the project.
'              It acts as a central control panel for sheet names, column positions,
'              and business logic enumerations.
' Version:     29.0
' Author:      Ayush Goyal
' Date:        08-Jul-2025
'
' Change Log:
' V29.0:       - Added comprehensive, AI-friendly documentation comments to all procedures.
' V28.1:       - Replaced ReportColumn UDT with cReportColumn class to fix compile error.
'              - Moved GetStatusString function here to avoid circular dependencies.
'================================================================================================

' --- DEBUGGING & LOGGING FLAGS ---
Public Const DEBUG_MODE As Boolean = False 'TRUE: Prevents file saving, adds more logs. FALSE: Normal operation.

' --- SHEET NAME CONSTANTS ---
Public Const SHEET_STATUS As String = "Product Status"
Public Const SHEET_DEMAND As String = "Demand Forecast"
Public Const SHEET_HISTORY As String = "Historical Sales"
Public Const SHEET_LOG As String = "Log"

' --- REPORT CONFIGURATION ---
' Global collection to hold the configuration for the Tier report columns.
Public gTierReportCols As Collection

' --- ENUMERATIONS ---
' Provides type-safe, case-insensitive values for use throughout the code.

Public Enum ProductStatus
    psUnknown = 0
    psActive = 1
    psPhaseInOut = 2
    psDiscontinued = 3
    psNew = 4
End Enum

Public Enum logType
    ltInfo
    ltWarning
    ltError
    ltFatal
    ltProfile ' For performance timing
End Enum

' --- COLUMN INDEX CONSTANTS ---
' Defines the column numbers for key data fields. Adjust these if the source file layout changes.

'-- 'Product Status' Sheet Columns --
Public Const PS_AFFILIATE_COL As Long = 1
Public Const PS_TIER_COL As Long = 2
Public Const PS_SUB_TIER_COL As Long = 3
Public Const PS_LOCAL_ITEM_NBR_COL As Long = 4
Public Const PS_DESC_COL As Long = 5
Public Const PS_ISD_COL As Long = 6
Public Const PS_STATUS_COL As Long = 7
Public Const PS_PHASE_OUT_DATE_COL As Long = 8
Public Const PS_PHASE_OUT_PCT_COL As Long = 9
Public Const PS_SUPERSEDED_BY_COL As Long = 10

'-- 'Historical Sales' Sheet Columns --
Public Const HS_AFFILIATE_COL As Long = 1
Public Const HS_TIER_COL As Long = 2
Public Const HS_SUB_TIER_COL As Long = 3
Public Const HS_KEY_FIGURE_COL As Long = 4
Public Const HS_LOCAL_ITEM_NBR_COL As Long = 5
Public Const HS_DESC_COL As Long = 6
Public Const HS_ISD_COL As Long = 7
Public Const HS_START_OF_MONTHS_COL As Long = 8

'-- 'Demand Forecast' Sheet Columns --
Public Const DF_AFFILIATE_COL As Long = 1
Public Const DF_KEY_FIGURE_COL As Long = 2
Public Const DF_TIER_COL As Long = 3
Public Const DF_START_OF_MONTHS_COL As Long = 4

'================================================================================================
'--- GLOBAL INITIALIZATION & UTILITY FUNCTIONS ---
'================================================================================================

'---------------------------------------------------------------------------------
' Procedure : InitializeReportConfig
' Purpose   : Populates the global collection (gTierReportCols) that defines the
'             structure of the detailed Tier report. This centralizes the report
'             layout, making it easy to add, remove, or reorder columns by
'             editing only this one subroutine.
'---------------------------------------------------------------------------------
Public Sub InitializeReportConfig()
    Set gTierReportCols = New Collection
    
    ' Add each column by defining its header, source property, width, and format.
    AddReportColumn "Key Figures", "KeyFigure", 25, "@"
    AddReportColumn "Affiliate", "Affiliate", 10, "@"
    AddReportColumn "Forecast Tier", "ForecastTier", 30, "@"
    AddReportColumn "Forecast Sub-Tier", "ForecastSubTier", 20, "@"
    AddReportColumn "Local Item Nbr", "LocalItemNbr", 18, "@"
    AddReportColumn "Desc", "Description", 40, "@"
    AddReportColumn "I-S-D", "ISD", 15, "@"
    AddReportColumn "Status", "StatusString", 20, "@"
    AddReportColumn "Phase Out Month", "PhaseOutDate", 15, "mmm-yy"
End Sub

'---------------------------------------------------------------------------------
' Procedure : AddReportColumn
' Purpose   : A private helper function that creates a new cReportColumn object,
'             populates its properties, and adds it to the global collection.
' @param   : header As String - The text for the column header.
' @param   : prop As String - The corresponding property name in the cProductLifecycle class.
' @param   : width As Double - The desired column width.
' @param   : format As String - The Excel number format string.
'---------------------------------------------------------------------------------
Private Sub AddReportColumn(ByVal header As String, ByVal prop As String, ByVal width As Double, ByVal format As String)
    Dim col As cReportColumn
    Set col = New cReportColumn
    
    col.HeaderText = header
    col.SourceProperty = prop
    col.ColumnWidth = width
    col.NumberFormat = format
    
    gTierReportCols.Add col
End Sub

'---------------------------------------------------------------------------------
' Procedure : BuildCompositeKey
' Purpose   : Creates a standardized, pipe-delimited key from two string parts
'             for consistent use in dictionary lookups. Trims whitespace from parts.
' @param   : keyPart1 As String - The first component of the key (e.g., Affiliate).
' @param   : keyPart2 As String - The second component of the key (e.g., I-S-D).
' @return  : String - The combined composite key (e.g., "UK|12345").
'---------------------------------------------------------------------------------
Public Function BuildCompositeKey(ByVal keyPart1 As String, ByVal keyPart2 As String) As String
    Const SEPARATOR As String = "|"
    BuildCompositeKey = Trim$(keyPart1) & SEPARATOR & Trim$(keyPart2)
End Function

'---------------------------------------------------------------------------------
' Procedure : GetStatusString
' Purpose   : Converts a ProductStatus enum value into its user-friendly
'             string representation (e.g., psActive becomes "Active").
' @param   : enmStatus As ProductStatus - The enum value to convert.
' @return  : String - The text representation of the status.
'---------------------------------------------------------------------------------
Public Function GetStatusString(ByVal enmStatus As ProductStatus) As String
    Select Case enmStatus
        Case psActive: GetStatusString = "Active"
        Case psPhaseInOut: GetStatusString = "PhaseIn-PhaseOut"
        Case psDiscontinued: GetStatusString = "Discontinued"
        Case psNew: GetStatusString = "New"
        Case Else: GetStatusString = "Unknown"
    End Select
End Function
