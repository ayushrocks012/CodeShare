'@Folder("Forecasting")
Option Explicit

'================================================================================================
' Module:      mForecasting
' Purpose:     Main orchestrator for the forecasting process. It initializes the environment
'              and uses dedicated class objects to manage data, execute calculations,
'              and generate reports.
' Version:     42.2
' Author:      Ayush Goyal
' Date:        08-Jul-2025
'
' Change Log:
' V42.2:       - PERFORMANCE: Added Application.EnableEvents = False/True to the
'                main setup and finalization routines for a minor speed boost.
' V42.1:       - BUGFIX: Correctly configured the cCalculationEngine instance.
' V42.0:       - REFACTOR: Major architectural overhaul.
'================================================================================================

'--- Private Module-Level Variables ---
Private wbHost As Workbook
Private wsLog As Worksheet
Private lngWarningCount As Long

'================================================================================================
' 1. MAIN PUBLIC ORCHESTRATOR
'================================================================================================

'@Ignore UnusedMember
Public Sub UpdateForecast()
    Dim tStart As Double: tStart = Timer
    Dim dataManager As cDataManager
    
    If Not InitializeRun() Then GoTo Main_Exit
    
    Set dataManager = New cDataManager
    dataManager.Init wbHost, wsLog
    If Not dataManager.LoadAndProcessData() Then GoTo Main_Exit
    
    ProcessAllAffiliates dataManager
    
    lngWarningCount = dataManager.WarningCount
    
Main_Exit:
    FinalizeRun tStart
End Sub


'================================================================================================
' 2. CORE WORKFLOW STAGES
'================================================================================================

Private Function InitializeRun() As Boolean
    Dim tCheckpoint As Double: tCheckpoint = Timer
    On Error GoTo Init_ErrorHandler
    
    SetupApplication
    
    Set wbHost = ThisWorkbook
    InitializeAllConfigs
    lngWarningCount = 0
    
    Application.DisplayAlerts = False
    On Error Resume Next
    wbHost.Sheets(SHEET_LOG).Delete
    On Error GoTo Init_ErrorHandler
    Application.DisplayAlerts = True
    
    Set wsLog = wbHost.Sheets.Add(After:=wbHost.Sheets(wbHost.Sheets.Count))
    InitializeLogSheet wsLog
    
    LogPerformance tCheckpoint, "Initialize Environment"
    InitializeRun = True
    Exit Function

Init_ErrorHandler:
    MsgBox "A critical error occurred during initialization: " & Err.Description, vbCritical, "Initialization Failed"
    InitializeRun = False
End Function

Private Sub ProcessAllAffiliates(ByVal dataManager As cDataManager)
    Dim varAffiliate As Variant, strAffiliate As String
    Dim lngCounter As Long, lngTotal As Long
    Dim tCheckpoint As Double: tCheckpoint = Timer
    
    Dim engine As cCalculationEngine
    Set engine = New cCalculationEngine
    engine.AffiliateDim = CALC_AFFILIATE_DIM
    engine.TotalLevelDim = CALC_TOTAL_LEVEL_DIM
    engine.ShareLevelDim = CALC_SHARE_LEVEL_DIM
    engine.KeyFigureDim = CALC_KEY_FIGURE_DIM
    engine.Init dataManager.DemandDataArray, g_dsDemand.StartOfMonthsCol
    
    Dim reporter As cReportGenerator
    Set reporter = New cReportGenerator
    reporter.Init dataManager, wsLog, wbHost.Path
    
    lngTotal = dataManager.Affiliates.Count
    If lngTotal = 0 Then
        WriteToLog ltWarning, "ProcessAllAffiliates", "No affiliates found in Demand Forecast sheet."
        Exit Sub
    End If
    
    For Each varAffiliate In dataManager.Affiliates.Keys
        strAffiliate = CStr(varAffiliate)
        lngCounter = lngCounter + 1
        On Error GoTo Affiliate_ErrorHandler
        
        Application.StatusBar = "Processing Affiliate: " & strAffiliate & " (" & lngCounter & " of " & lngTotal & ")..."
        WriteToLog ltInfo, "ProcessAllAffiliates", "Starting: " & strAffiliate
        
        ProcessForecastForAffiliate strAffiliate, dataManager, engine, reporter
        
        GoTo Next_Affiliate
Affiliate_ErrorHandler:
        lngWarningCount = lngWarningCount + 1
        WriteToLog ltError, "ProcessAllAffiliates", "Critical error processing affiliate '" & strAffiliate & "'.", Err.Number, Err.Description
        Resume Next_Affiliate
Next_Affiliate:
        On Error GoTo 0
    Next varAffiliate
    
    LogPerformance tCheckpoint, "Process All Affiliates"
End Sub

Private Sub ProcessForecastForAffiliate(ByVal strAffiliate As String, ByVal dataManager As cDataManager, ByVal engine As cCalculationEngine, ByVal reporter As cReportGenerator)
    InitializeForecastValues strAffiliate, dataManager.ForecastItems
    ComputeBaseForecasts strAffiliate, dataManager, engine
    ApplySuccessorAdjustments strAffiliate, dataManager.ForecastItems
    reporter.GenerateAffiliateReport strAffiliate
End Sub

Private Sub FinalizeRun(ByVal tStart As Double)
    On Error Resume Next
    
    CleanupAllConfigs
    
    Application.StatusBar = False
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    Application.EnableEvents = True ' Re-enable events
    
    Dim strMessage As String
    strMessage = "Forecast process completed in " & Format$(Timer - tStart, "#,##0.00") & " seconds." & vbCrLf & vbCrLf
    strMessage = strMessage & "Warnings: " & lngWarningCount & " (see Log sheet for details)"
    
    MsgBox strMessage, IIf(lngWarningCount > 0, vbExclamation, vbInformation), "Forecast Update Complete"
    
    On Error GoTo 0
End Sub


'================================================================================================
' 3. FORECAST CALCULATION LOGIC
'================================================================================================

Private Sub InitializeForecastValues(ByVal strAffiliate As String, ByVal dictForecastItems As Object)
    Dim forecastItem As cForecastItem, itemKey As Variant
    For Each itemKey In dictForecastItems.Keys
        Set forecastItem = dictForecastItems.Item(itemKey)
        If forecastItem.Affiliate = strAffiliate Then
            Set forecastItem.ForecastValues = CreateObject("Scripting.Dictionary")
        End If
    Next itemKey
End Sub

Private Sub ComputeBaseForecasts(ByVal strAffiliate As String, ByVal dataManager As cDataManager, ByVal engine As cCalculationEngine)
    Dim forecastItem As cForecastItem, itemKey As Variant, keyFigure As Variant
    
    For Each itemKey In dataManager.ForecastItems.Keys
        Set forecastItem = dataManager.ForecastItems.Item(itemKey)
        If forecastItem.Affiliate = strAffiliate Then
            If DEBUG_MODE Then WriteToLog ltInfo, "ComputeBaseForecasts", "Processing: " & forecastItem.DebugSummary()
            For Each keyFigure In dataManager.KeyFigures.Keys
                engine.Execute forecastItem, CStr(keyFigure), dataManager.HistorySumCache, dataManager.DemandCache
            Next keyFigure
        End If
    Next itemKey
End Sub

Private Sub ApplySuccessorAdjustments(ByVal strAffiliate As String, ByVal dictForecastItems As Object)
    Dim affiliateItems As Object: Set affiliateItems = CreateObject("Scripting.Dictionary")
    Dim itemKey As Variant, forecastItem As cForecastItem
    
    For Each itemKey In dictForecastItems.Keys
        Set forecastItem = dictForecastItems.Item(itemKey)
        If forecastItem.Affiliate = strAffiliate Then affiliateItems.Add itemKey, forecastItem
    Next itemKey
    
    If affiliateItems.Count > 0 Then
        Dim lifecycleManager As cProductLifecycle
        Set lifecycleManager = New cProductLifecycle
        lifecycleManager.ProcessSuccessorTransfers affiliateItems
    End If
End Sub


'================================================================================================
' 4. UTILITY & HELPER FUNCTIONS
'================================================================================================

Private Sub SetupApplication()
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.Calculation = xlCalculationManual
    Application.EnableEvents = False ' Disable events for performance
End Sub

Private Sub InitializeLogSheet(ByVal ws As Worksheet)
    ws.Name = SHEET_LOG
    With ws.Range("A1:E1")
        .Value = Array("Timestamp", "Type", "Procedure", "Message", "Context / Error")
        .Font.Bold = True
    End With
    ws.Columns("A:E").AutoFit
End Sub

Private Sub WriteToLog(ByVal logType As logType, ByVal procedureName As String, ByVal message As String, Optional ByVal errNumber As Long = 0, Optional ByVal errContext As String = "")
    If wsLog Is Nothing Then Exit Sub
    Dim nextRow As Long: nextRow = wsLog.Cells(wsLog.Rows.Count, "A").End(xlUp).Row + 1
    With m_wsLog.Rows(nextRow)
        .Cells(1).Value = Now(): .Cells(2).Value = GetLogTypeString(logType)
        .Cells(3).Value = procedureName: .Cells(4).Value = message
        If errNumber <> 0 Then .Cells(5).Value = "Err " & errNumber & ": " & errContext Else .Cells(5).Value = errContext
    End With
End Sub

Private Sub LogPerformance(ByRef tCheckpoint As Double, ByVal strStageName As String)
    WriteToLog ltProfile, strStageName, "Stage completed in " & Format$(Timer - tCheckpoint, "#,##0.00") & "s"
    tCheckpoint = Timer
End Sub

Private Function GetLogTypeString(ByVal logType As logType) As String
    Select Case logType
        Case ltInfo: GetLogTypeString = "Info"
        Case ltWarning: GetLogTypeString = "Warning"
        Case ltError: GetLogTypeString = "Error"
        Case ltFatal: GetLogTypeString = "FATAL"
        Case ltProfile: GetLogTypeString = "Profile"
    End Select
End Function
