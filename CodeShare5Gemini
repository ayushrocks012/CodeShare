' --- Windows API Declaration for Sleep Function ---
#If VBA7 Then
    ' For 64-bit and 32-bit Office (VBA version 7+)
    Public Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As LongPtr)
#Else
    ' For 32-bit Office only (VBA version 6 and below)
    Public Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
#End If

Option Explicit

' --- Global Objects required by both Subs (or across multiple calls) ---
Public objGui      As GuiApplication ' SAP GUI Application object
Public objConn     As GuiConnection  ' SAP GUI Connection object
Public objSess     As GuiSession     ' SAP GUI Session object
Public objSBar     As GuiStatusbar   ' SAP GUI Statusbar object

Sub StartExtract()
    ' --- Constants specific to StartExtract ---
    Const cTARGET_SYSTEM As String = "PEA100"  ' <<< ADJUST: Your Target SAP System(Client)
    Const cMAX_SESSIONS As Integer = 6         ' Maximum allowed SAP sessions

    ' --- Local Variables for StartExtract ---
    Dim SapGuiAuto As Object          ' For GetObject("SAPGUI")
    Dim W_conn As Object              ' Temp Connection object in loop (use Object for GuiConnection)
    Dim W_Sess As Object              ' Temp Session object in loop (use Object for GuiSession)
    Dim W_Ret As Boolean              ' Flag indicating if a suitable session was found
    Dim Session_Nr As Long            ' Stores the session index found (-1 if not found)
    Dim Session_Nr_All As Long        ' Stores the number of sessions in the relevant connection
    Dim i As Long                     ' Loop counter for Connections
    Dim j As Long                     ' Loop counter for Sessions
    Dim MsgResult As VbMsgBoxResult   ' To store result from MsgBox calls

    On Error GoTo ErrorHandler ' Enable basic error handling

    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual

    W_Ret = False ' Initialize session found flag
    Session_Nr = -1 ' Initialize session number tracker
    Session_Nr_All = 0 ' Initialize session count

    ' Basic check if target system is defined
    If Trim$(cTARGET_SYSTEM) = "" Then
        MsgBox "Target SAP system constant (cTARGET_SYSTEM) is not defined.", vbCritical + vbOKOnly, "Configuration Error"
        GoTo Cleanup
    End If

    ' Check if a valid session object already exists globally and matches the target system
    If Not objSess Is Nothing Then
        If objSess.Info.SystemName & objSess.Info.Client = cTARGET_SYSTEM Then
            ' Check if the session is still alive (basic check)
            On Error Resume Next ' Temporarily ignore error if session is dead
            Dim currentTransaction As String
            currentTransaction = objSess.Info.Transaction
            If Err.Number = 0 Then ' If no error reading transaction, session is likely ok
                 On Error GoTo ErrorHandler ' Restore main error handling
                 ' Additionally check if status bar object is valid
                 If objSBar Is Nothing Then Set objSBar = objSess.FindById("wnd[0]/sbar")
                 W_Ret = True
                 GoTo RunScript ' Use existing session
            Else
                ' Session object exists but is likely invalid/closed, reset it
                Err.Clear
                On Error GoTo ErrorHandler ' Restore main error handling
                Set objSess = Nothing
                Set objConn = Nothing
                Set objSBar = Nothing
                ' Continue to find a new session
            End If
        Else
           ' Global objSess exists but is for a different system, reset it
            Set objSess = Nothing
            Set objConn = Nothing
            Set objSBar = Nothing
            ' Continue to find a new session
        End If
    End If

    ' Get SAP GUI Scripting Engine if not already available
    If objGui Is Nothing Then
        Set SapGuiAuto = GetObject("SAPGUI")
        If SapGuiAuto Is Nothing Then GoTo SapError ' Error if SAP GUI process not found
        Set objGui = SapGuiAuto.GetScriptingEngine
        If objGui Is Nothing Then GoTo SapError ' Error if Scripting Engine cannot be obtained
    End If

    ' Loop through connections and sessions to find a suitable one
    For i = 0 To objGui.Children.Count - 1
        Set W_conn = objGui.Children(i + 0) ' Get connection
        If Not W_conn Is Nothing Then
            Session_Nr_All = W_conn.Children.Count ' Get session count for this connection
            For j = 0 To W_conn.Children.Count - 1
                Set W_Sess = W_conn.Children(j + 0) ' Get session
                If Not W_Sess Is Nothing Then
                    If W_Sess.Info.SystemName & W_Sess.Info.Client = cTARGET_SYSTEM Then
                        ' Found the right system, check if it's a usable session (e.g., at main menu)
                        Select Case W_Sess.Info.Transaction
                            Case "SESSION_MANAGER", "SMEN", "S000" ' Add other idle TCodes if necessary
                                Session_Nr = W_Sess.Info.SessionNumber - 1 ' Store session index (0-based)
                                Set objConn = W_conn ' Set global Connection object
                                Set objSess = W_Sess ' Set global Session object
                                Set objSBar = objSess.FindById("wnd[0]/sbar") ' Set global Status Bar object
                                W_Ret = True
                                GoTo RunScript ' Found a suitable session, exit loops
                            Case Else
                                ' Session is for the correct system but busy or in an unknown state.
                        End Select
                    End If
                End If ' End W_Sess check
            Next j
        End If ' End W_conn check

        ' Check max sessions condition (simplified check based on finding the target system on this connection)
        If Session_Nr = -1 And Session_Nr_All = cMAX_SESSIONS Then
             Dim systemMatchFoundOnConn As Boolean: systemMatchFoundOnConn = False
             For j = 0 To W_conn.Children.Count - 1 ' Re-check sessions on *this* connection only
                 Set W_Sess = W_conn.Children(j + 0)
                 If Not W_Sess Is Nothing Then
                     If W_Sess.Info.SystemName & W_Sess.Info.Client = cTARGET_SYSTEM Then
                        systemMatchFoundOnConn = True: Exit For
                     End If
                 End If
             Next j
             If systemMatchFoundOnConn Then
                MsgResult = MsgBox("Maximum number of sessions (" & cMAX_SESSIONS & ") reached for system " & cTARGET_SYSTEM & " connection. Cannot continue.", vbCritical + vbOKOnly, "Session Limit Reached")
                GoTo Cleanup
             End If
        End If

    Next i

    ' If loop finishes and no suitable session found
    If Not W_Ret Then
        MsgResult = MsgBox("No suitable idle session found for system " & cTARGET_SYSTEM & "." & vbCrLf & _
                           "Please ensure you are logged into SAP, scripting is enabled, and a session is available at the main menu (SESSION_MANAGER, SMEN, S000).", vbCritical + vbOKOnly, "Session Not Found")
        GoTo Cleanup
    End If

RunScript:
    If W_Ret Then
        ' --- Call the actual SAP automation ---
        RunGUIScript
    End If

Cleanup:
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    Set SapGuiAuto = Nothing ' Release local object
    Set W_conn = Nothing     ' Release loop object
    Set W_Sess = Nothing     ' Release loop object
    Exit Sub ' Normal exit

ErrorHandler: ' Handle errors during setup
    MsgBox "An error occurred during SAP session setup:" & vbCrLf & vbCrLf & _
           "Error Number: " & Err.Number & vbCrLf & _
           "Description: " & Err.Description & vbCrLf & vbCrLf & _
           "Possible causes:" & vbCrLf & _
           "- SAP GUI is not running." & vbCrLf & _
           "- Scripting is disabled in SAP GUI options or by the server." & vbCrLf & _
           "- The SAP system (" & cTARGET_SYSTEM & ") is unavailable.", _
           vbCritical, "SAP Scripting Error"
    Resume Cleanup ' Go to cleanup routine after error

SapError: ' Specific error for GetObject/GetScriptingEngine failure
     MsgBox "Could not connect to SAP GUI Scripting Engine." & vbCrLf & _
            "Please ensure SAP GUI is running and scripting is enabled in RZ11 and SAP GUI Options.", _
            vbCritical, "SAP Scripting Error"
     Resume Cleanup ' Go to cleanup routine after error

End Sub

Public Sub RunGUIScript()
    ' --- Constants specific to RunGUIScript ---
    Const cTRANSACTION As String = "mb51"
    Const cPLANT As String = "1534"                                 ' <<< ADJUST: Your Plant Code
    Const cDATE_LOW As String = "01.03.2025"                        ' <<< ADJUST: Start Date (DD.MM.YYYY format expected by code)
    Const cDATE_HIGH As String = "31.03.2025"                       ' <<< ADJUST: End Date (DD.MM.YYYY format expected by code)
    Const cLAYOUT As String = "AYUSH_TRY"                           ' <<< ADJUST: Your ALV Layout Variant (leave "" for default)
    Const cDOWNLOAD_PATH As String = "Z:\Demand\Demand Review\2025\03 Mar 25\SAP H2H Report" ' <<< ADJUST: Ensure this folder exists
    Const cFILENAME_PREFIX As String = "MB51 Report"
    Const cFILENAME_EXTENSION As String = ".XLSX"                   ' Ensure extension matches download format (&XXL -> XLSX typically)
    Const cREPORT_EXEC_TIMEOUT_SECONDS As Long = 300                ' Timeout for main report execution (e.g., 300s = 5 min)
    Const cGRID_WAIT_TIMEOUT_SECONDS As Long = 60                   ' Timeout for waiting for result grid after execution (e.g., 60s = 1 min)
    Const cGRID_ID As String = "wnd[0]/usr/cntlGRID1/shellcont/shell" ' ID of the results grid control

    ' --- Local Variables for RunGUIScript ---
    Dim formattedDateLow As String
    Dim formattedDateHigh As String
    Dim formattedTimestamp As String
    Dim dynamicFilename As String
    Dim startTime As Single
    Dim success As Boolean
    Dim gridObject As Object ' For checking grid readiness

    On Error GoTo GuiScriptError ' Enable error handling for script steps

    ' Check if objSess and objSBar are valid before proceeding
    If objSess Is Nothing Then
        MsgBox "SAP Session object is not valid. Cannot run GUI script.", vbCritical, "Script Error": Exit Sub
    End If
    If objSBar Is Nothing Then ' Should be set by StartExtract, but double-check
       On Error Resume Next
       Set objSBar = objSess.FindById("wnd[0]/sbar")
       On Error GoTo GuiScriptError
       If objSBar Is Nothing Then MsgBox "SAP Status Bar object could not be found.", vbCritical, "Script Error": Exit Sub
    End If


    ' --- Prepare Dynamic Filename Parts ---
    ' Format dates from DD.MM.YYYY to YYYYMMDD for filename friendliness
    On Error Resume Next ' Handle potential errors if date constants are not in expected format
    formattedDateLow = Right$(cDATE_LOW, 4) & Mid$(cDATE_LOW, 4, 2) & Left$(cDATE_LOW, 2)
    formattedDateHigh = Right$(cDATE_HIGH, 4) & Mid$(cDATE_HIGH, 4, 2) & Left$(cDATE_HIGH, 2)
    If Err.Number <> 0 Then
        MsgBox "Could not parse dates (" & cDATE_LOW & ", " & cDATE_HIGH & ") for filename. Using placeholder.", vbExclamation, "Filename Warning"
        Err.Clear
        formattedDateLow = "DateFrom"
        formattedDateHigh = "DateTo"
    End If
    On Error GoTo GuiScriptError ' Restore error handling

    formattedTimestamp = Format$(Now, "yyyymmdd_hhmmss")
    dynamicFilename = cFILENAME_PREFIX & "_" & formattedDateLow & "-" & formattedDateHigh & "_" & formattedTimestamp & cFILENAME_EXTENSION

    ' --- SAP GUI Scripting Steps ---
    objSess.FindById("wnd[0]/tbar[0]/okcd").Text = cTRANSACTION
    objSess.FindById("wnd[0]").sendVKey 0 ' 0 = Enter key

    ' Wait briefly for the initial screen elements to load (optional)
    Sleep 500 ' Pause for 500 milliseconds

    ' --- Clear Material Fields ---
    On Error Resume Next ' Ignore error if fields don't exist on this screen variant
    objSess.FindById("wnd[0]/usr/ctxtMATNR-LOW").Text = ""
    objSess.FindById("wnd[0]/usr/ctxtMATNR-HIGH").Text = ""
    On Error GoTo GuiScriptError ' Restore default error handling

    ' --- Set Report Criteria ---
    objSess.FindById("wnd[0]/usr/ctxtWERKS-LOW").Text = cPLANT
    objSess.FindById("wnd[0]/usr/ctxtBUDAT-LOW").Text = cDATE_LOW
    objSess.FindById("wnd[0]/usr/ctxtBUDAT-HIGH").Text = cDATE_HIGH
    objSess.FindById("wnd[0]/usr/radRFLAT_L").Select ' Select 'Flat List' radiobutton
    If Trim$(cLAYOUT) <> "" Then ' Only set layout if constant is not empty
      objSess.FindById("wnd[0]/usr/ctxtALV_DEF").Text = cLAYOUT ' Set Layout
    End If

    ' --- Execute Report ---
    objSess.FindById("wnd[0]/tbar[1]/btn[8]").press ' 8 = Execute button (F8)

    ' --- Wait for Report Execution (Primary Wait using objSess.Busy) ---
    ' Debug.Print Format(Now, "hh:nn:ss") & " - Waiting for objSess.Busy to be false..." ' Optional debug message
    startTime = Timer ' Record start time for timeout
    Do While objSess.Busy
        DoEvents ' Keep Excel responsive
        Sleep 500 ' Pause VBA for 500ms to yield to SAP, reduce CPU usage
        If Timer - startTime > cREPORT_EXEC_TIMEOUT_SECONDS Then
            MsgBox "The report execution timed out after " & cREPORT_EXEC_TIMEOUT_SECONDS & " seconds (while checking objSess.Busy).", vbCritical, "Timeout Error"
            On Error Resume Next ' Try to safely navigate back
            objSess.FindById("wnd[0]/tbar[0]/btn[15]").press ' Try Back
            Exit Sub ' Exit the script after timeout error
        End If
    Loop
    ' Debug.Print Format(Now, "hh:nn:ss") & " - objSess.Busy is false." ' Optional debug message
    Sleep 500 ' Short pause after Busy=False before proceeding


    ' --- Wait for Grid Control (Secondary Wait - More Granular) ---
    ' Debug.Print Format(Now, "hh:nn:ss") & " - Waiting for Grid Control..." ' Optional debug message
    startTime = Timer ' Reset timer for this specific wait
    Do
        Set gridObject = Nothing ' Reset object variable
        On Error Resume Next ' Check if FindById works without error
        Set gridObject = objSess.FindById(cGRID_ID)
        On Error GoTo GuiScriptError ' Restore error handling

        If Not gridObject Is Nothing Then Exit Do ' Grid found, proceed

        ' Optional: Check status bar for specific completion messages here as well
        ' Dim currentStatus As String: currentStatus = objSBar.Text
        ' If InStr(currentStatus, "some completion message") > 0 Then Exit Do

        DoEvents
        Sleep 250 ' Wait a bit longer
        If Timer - startTime > cGRID_WAIT_TIMEOUT_SECONDS Then
             MsgBox "Timeout waiting for results grid (" & cGRID_ID & ") to become available after report execution.", vbCritical, "Timeout Error"
             On Error Resume Next ' Attempt to go back
             objSess.FindById("wnd[0]/tbar[0]/btn[15]").press ' Try Back
             Exit Sub
        End If
    Loop
    ' Debug.Print Format(Now, "hh:nn:ss") & " - Grid Control Found. Proceeding with export." ' Optional debug message


    ' --- Export to Excel ---
    success = False ' Flag to track export success
    On Error Resume Next ' Temporarily ignore errors during export steps to allow cleanup
    gridObject.ContextMenu ' Use the object we already found
    gridObject.SelectContextMenuItem "&XXL" ' Spreadsheet...
    ' Or if using FindById directly:
    ' objSess.FindById(cGRID_ID).ContextMenu
    ' objSess.FindById(cGRID_ID).SelectContextMenuItem "&XXL"
    If Err.Number <> 0 Then GoTo ExportError ' Jump if context menu failed

    ' --- Handle Export Dialog (wnd[1]) ---
    Sleep 500 ' Brief pause for dialog to appear
    objSess.FindById("wnd[1]/tbar[0]/btn[0]").press ' Continue (Enter) button on format selection
    If Err.Number <> 0 Then GoTo ExportError ' Jump if format selection failed

    ' --- Handle File Save Dialog (wnd[1] again) ---
    Sleep 500 ' Brief pause for dialog to appear
    objSess.FindById("wnd[1]/usr/ctxtDY_PATH").Text = cDOWNLOAD_PATH
    If Err.Number <> 0 Then GoTo ExportError ' Jump if path field not found
    objSess.FindById("wnd[1]/usr/ctxtDY_FILENAME").Text = dynamicFilename ' Use the dynamic filename
    If Err.Number <> 0 Then GoTo ExportError ' Jump if filename field not found
    objSess.FindById("wnd[1]/tbar[0]/btn[0]").press ' Generate/Save button (Check ID: btn[0] or btn[11] for Replace?)
    If Err.Number <> 0 Then GoTo ExportError ' Jump if save button failed

    ' Optional: Handle potential "File already exists - Replace?" dialog (often wnd[2], button btn[0])
    ' Sleep 1000 ' Wait for potential overwrite prompt
    ' If objSess.ActiveWindow.Name = "wnd[2]" Then ' Check if popup exists
    '     objSess.FindById("wnd[2]/tbar[0]/btn[0]").press ' Press "Yes" or equivalent button
    '     If Err.Number <> 0 Then Debug.Print "Error pressing button on wnd[2]" ' Log if fails
    ' End If

    success = True ' Mark export as potentially successful if no error so far

ExportError:
    On Error GoTo GuiScriptError ' Restore main error handling
    If Not success And Err.Number <> 0 Then ' If flag not set AND an error occurred during export attempt
         MsgBox "An error occurred during the export process." & vbCrLf & vbCrLf & _
                "Error: " & Err.Description & " (" & Err.Number & ")" & vbCrLf & vbCrLf & _
                "Please check if the report generated data and the path '" & cDOWNLOAD_PATH & "' is accessible/writable.", vbExclamation, "Export Warning"
         Err.Clear ' Clear the error since we handled it with a message
         ' Continue to navigate back even if export failed
    ElseIf Not success Then ' Flag not set, but no specific error caught (might mean logic jumped over steps)
         MsgBox "The export process did not complete successfully (no specific error caught).", vbExclamation, "Export Warning"
    End If


    ' --- Navigate Back (always attempt this) ---
    ' Debug.Print Format(Now, "hh:nn:ss") & " - Navigating back..." ' Optional debug message
    On Error Resume Next ' Ignore errors during back navigation
    objSess.FindById("wnd[0]/tbar[0]/btn[15]").press ' 15 = Back button (F3)
    Sleep 250
    objSess.FindById("wnd[0]/tbar[0]/btn[15]").press ' Press Back again
    On Error GoTo GuiScriptError ' Restore main error handler

    ' Debug.Print Format(Now, "hh:nn:ss") & " - Script finished." ' Optional debug message
    Exit Sub ' Normal exit

GuiScriptError:
    MsgBox "An critical error occurred during SAP GUI script execution:" & vbCrLf & vbCrLf & _
           "Error Number: " & Err.Number & vbCrLf & _
           "Description: " & Err.Description & vbCrLf & vbCrLf & _
           "Check SAP screen state and script logic.", _
           vbCritical, "SAP Scripting Error"
    ' Attempt to safely navigate back from common windows
    On Error Resume Next ' Prevent error loop if cleanup fails
    If Not objSess Is Nothing Then
       Select Case objSess.ActiveWindow.Name
         Case "wnd[0]", "wnd[1]", "wnd[2]" ' Check if active window is one we might be stuck in
            objSess.FindById("wnd[0]/tbar[0]/btn[15]").press ' Try Back from main window context
         Case Else
            ' Could add logic for other specific windows if needed
       End Select
    End If
    On Error GoTo 0 ' Disable error handling within the handler
    ' Consider adding Application.ScreenUpdating = True here if exiting prematurely
End Sub
