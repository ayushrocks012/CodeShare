'@Folder("Forecasting")
Option Explicit

' =================================================================================================================
' --- STANDARD MODULE CODE ---
' The code below goes into a standard module.
' =================================================================================================================
' --- MODULE-LEVEL CONSTANTS ---
Private Const MAIN_SHEET As String = "Main"
Private Const STATUS_SHEET As String = "Product Status"
Private Const DEMAND_SHEET As String = "Demand Forecast"
Private Const HISTORY_SHEET As String = "Historical Sales"
Private Const SUMMARY_SHEET As String = "Summary"
Private Const LOG_SHEET As String = "Log"

' --- PRODUCT STATUSES ---
Private Const STATUS_ACTIVE As String = "Active"
Private Const STATUS_PHASE_IN_OUT As String = "PhaseIn-PhaseOut"
Private Const STATUS_DISCONTINUED As String = "Discontinued"
Private Const STATUS_NEW As String = "New"
Private Const STATUS_UNKNOWN As String = "Unknown"


' =================================================================================================================
' Main Procedure: UpdateForeCast_Click
' =================================================================================================================
Public Sub UpdateForeCast_Click() 'NOTE: This is intentionally Public to be called from a button.
    ' --- 1. SETUP & INITIALIZATION ---
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.Calculation = xlCalculationManual
    Application.StatusBar = "Initializing forecast process..."

    Dim TWB As Workbook
    Dim MainSheet As Worksheet, WS_ProductStatus As Worksheet
    Dim WS_DemandForecast As Worksheet, WS_HistoricalSales As Worksheet, WS_Log As Worksheet

    Set TWB = ThisWorkbook
    On Error Resume Next
    Set MainSheet = TWB.Sheets(MAIN_SHEET)
    Set WS_ProductStatus = TWB.Sheets(STATUS_SHEET)
    Set WS_DemandForecast = TWB.Sheets(DEMAND_SHEET)
    Set WS_HistoricalSales = TWB.Sheets(HISTORY_SHEET)
    On Error GoTo 0

    If MainSheet Is Nothing Or WS_ProductStatus Is Nothing Or WS_DemandForecast Is Nothing Or WS_HistoricalSales Is Nothing Then
        MsgBox "One of the required worksheets ('" & MAIN_SHEET & "', '" & STATUS_SHEET & "', '" & DEMAND_SHEET & "', '" & HISTORY_SHEET & "') is missing. Aborting.", vbCritical
        GoTo Cleanup
    End If
    
    ' --- Create Log sheet ---
    On Error Resume Next
    TWB.Sheets(LOG_SHEET).Delete
    On Error GoTo 0
    Set WS_Log = TWB.Sheets.Add(After:=TWB.Sheets(TWB.Sheets.Count))
    InitializeLogSheet WS_Log

    ' --- 2. LOAD ALL DATA INTO MEMORY ONCE ---
    Application.StatusBar = "Loading all data into memory..."
    Dim AllStatusData As Variant, AllHistoryData As Variant, AllDemandData As Variant
    AllStatusData = LoadDataToArray(WS_ProductStatus)
    AllHistoryData = LoadDataToArray(WS_HistoricalSales)
    AllDemandData = LoadDataToArray(WS_DemandForecast)
    
    ' --- 3. GET UNIQUE LIST OF AFFILIATES ---
    Dim Affiliates As Object, Affiliate As Variant
    Set Affiliates = GetUniqueValues(AllDemandData, 1)

    ' --- 4. START MULTI-AFFILIATE PROCESSING LOOP ---
    For Each Affiliate In Affiliates.Keys
        Application.StatusBar = "Processing Affiliate: " & Affiliate & "..."
        
        ' --- A. CLEAN UP SHEETS from previous loop run ---
        CleanUpAffiliateSheets TWB, Affiliate
        
        ' --- B. CREATE SUMMARY SHEET for the current affiliate ---
        Dim WS_Summary As Worksheet
        Set WS_Summary = TWB.Sheets.Add(After:=TWB.Sheets(TWB.Sheets.Count))
        WS_Summary.Name = SanitizeSheetName(Affiliate & "_" & SUMMARY_SHEET)
        
        ' --- C. FILTER DATA for the current affiliate ---
        Dim StatusData As Variant, HistoryData As Variant, DemandData As Variant
        StatusData = FilterDataByColumn(AllStatusData, 1, Affiliate)
        HistoryData = FilterDataByColumn(AllHistoryData, 1, Affiliate)
        DemandData = FilterDataByColumn(AllDemandData, 1, Affiliate)
        
        If Not IsEmpty(StatusData) Then
            ' --- D. CORE PROCESSING FOR THIS AFFILIATE ---
            Dim LifecycleMap As Object
            Set LifecycleMap = BuildLifecycleMap(StatusData, WS_Log)

            Application.StatusBar = "Creating family sheets for " & Affiliate & "..."
            CreateFamilySheets TWB, Affiliate, StatusData, DemandData, WS_Summary

            Application.StatusBar = "Processing forecast data for " & Affiliate & "..."
            ProcessForecastData TWB, Affiliate, StatusData, HistoryData, DemandData, WS_Summary, WS_Log, LifecycleMap
            
            ' --- E. FINALIZATION FOR THIS AFFILIATE ---
            Application.StatusBar = "Creating report workbook for " & Affiliate & "..."
            Dim NewWB As Workbook
            Set NewWB = CreateOutputWorkbook(TWB, Affiliate, WS_Summary)
            
            If Not NewWB Is Nothing Then
                Application.StatusBar = "Saving report for " & Affiliate & "..."
                Dim FilePath As String
                FilePath = TWB.Path & "\Demand ForeCast - " & Affiliate & " - " & Format$(Now, "DDMMYYYY_HHMMSS") & ".xlsx"
                NewWB.SaveAs FilePath
                NewWB.Close SaveChanges:=False
                Set NewWB = Nothing
            End If
        Else
             WriteToLog WS_Log, "Skipped", "No data found for affiliate: " & Affiliate
        End If
        
        ' --- F. FINAL CLEANUP FOR THIS AFFILIATE'S SHEETS ---
        CleanUpAffiliateSheets TWB, Affiliate
        
    Next Affiliate
    
' --- 5. FINAL SCRIPT CLEANUP ---
Cleanup:
    Application.StatusBar = False
    Application.Calculation = xlCalculationAutomatic
    If Not MainSheet Is Nothing Then MainSheet.Activate
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    MsgBox "Forecast Update Completed for all affiliates.", vbInformation
End Sub

' =================================================================================================================
' Helper Procedure: CreateFamilySheets
' =================================================================================================================
Private Sub CreateFamilySheets(ByVal TWB As Workbook, ByVal AffiliateName As String, ByVal StatusData As Variant, ByVal DemandData As Variant, ByVal WS_Summary As Worksheet)
    Dim DemandForecastLRow As Long, ProductStatusLRow As Long
    Dim CurrFamilyRow As Long, CurrProductRow As Long
    Dim CurrFamily As String, CurrProductFamily As String
    Dim WS_NewFamily As Worksheet

    DemandForecastLRow = UBound(DemandData, 1)
    ProductStatusLRow = UBound(StatusData, 1)
    
    SetupSummaryHeaders WS_Summary, StatusData

    For CurrFamilyRow = 2 To DemandForecastLRow
        CurrFamily = Trim$(DemandData(CurrFamilyRow, 2))
        
        If Len(CurrFamily) > 0 Then
            Dim FamilySheetName As String
            ' *** MODIFIED: Sanitize the sheet name to prevent errors ***
            FamilySheetName = SanitizeSheetName(AffiliateName & "_" & CurrFamily)
            
            On Error Resume Next
            TWB.Sheets(FamilySheetName).Delete
            On Error GoTo 0
            
            Set WS_NewFamily = TWB.Sheets.Add(After:=TWB.Sheets(TWB.Sheets.Count))
            WS_NewFamily.Name = FamilySheetName
            
            ' Headers now have an Affiliate column. Indices are shifted by 1.
            WS_NewFamily.Range("A1:F1").Value = Array(StatusData(1, 1), StatusData(1, 2), StatusData(1, 3), StatusData(1, 4), StatusData(1, 5), StatusData(1, 6))
            WS_NewFamily.Range("G1").Value = "Active/Discontinued"
            WS_NewFamily.Range("H1").Value = "Phase Out Month"
            
            Dim NextFreeRow As Long: NextFreeRow = 2
            For CurrProductRow = 2 To ProductStatusLRow
                CurrProductFamily = LCase$(Trim$(StatusData(CurrProductRow, 2)))
                If CurrProductFamily = LCase$(CurrFamily) Then
                    WS_NewFamily.Range("A" & NextFreeRow & ":F" & NextFreeRow).Value = Array(StatusData(CurrProductRow, 1), StatusData(CurrProductRow, 2), StatusData(CurrProductRow, 3), StatusData(CurrProductRow, 4), StatusData(CurrProductRow, 5), StatusData(CurrProductRow, 6))
                    NextFreeRow = NextFreeRow + 1
                End If
            Next CurrProductRow
        End If
    Next CurrFamilyRow
End Sub

' =================================================================================================================
' Helper Procedure: SetupSummaryHeaders
' =================================================================================================================
Private Sub SetupSummaryHeaders(ByVal WS_Summary As Worksheet, ByVal StatusData As Variant)
    WS_Summary.Range("A1:F1").Value = Array(StatusData(1, 1), StatusData(1, 2), StatusData(1, 3), StatusData(1, 4), StatusData(1, 5), StatusData(1, 6))
    WS_Summary.Range("G1").Value = "Active/Discontinued"
    WS_Summary.Range("H1").Value = "Phase Out Month"
End Sub

' =================================================================================================================
' Helper Procedure: ProcessForecastData
' =================================================================================================================
Private Sub ProcessForecastData(ByVal TWB As Workbook, ByVal AffiliateName As String, ByVal StatusData As Variant, ByVal HistoryData As Variant, ByVal DemandData As Variant, ByVal WS_Summary As Worksheet, ByVal WS_Log As Worksheet, ByVal LifecycleMap As Object)
    Dim WS_CurrentFamily As Worksheet, CurrFamily As String, DemandForecastLRow As Long, CurrFamilyRow As Long
    DemandForecastLRow = UBound(DemandData, 1)

    For CurrFamilyRow = 2 To DemandForecastLRow
        CurrFamily = Trim$(DemandData(CurrFamilyRow, 2))
        Dim FamilySheetName As String
        ' *** MODIFIED: Sanitize the sheet name here as well to ensure it matches ***
        FamilySheetName = SanitizeSheetName(AffiliateName & "_" & CurrFamily)
        
        Application.StatusBar = "Processing family: " & CurrFamily & " for " & AffiliateName & "..."
        
        If SheetExists(TWB, FamilySheetName) Then
            Set WS_CurrentFamily = TWB.Sheets(FamilySheetName)
            CalculateAndFormatFamilySheet WS_CurrentFamily, StatusData, HistoryData, DemandData, WS_Log, LifecycleMap
            AppendToSummarySheet WS_CurrentFamily, WS_Summary
            Set WS_CurrentFamily = Nothing
        End If
    Next CurrFamilyRow
End Sub

' =================================================================================================================
' Helper Procedure: CalculateAndFormatFamilySheet
' =================================================================================================================
Private Sub CalculateAndFormatFamilySheet(ByVal WS_CurrentFamily As Worksheet, ByVal StatusData As Variant, ByVal HistoryData As Variant, ByVal DemandData As Variant, ByVal WS_Log As Worksheet, ByVal LifecycleMap As Object)
    Dim FamilyLRow As Long, HistLCol As Long, MonthCount As Long, DemandForecastLCol As Long
    
    ' Get historical month count relative to this affiliate's demand data
    ' Demand data now starts in column C (index 3), since A=Affiliate, B=Family
    MonthCount = GetHistoricalMonthCount(DemandData, HistoryData, 3)
    
    ' Prepare headers
    DemandForecastLCol = UBound(DemandData, 2)
    Dim HeaderRow As Variant
    HeaderRow = GetCombinedHeaderRow(DemandData, HistoryData, MonthCount, DemandForecastLCol)
    
    AddNewProductsToFamilySheet WS_CurrentFamily, StatusData
    FamilyLRow = WS_CurrentFamily.Cells(WS_CurrentFamily.Rows.Count, "A").End(xlUp).Row
    
    Dim OutputArray() As Variant
    ReDim OutputArray(1 To FamilyLRow, 1 To UBound(HeaderRow))
    
    Dim r As Long, c As Long
    For c = 1 To UBound(HeaderRow): OutputArray(1, c) = HeaderRow(c): Next c
    For r = 2 To FamilyLRow
        For c = 1 To 6 ' A to F
            OutputArray(r, c) = WS_CurrentFamily.Cells(r, c).Value
        Next c
    Next r
    
    HistLCol = 8 + MonthCount ' Historical columns start after H
    
    For r = 2 To FamilyLRow
        Dim CurrAffiliate As String, CurrProductFamily As String, CurrGroupID As String, CurrProduct As String
        CurrAffiliate = OutputArray(r, 1)
        CurrProductFamily = OutputArray(r, 2)
        CurrGroupID = OutputArray(r, 3)
        CurrProduct = OutputArray(r, 6) ' I-S-D is now in Col F
        
        Dim CurrentLifecycle As cProductLifecycle
        If LifecycleMap.Exists(CurrProduct) Then Set CurrentLifecycle = LifecycleMap.Item(CurrProduct) Else Set CurrentLifecycle = New cProductLifecycle
        
        OutputArray(r, 7) = CurrentLifecycle.Status
        If CurrentLifecycle.PhaseOutDate > 0 Then OutputArray(r, 8) = CurrentLifecycle.PhaseOutDate
        
        Dim HistoricSalesRow As Variant
        HistoricSalesRow = GetHistoricalDataRow(CurrProduct, HistoryData, MonthCount + 6)
        For c = 1 To UBound(HistoricSalesRow): OutputArray(r, c + 8) = HistoricSalesRow(c): Next c
        
        Dim ProdGroupSum As Double, FamilySum As Double
        ProdGroupSum = GetHistoricalSum(CurrAffiliate, CurrProductFamily, CurrGroupID, HistoryData, MonthCount + 6)
        FamilySum = GetHistoricalFamilySum(CurrAffiliate, CurrProductFamily, HistoryData, LifecycleMap, MonthCount + 6)
        
        Dim DemandDataRow As Long, i As Long
        DemandDataRow = 0
        For i = 2 To UBound(DemandData, 1)
            If DemandData(i, 2) = CurrProductFamily Then
                DemandDataRow = i
                Exit For
            End If
        Next i
        
        If DemandDataRow > 0 Then
            For c = (HistLCol + 1) To UBound(OutputArray, 2)
                Dim ForecastValue As Double, FamilyDemand As Double
                FamilyDemand = DemandData(DemandDataRow, (c - HistLCol) + 2)
                ForecastValue = CalculateForecastValue(CurrentLifecycle, OutputArray(1, c), ProdGroupSum, FamilySum, FamilyDemand)
                OutputArray(r, c) = ForecastValue
            Next c
        End If
    Next r
    
    WS_CurrentFamily.Cells.Clear
    WS_CurrentFamily.Range("A1").Resize(UBound(OutputArray, 1), UBound(OutputArray, 2)).Value = OutputArray
    
    FormatEnhancedSheet WS_CurrentFamily
End Sub


' =================================================================================================================
' Helper Function: CalculateForecastValue
' =================================================================================================================
Private Function CalculateForecastValue(ByVal Lifecycle As cProductLifecycle, ByVal ForecastDate As Date, ByVal ProdGroupSum As Double, ByVal FamilySum As Double, ByVal FamilyDemand As Double) As Double
    Dim BaseForecast As Double: BaseForecast = 0
    If FamilySum > 0 Then BaseForecast = (ProdGroupSum * FamilyDemand) / FamilySum

    Dim FinalForecast As Double: FinalForecast = 0

    Select Case Lifecycle.Status
        Case STATUS_ACTIVE, STATUS_NEW
            FinalForecast = BaseForecast
        Case STATUS_PHASE_IN_OUT
            If Lifecycle.PhaseOutDate > 0 And ForecastDate >= Lifecycle.PhaseOutDate Then
                If Month(ForecastDate) = Month(Lifecycle.PhaseOutDate) And Year(ForecastDate) = Year(Lifecycle.PhaseOutDate) Then
                    FinalForecast = BaseForecast * Lifecycle.PhaseOutPercent
                Else
                    FinalForecast = 0
                End If
            Else
                FinalForecast = BaseForecast
            End If
        Case STATUS_DISCONTINUED
             If Lifecycle.PhaseOutDate > 0 And ForecastDate >= Lifecycle.PhaseOutDate Then FinalForecast = 0 Else FinalForecast = BaseForecast
    End Select

    If Lifecycle.IsPhasingIn Then
        If ForecastDate < Lifecycle.PhaseInDate Then
            FinalForecast = 0
        ElseIf Month(ForecastDate) = Month(Lifecycle.PhaseInDate) And Year(ForecastDate) = Year(Lifecycle.PhaseInDate) Then
            FinalForecast = BaseForecast * Lifecycle.PhaseInPercent
        End If
    End If

    CalculateForecastValue = FinalForecast
End Function

' =================================================================================================================
' Helper Procedure: AddNewProductsToFamilySheet
' =================================================================================================================
Private Sub AddNewProductsToFamilySheet(ByVal WS_CurrentFamily As Worksheet, ByVal StatusData As Variant)
    Dim ProductStatusLRow As Long, FamilyLRow As Long, CurrProdRow As Long
    Dim CurrProduct As String, CurrProductFamily As String, ActiveType As String
    ProductStatusLRow = UBound(StatusData, 1)
    
    For CurrProdRow = 2 To ProductStatusLRow
        CurrProductFamily = LCase$(Trim$(StatusData(CurrProdRow, 2))) ' Family is Col B
        ActiveType = Trim$(StatusData(CurrProdRow, 7)) ' Status is Col G
        CurrProduct = Trim$(StatusData(CurrProdRow, 6)) ' I-S-D is Col F
        
        ' *** MODIFIED: Get the original family name from the sanitized sheet name ***
        Dim OriginalFamilyName As String
        OriginalFamilyName = Split(WS_CurrentFamily.Name, "_")(1)
        
        If CurrProductFamily = LCase$(OriginalFamilyName) And ActiveType = STATUS_NEW Then
            Dim Found As Range
            Set Found = WS_CurrentFamily.Range("F:F").Find(What:=CurrProduct, LookIn:=xlValues, LookAt:=xlWhole)
            If Found Is Nothing Then
                FamilyLRow = WS_CurrentFamily.Cells(WS_CurrentFamily.Rows.Count, "A").End(xlUp).Row + 1
                WS_CurrentFamily.Range("A" & FamilyLRow & ":F" & FamilyLRow).Value = Array(StatusData(CurrProdRow, 1), StatusData(CurrProdRow, 2), StatusData(CurrProdRow, 3), StatusData(CurrProdRow, 4), StatusData(CurrProdRow, 5), StatusData(CurrProdRow, 6))
            End If
        End If
    Next CurrProdRow
End Sub

' =================================================================================================================
' Helper Procedure: FormatEnhancedSheet
' =================================================================================================================
Private Sub FormatEnhancedSheet(ByVal WS As Worksheet)
    If WS.Cells(1, 1).Value = "" Then Exit Sub

    Dim LastRow As Long, LastCol As Long, TotalRow As Long, i As Long, r As Long
    
    LastRow = WS.Cells(WS.Rows.Count, "A").End(xlUp).Row
    LastCol = WS.Cells(1, WS.Columns.Count).End(xlToLeft).Column
    TotalRow = LastRow + 1

    ' Data starts in column I (index 9)
    For i = 9 To LastCol
        WS.Cells(TotalRow, i).Value = Application.WorksheetFunction.Sum(WS.Range(WS.Cells(2, i), WS.Cells(LastRow, i)))
    Next i
    WS.Cells(TotalRow, 1).Value = "TOTAL"

    Dim HeaderRange As Range, DataRange As Range, TotalRange As Range, FullRange As Range
    Set HeaderRange = WS.Range(WS.Cells(1, 1), WS.Cells(1, LastCol))
    Set DataRange = WS.Range(WS.Cells(2, 1), WS.Cells(LastRow, LastCol))
    Set TotalRange = WS.Range(WS.Cells(TotalRow, 1), WS.Cells(TotalRow, LastCol))
    Set FullRange = WS.Range(WS.Cells(1, 1), WS.Cells(TotalRow, LastCol))
    
    FullRange.Interior.ColorIndex = xlNone
    FullRange.Borders.LineStyle = xlNone
    FullRange.Font.Bold = False
    
    With HeaderRange
        .Font.Bold = True
        .Font.Color = vbWhite
        .Interior.Color = RGB(47, 85, 151)
        .VerticalAlignment = xlCenter
    End With
    
    With TotalRange
        .Font.Bold = True
        .Interior.Color = RGB(221, 235, 247)
    End With
    
    For r = 2 To LastRow
        If r Mod 2 = 0 Then
            WS.Range(WS.Cells(r, 1), WS.Cells(r, LastCol)).Interior.Color = RGB(242, 242, 242)
        End If
    Next r
    
    Dim HistLCol As Long
    HistLCol = GetLastHistoricalColumn(WS)
    If HistLCol > 8 Then
        WS.Range(WS.Cells(2, 9), WS.Cells(LastRow, HistLCol)).Interior.Color = RGB(220, 220, 220)
        With WS.Range(WS.Cells(1, HistLCol), WS.Cells(TotalRow, HistLCol)).Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .Color = RGB(47, 85, 151)
            .Weight = xlMedium
        End With
    End If
    
    FullRange.Borders.LineStyle = xlContinuous
    FullRange.Borders.Weight = xlThin
    FullRange.Borders.Color = RGB(210, 210, 210)
    
    WS.Range(WS.Cells(2, 9), WS.Cells(TotalRow, LastCol)).NumberFormat = "_(* #,##0_);_(* (#,##0);_(* ""-""??_);_(@_)"
    WS.Range(WS.Cells(1, 9), WS.Cells(1, LastCol)).NumberFormat = "mmm-yy"
    
    WS.Cells.EntireColumn.AutoFit
    WS.Activate
    WS.Range("A2").Select
    ActiveWindow.FreezePanes = True
End Sub


' =================================================================================================================
' Helper Procedure: AppendToSummarySheet
' =================================================================================================================
Private Sub AppendToSummarySheet(ByVal WS_Family As Worksheet, ByVal WS_Summary As Worksheet)
    Dim FamilyLRow As Long, FamilyLCol As Long, SummaryLRow As Long
    
    FamilyLRow = WS_Family.Cells(WS_Family.Rows.Count, "A").End(xlUp).Row - 1
    If FamilyLRow < 2 Then Exit Sub
    
    FamilyLCol = WS_Family.Cells(1, WS_Family.Columns.Count).End(xlToLeft).Column
    SummaryLRow = WS_Summary.Cells(WS_Summary.Rows.Count, "A").End(xlUp).Row
    
    ' Data headers start at column I (index 9)
    If IsEmpty(WS_Summary.Range("I1").Value) Then
        WS_Family.Range("I1", WS_Family.Cells(1, FamilyLCol)).Copy WS_Summary.Range("I1")
    End If
    
    Dim FamilyData As Variant
    FamilyData = WS_Family.Range("A2", WS_Family.Cells(FamilyLRow, FamilyLCol)).Value
    WS_Summary.Range("A" & SummaryLRow + 1).Resize(UBound(FamilyData, 1), UBound(FamilyData, 2)).Value = FamilyData
End Sub

' =================================================================================================================
' Lifecycle Mapping Function (In-Memory)
' =================================================================================================================
Private Function BuildLifecycleMap(ByVal StatusData As Variant, ByVal WS_Log As Worksheet) As Object
    Dim r As Long, ProductID As String, productKey As Variant
    Dim TempLifecycle As cProductLifecycle
    Dim LifecycleDict As Object: Set LifecycleDict = CreateObject("Scripting.Dictionary")
    
    For r = 2 To UBound(StatusData, 1)
        ProductID = Trim$(StatusData(r, 6)) ' I-S-D is now Col F
        If Len(ProductID) > 0 And Not LifecycleDict.Exists(ProductID) Then
            Set TempLifecycle = New cProductLifecycle
            With TempLifecycle
                .ProductID = ProductID
                .Status = Trim$(StatusData(r, 7)) ' Status is Col G
                Dim PhaseOutDate As Variant: PhaseOutDate = StatusData(r, 8) ' Date is Col H
                Dim PhaseOutPercent As Variant: PhaseOutPercent = StatusData(r, 9) ' Percent is Col I
                .SupersededByProductID = Trim$(StatusData(r, 10)) ' Superseded is Col J

                If .Status = STATUS_PHASE_IN_OUT Or .Status = STATUS_DISCONTINUED Then
                    .IsPhasingOut = True
                    If IsDate(PhaseOutDate) Then .PhaseOutDate = CDate(PhaseOutDate)
                    If IsNumeric(PhaseOutPercent) Then .PhaseOutPercent = CDbl(PhaseOutPercent)
                End If
            End With
            LifecycleDict.Add ProductID, TempLifecycle
        End If
    Next r

    For Each productKey In LifecycleDict.Keys
        Set TempLifecycle = LifecycleDict.Item(productKey)
        If TempLifecycle.IsPhasingOut And Len(TempLifecycle.SupersededByProductID) > 0 Then
            If LifecycleDict.Exists(TempLifecycle.SupersededByProductID) Then
                Dim SuccessorLifecycle As cProductLifecycle
                Set SuccessorLifecycle = LifecycleDict.Item(TempLifecycle.SupersededByProductID)
                With SuccessorLifecycle
                    .IsPhasingIn = True
                    .ReplacesProductID = TempLifecycle.ProductID
                    .PhaseInDate = TempLifecycle.PhaseOutDate
                    .PhaseInPercent = 1 - TempLifecycle.PhaseOutPercent
                End With
            Else
                WriteToLog WS_Log, "Warning", "Product '" & TempLifecycle.ProductID & "' is set to be superseded by '" & TempLifecycle.SupersededByProductID & "', but the successor product was not found in '" & STATUS_SHEET & "'."
            End If
        End If
    Next productKey

    Set BuildLifecycleMap = LifecycleDict
End Function

' =================================================================================================================
' Data Retrieval Helper Functions (In-Memory)
' =================================================================================================================
Private Function GetHistoricalDataRow(ByVal ProductName As String, ByVal HistoryData As Variant, ByVal HistLCol As Long) As Variant
    Dim r As Long, c As Long
    Dim Result() As Variant
    ReDim Result(1 To HistLCol - 6) ' Offset is 6 due to columns A-F

    For r = 2 To UBound(HistoryData, 1)
        If Trim$(HistoryData(r, 6)) = ProductName Then ' Product is Col F
            For c = 7 To HistLCol ' Data starts in Col G
                Result(c - 6) = HistoryData(r, c)
            Next c
            GetHistoricalDataRow = Result
            Exit Function
        End If
    Next r
    GetHistoricalDataRow = Result
End Function

Private Function GetHistoricalSum(ByVal AffiliateName As String, ByVal FamilyName As String, ByVal GroupID As String, ByVal HistoryData As Variant, ByVal HistLCol As Long) As Double
    Dim TotalSum As Double, i As Long, r As Long
    Dim CurrentAffiliate As String, CurrentFamily As String, CurrentGroupID As String
    TotalSum = 0
    For r = 2 To UBound(HistoryData, 1)
        CurrentAffiliate = Trim$(HistoryData(r, 1))
        CurrentFamily = Trim$(HistoryData(r, 2))
        CurrentGroupID = Trim$(HistoryData(r, 3))
        
        If CurrentAffiliate = AffiliateName And CurrentFamily = FamilyName And CurrentGroupID = GroupID Then
            For i = 7 To HistLCol ' Data starts in Col G
                TotalSum = TotalSum + Val(HistoryData(r, i))
            Next i
        End If
    Next r
    GetHistoricalSum = TotalSum
End Function

Private Function GetHistoricalFamilySum(ByVal AffiliateName As String, ByVal FamilyName As String, ByVal HistoryData As Variant, ByVal LifecycleMap As Object, ByVal HistLCol As Long) As Double
    Dim TotalSum As Double, r As Long, c As Long
    Dim HSProduct As String, HSFamily As String, HSAffiliate As String
    TotalSum = 0
    For r = 2 To UBound(HistoryData, 1)
        HSAffiliate = Trim$(HistoryData(r, 1))
        HSFamily = Trim$(HistoryData(r, 2))
        
        If HSAffiliate = AffiliateName And HSFamily = FamilyName Then
            HSProduct = Trim$(HistoryData(r, 6)) ' Product is Col F
            Dim HSLifecycle As cProductLifecycle
            If LifecycleMap.Exists(HSProduct) Then Set HSLifecycle = LifecycleMap.Item(HSProduct)
            
            If Not HSLifecycle Is Nothing Then
                For c = 7 To HistLCol ' Data starts in Col G
                    Dim IncludeSale As Boolean: IncludeSale = False
                    If HSLifecycle.Status <> STATUS_DISCONTINUED Then
                        IncludeSale = True
                    Else
                        If HSLifecycle.PhaseOutDate > 0 And IsDate(HistoryData(1, c)) Then
                                If CDate(HistoryData(1, c)) < HSLifecycle.PhaseOutDate Then IncludeSale = True
                        Else
                            IncludeSale = True
                        End If
                    End If
                    If IncludeSale Then TotalSum = TotalSum + Val(HistoryData(r, c))
                Next c
            End If
            Set HSLifecycle = Nothing
        End If
    Next r
    GetHistoricalFamilySum = TotalSum
End Function

' =================================================================================================================
' Utility Functions
' =================================================================================================================
Private Function SanitizeSheetName(ByVal SheetName As String) As String
    ' *** NEW FUNCTION: Cleans a string to be a valid Excel sheet name. ***
    Dim InvalidChars As String
    Dim i As Long
    InvalidChars = ":\/?*[]" ' Characters forbidden by Excel

    ' Replace each invalid character with a hyphen
    For i = 1 To Len(InvalidChars)
        SheetName = Replace(SheetName, Mid(InvalidChars, i, 1), "-")
    Next i

    ' Truncate the name to 31 characters if it's too long
    If Len(SheetName) > 31 Then
        SanitizeSheetName = Left(SheetName, 31)
    Else
        SanitizeSheetName = SheetName
    End If
End Function

Private Function LoadDataToArray(ByVal WS As Worksheet) As Variant
    Dim LRow As Long, LCol As Long
    If WorksheetIsEmpty(WS) Then
        Dim TempArray(1 To 1, 1 To 1) As Variant
        TempArray(1, 1) = ""
        LoadDataToArray = TempArray
        Exit Function
    End If
    LRow = WS.Cells(WS.Rows.Count, "A").End(xlUp).Row
    LCol = WS.Cells(1, WS.Columns.Count).End(xlToLeft).Column
    LoadDataToArray = WS.Range(WS.Cells(1, 1), WS.Cells(LRow, LCol)).Value
End Function

Private Function GetCombinedHeaderRow(ByVal DemandData As Variant, ByVal HistoryData As Variant, ByVal MonthCount As Long, ByVal DemandLCol As Long) As Variant
    Dim HistHeaders() As Variant, DemandHeaders() As Variant, c As Long
    ReDim HistHeaders(1 To MonthCount)
    For c = 1 To MonthCount: HistHeaders(c) = HistoryData(1, c + 6): Next c
    
    Dim TempDemandHeaders() As Variant
    ReDim TempDemandHeaders(1 To DemandLCol - 2)
    For c = 3 To DemandLCol
        TempDemandHeaders(c - 2) = DemandData(1, c)
    Next c
    
    Dim Combined() As Variant
    ReDim Combined(1 To 8 + MonthCount + UBound(TempDemandHeaders))
    Combined(1) = "Affiliate": Combined(2) = "Family": Combined(3) = "Sub-Family": Combined(4) = "Local Item Nbr": Combined(5) = "Desc": Combined(6) = "I-S-D": Combined(7) = "Active/Discontinued": Combined(8) = "Phase Out Month"
    For c = 1 To UBound(HistHeaders): Combined(c + 8) = HistHeaders(c): Next c
    For c = 1 To UBound(TempDemandHeaders): Combined(c + 8 + MonthCount) = TempDemandHeaders(c): Next c
    GetCombinedHeaderRow = Combined
End Function

Private Function GetHistoricalMonthCount(ByVal DemandData As Variant, ByVal HistoryData As Variant, ByVal DemandStartDateCol As Long) As Long
    Dim HistLCol As Long, CurrCol As Long, Count As Long
    HistLCol = UBound(HistoryData, 2)
    Count = 0
    If UBound(DemandData, 1) < 2 Then GetHistoricalMonthCount = 0: Exit Function
    
    For CurrCol = 7 To HistLCol ' Historical data starts in Col G
        If IsDate(DemandData(2, DemandStartDateCol)) And IsDate(HistoryData(1, CurrCol)) Then
            If CDate(DemandData(2, DemandStartDateCol)) > CDate(HistoryData(1, CurrCol)) Then Count = Count + 1 Else Exit For
        End If
    Next CurrCol
    GetHistoricalMonthCount = Count
End Function

Private Function GetLastHistoricalColumn(ByVal WS As Worksheet) As Long
    Dim LastCol As Long, i As Long
    Dim FirstForecastCol As Long: FirstForecastCol = 9 ' Data starts Col I
    LastCol = WS.Cells(1, WS.Columns.Count).End(xlToLeft).Column

    Dim FirstDateCol As Long: FirstDateCol = 0
    For i = FirstForecastCol To LastCol
        If IsDate(WS.Cells(1, i).Value) Then
            FirstDateCol = i
            Exit For
        End If
    Next i
    
    If FirstDateCol = 0 Then GetLastHistoricalColumn = LastCol: Exit Function

    Dim DemandForecastStartDate As Date, AffiliateName As String, FamilyName As String
    AffiliateName = WS.Cells(2, 1).Value
    FamilyName = WS.Cells(2, 2).Value
    
    Dim DemandData As Variant
    DemandData = FilterDataByColumn(LoadDataToArray(ThisWorkbook.Sheets(DEMAND_SHEET)), 1, AffiliateName)
    DemandData = FilterDataByColumn(DemandData, 2, FamilyName)

    If Not IsEmpty(DemandData) Then
       If UBound(DemandData, 1) >= 2 And UBound(DemandData, 2) >= 3 Then
            If IsDate(DemandData(2, 3)) Then DemandForecastStartDate = CDate(DemandData(2, 3))
       End If
    End If

    If Not IsDate(DemandForecastStartDate) Then GetLastHistoricalColumn = LastCol: Exit Function

    GetLastHistoricalColumn = 8
    For i = FirstForecastCol To LastCol
        If IsDate(WS.Cells(1, i).Value) Then
            If CDate(WS.Cells(1, i).Value) < DemandForecastStartDate Then
                 GetLastHistoricalColumn = i
            Else
                 Exit For
            End If
        End If
    Next i
End Function

Private Function SheetExists(ByVal WB As Workbook, ByVal SheetName As String) As Boolean
    Dim WS As Worksheet
    On Error Resume Next
    Set WS = WB.Sheets(SheetName)
    On Error GoTo 0
    SheetExists = Not WS Is Nothing
End Function

Private Function CreateOutputWorkbook(ByVal TWB As Workbook, ByVal AffiliateName As String, ByVal WS_Summary As Worksheet) As Workbook
    Dim WB As Workbook, WS As Worksheet
    Dim SheetNames As Object: Set SheetNames = CreateObject("System.Collections.ArrayList")

    Dim SummaryLastRow As Long
    SummaryLastRow = WS_Summary.Cells(WS_Summary.Rows.Count, "A").End(xlUp).Row
    If SummaryLastRow > 1 Then
        Dim SummaryLastCol As Long
        SummaryLastCol = WS_Summary.Cells(1, WS_Summary.Columns.Count).End(xlToLeft).Column
        WS_Summary.Range("A1", WS_Summary.Cells(SummaryLastRow, SummaryLastCol)).Sort Key1:=WS_Summary.Range("F2"), Order1:=xlAscending, Header:=xlYes ' Sort by I-S-D in Col F
        FormatEnhancedSheet WS_Summary
    End If
    
    ' Add the summary sheet for this affiliate first
    SheetNames.Add WS_Summary.Name

    ' Add all other family sheets for this affiliate
    For Each WS In TWB.Worksheets
        If Left(WS.Name, Len(AffiliateName) + 1) = AffiliateName & "_" And WS.Name <> WS_Summary.Name Then
            SheetNames.Add WS.Name
        End If
    Next WS
    
    If SheetNames.Count = 0 Then Set CreateOutputWorkbook = Nothing: Exit Function
    
    TWB.Sheets(SheetNames.ToArray).Copy
    Set WB = ActiveWorkbook
    
    On Error Resume Next
    WB.Sheets(1).Activate
    On Error GoTo 0

    Set CreateOutputWorkbook = WB
End Function

Private Sub CleanUpAffiliateSheets(ByVal TWB As Workbook, ByVal AffiliateName As String)
    Dim WS As Worksheet
    Application.DisplayAlerts = False
    For Each WS In TWB.Worksheets
        ' *** MODIFIED: Use sanitized name for checking which sheets to delete ***
        If WS.Name = SanitizeSheetName(AffiliateName & "_" & SUMMARY_SHEET) Then
            WS.Delete
        ElseIf Left(WS.Name, Len(AffiliateName) + 1) = AffiliateName & "_" Then
            WS.Delete
        End If
    Next WS
    Application.DisplayAlerts = True
End Sub

Private Sub InitializeLogSheet(ByVal WS As Worksheet)
    WS.Name = LOG_SHEET
    With WS.Range("A1:C1")
        .Value = Array("Timestamp", "Type", "Message")
        .Font.Bold = True
    End With
    WS.Columns("A:C").AutoFit
End Sub

Private Sub WriteToLog(ByVal WS As Worksheet, ByVal LogType As String, ByVal Message As String)
    Dim NextRow As Long
    NextRow = WS.Cells(WS.Rows.Count, "A").End(xlUp).Row + 1
    WS.Cells(NextRow, "A").Value = Now
    WS.Cells(NextRow, "B").Value = LogType
    WS.Cells(NextRow, "C").Value = Message
End Sub

Private Function GetUniqueValues(ByVal DataArray As Variant, ByVal ColumnIndex As Long) As Object
    Dim Dict As Object, r As Long
    Set Dict = CreateObject("Scripting.Dictionary")
    Dict.CompareMode = vbTextCompare ' Case-insensitive
    
    If IsEmpty(DataArray) Or LBound(DataArray, 1) > UBound(DataArray, 1) Then
        Set GetUniqueValues = Dict
        Exit Function
    End If

    For r = 2 To UBound(DataArray, 1) ' Start from row 2 to skip header
        Dim Key As String
        Key = Trim(DataArray(r, ColumnIndex))
        If Len(Key) > 0 And Not Dict.Exists(Key) Then
            Dict.Add Key, 1
        End If
    Next r
    Set GetUniqueValues = Dict
End Function

Private Function FilterDataByColumn(ByVal SourceArray As Variant, ByVal ColumnIndex As Long, ByVal FilterValue As String) As Variant
    Dim ResultArray() As Variant, r As Long, c As Long, MatchCount As Long
    If IsEmpty(SourceArray) Or LBound(SourceArray, 1) > UBound(SourceArray, 1) Then Exit Function

    ReDim TempArray(LBound(SourceArray, 1) To UBound(SourceArray, 1), LBound(SourceArray, 2) To UBound(SourceArray, 2))
    
    ' Copy header row
    For c = LBound(SourceArray, 2) To UBound(SourceArray, 2)
        TempArray(1, c) = SourceArray(1, c)
    Next c
    MatchCount = 1

    ' Find matching data rows
    For r = 2 To UBound(SourceArray, 1)
        If Trim(SourceArray(r, ColumnIndex)) = FilterValue Then
            MatchCount = MatchCount + 1
            For c = LBound(SourceArray, 2) To UBound(SourceArray, 2)
                TempArray(MatchCount, c) = SourceArray(r, c)
            Next c
        End If
    Next r

    If MatchCount > 1 Then
        ReDim ResultArray(LBound(SourceArray, 1) To MatchCount, LBound(SourceArray, 2) To UBound(SourceArray, 2))
        For r = 1 To MatchCount
            For c = LBound(ResultArray, 2) To UBound(ResultArray, 2)
                ResultArray(r, c) = TempArray(r, c)
            Next c
        Next r
        FilterDataByColumn = ResultArray
    End If
End Function

Function WorksheetIsEmpty(WS As Worksheet) As Boolean
    On Error Resume Next
    WorksheetIsEmpty = (WS.Cells.Find(What:="*", After:=WS.Range("A1"), LookIn:=xlFormulas, LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, MatchCase:=False) Is Nothing)
    On Error GoTo 0
End Function
