'@Folder("Forecasting")
Option Explicit

' =================================================================================================================
' --- STANDARD MODULE CODE ---
' V3.7: Corrected summary sheet totals and restored advanced V2 formatting.
' =================================================================================================================
' --- MODULE-LEVEL CONSTANTS ---
Private Const MAIN_SHEET As String = "Main"
Private Const STATUS_SHEET As String = "Product Status"
Private Const DEMAND_SHEET As String = "Demand Forecast"
Private Const HISTORY_SHEET As String = "Historical Sales"
Private Const LOG_SHEET As String = "Log"
Private Const SUMMARY_SHEET_PREFIX As String = "Summary"

' --- PRODUCT STATUSES ---
Private Const STATUS_ACTIVE As String = "Active"
Private Const STATUS_PHASE_IN_OUT As String = "PhaseIn-PhaseOut"
Private Const STATUS_DISCONTINUED As String = "Discontinued"
Private Const STATUS_NEW As String = "New"
Private Const STATUS_UNKNOWN As String = "Unknown"


' =================================================================================================================
' Main Procedure: UpdateForeCast_Click
' This is the entry point. It orchestrates the process for all affiliates.
' =================================================================================================================
Public Sub UpdateForeCast_Click()
    ' --- 1. SETUP & INITIALIZATION ---
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.Calculation = xlCalculationManual
    Application.StatusBar = "Initializing forecast process..."

    Dim TWB As Workbook, NewWB As Workbook
    Dim MainSheet As Worksheet, WS_ProductStatus As Worksheet
    Dim WS_DemandForecast As Worksheet, WS_HistoricalSales As Worksheet, WS_Log As Worksheet

    Set TWB = ThisWorkbook
    On Error Resume Next
    Set MainSheet = TWB.Sheets(MAIN_SHEET)
    Set WS_ProductStatus = TWB.Sheets(STATUS_SHEET)
    Set WS_DemandForecast = TWB.Sheets(DEMAND_SHEET)
    Set WS_HistoricalSales = TWB.Sheets(HISTORY_SHEET)
    On Error GoTo 0

    If MainSheet Is Nothing Or WS_ProductStatus Is Nothing Or WS_DemandForecast Is Nothing Or WS_HistoricalSales Is Nothing Then
        MsgBox "One of the required worksheets ('" & MAIN_SHEET & "', '" & STATUS_SHEET & "', '" & DEMAND_SHEET & "', '" & HISTORY_SHEET & "') is missing. Aborting.", vbCritical
        GoTo Cleanup
    End If
    
    ' --- Create Log sheet ---
    On Error Resume Next
    TWB.Sheets(LOG_SHEET).Delete
    On Error GoTo 0
    Set WS_Log = TWB.Sheets.Add(After:=TWB.Sheets(TWB.Sheets.Count))
    InitializeLogSheet WS_Log

    ' --- 2. CORE PROCESSING (LOAD ALL DATA) ---
    Application.StatusBar = "Loading all affiliate data into memory..."
    Dim StatusData As Variant, HistoryData As Variant, DemandData As Variant
    StatusData = LoadDataToArray(WS_ProductStatus)
    HistoryData = LoadDataToArray(WS_HistoricalSales)
    DemandData = LoadDataToArray(WS_DemandForecast)
    
    Application.StatusBar = "Building universal product lifecycle map for all affiliates..."
    Dim LifecycleMap As Object
    Set LifecycleMap = BuildLifecycleMap(StatusData, WS_Log)

    Application.StatusBar = "Identifying unique affiliates to process..."
    Dim Affiliates As Object, r As Long
    Set Affiliates = CreateObject("Scripting.Dictionary")
    ' Use Demand Forecast sheet to determine which affiliates to run for
    For r = 2 To UBound(DemandData, 1)
        If Not Affiliates.Exists(DemandData(r, 1)) Then
            Affiliates.Add DemandData(r, 1), 1
        End If
    Next r

    ' --- 3. LOOP THROUGH EACH AFFILIATE AND PROCESS ---
    Dim AffiliateKey As Variant
    For Each AffiliateKey In Affiliates.Keys
        Dim CurrentAffiliate As String: CurrentAffiliate = CStr(AffiliateKey)
        Application.StatusBar = "Processing Affiliate: " & CurrentAffiliate & "..."

        ' Create a temporary Summary sheet for the current affiliate
        Dim WS_Summary As Worksheet
        Set WS_Summary = TWB.Sheets.Add(After:=TWB.Sheets(TWB.Sheets.Count))
        WS_Summary.Name = "TempSummary"
        
        ' Create and process all forecast tier sheets for the affiliate
        CreateTierSheets TWB, CurrentAffiliate, StatusData, DemandData, WS_Summary
        ProcessForecastForAffiliate TWB, CurrentAffiliate, StatusData, HistoryData, DemandData, WS_Summary, WS_Log, LifecycleMap

        ' Create the final, separate report workbook for the affiliate
        Set NewWB = CreateOutputWorkbookForAffiliate(TWB, CurrentAffiliate, WS_Summary)
        
        If Not NewWB Is Nothing Then
            Application.StatusBar = "Saving final report for " & CurrentAffiliate & "..."
            Dim FilePath As String
            FilePath = TWB.Path & "\Demand ForeCast - " & CurrentAffiliate & " - " & Format$(Now, "DDMMYYYY_HHMMSS") & ".xlsx"
            NewWB.SaveAs FilePath
            NewWB.Close SaveChanges:=False
            Set NewWB = Nothing
        End If

        ' Clean up temporary sheets created for this affiliate before starting the next
        Dim tempSheet As Worksheet
        Application.DisplayAlerts = False
        For Each tempSheet In TWB.Worksheets
            If tempSheet.Name = "TempSummary" Or InStr(1, tempSheet.Name, CurrentAffiliate & " - ") > 0 Then
                tempSheet.Delete
            End If
        Next tempSheet
        Application.DisplayAlerts = True
        Set WS_Summary = Nothing
    Next AffiliateKey

' --- 4. CLEANUP ---
Cleanup:
    Application.StatusBar = False
    Application.Calculation = xlCalculationAutomatic
    If Not MainSheet Is Nothing Then MainSheet.Activate
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    MsgBox "Forecast Update Completed for all affiliates.", vbInformation
End Sub

' =================================================================================================================
' Tier Sheet Creation (Replaces CreateFamilySheets)
' =================================================================================================================
Private Sub CreateTierSheets(ByVal TWB As Workbook, ByVal AffiliateName As String, ByVal StatusData As Variant, ByVal DemandData As Variant, ByVal WS_Summary As Worksheet)
    Dim ProductStatusLRow As Long, DemandLRow As Long
    Dim CurrTierRow As Long, CurrProductRow As Long
    Dim CurrTier As String, CurrProductTier As String, CurrProductAffiliate As String
    Dim WS_NewTier As Worksheet
    
    DemandLRow = UBound(DemandData, 1)
    ProductStatusLRow = UBound(StatusData, 1)
    
    SetupOutputSheetHeaders WS_Summary
    
    For CurrTierRow = 2 To DemandLRow
        If LCase$(Trim$(DemandData(CurrTierRow, 1))) = LCase$(AffiliateName) Then
            CurrTier = Trim$(DemandData(CurrTierRow, 2)) 'Forecast Tier is in Col B
            
            If Len(CurrTier) > 0 Then
                Dim uniqueSheetName As String: uniqueSheetName = AffiliateName & " - " & CurrTier
                
                On Error Resume Next
                TWB.Sheets(uniqueSheetName).Delete
                On Error GoTo 0
                
                Set WS_NewTier = TWB.Sheets.Add(After:=TWB.Sheets(TWB.Sheets.Count))
                WS_NewTier.Name = uniqueSheetName
                SetupOutputSheetHeaders WS_NewTier
                
                Dim NextFreeRow As Long: NextFreeRow = 2
                For CurrProductRow = 2 To ProductStatusLRow
                    CurrProductAffiliate = LCase$(Trim$(StatusData(CurrProductRow, 1))) 'Col A
                    CurrProductTier = LCase$(Trim$(StatusData(CurrProductRow, 2))) 'Col B
                    
                    If CurrProductAffiliate = LCase$(AffiliateName) And CurrProductTier = LCase$(CurrTier) Then
                        WS_NewTier.Range("A" & NextFreeRow).Resize(1, 6).Value = Array(StatusData(CurrProductRow, 1), StatusData(CurrProductRow, 2), StatusData(CurrProductRow, 3), StatusData(CurrProductRow, 4), StatusData(CurrProductRow, 5), StatusData(CurrProductRow, 6))
                        NextFreeRow = NextFreeRow + 1
                    End If
                Next CurrProductRow
            End If
        End If
    Next CurrTierRow
End Sub

' =================================================================================================================
' Main Processing Logic for a single Affiliate
' =================================================================================================================
Private Sub ProcessForecastForAffiliate(ByVal TWB As Workbook, ByVal AffiliateName As String, ByVal StatusData As Variant, ByVal HistoryData As Variant, ByVal DemandData As Variant, ByVal WS_Summary As Worksheet, ByVal WS_Log As Worksheet, ByVal LifecycleMap As Object)
    Dim WS_CurrentTier As Worksheet, CurrTier As String, DemandLRow As Long, r As Long
    DemandLRow = UBound(DemandData, 1)

    For r = 2 To DemandLRow
        If LCase$(Trim$(DemandData(r, 1))) = LCase$(AffiliateName) Then
            CurrTier = Trim$(DemandData(r, 2))
            Dim uniqueSheetName As String: uniqueSheetName = AffiliateName & " - " & CurrTier
            Application.StatusBar = "Processing: " & uniqueSheetName & "..."
            
            If SheetExists(TWB, uniqueSheetName) Then
                Set WS_CurrentTier = TWB.Sheets(uniqueSheetName)
                If WS_CurrentTier.Cells(WS_CurrentTier.Rows.Count, "A").End(xlUp).Row > 1 Then 'Only process if there are products
                    CalculateAndFormatTierSheet WS_CurrentTier, AffiliateName, StatusData, HistoryData, DemandData, WS_Log, LifecycleMap
                    AppendToSummarySheet WS_CurrentTier, WS_Summary
                End If
                Set WS_CurrentTier = Nothing
            End If
        End If
    Next r
End Sub

' =================================================================================================================
' Calculation and Formatting for a single Tier Sheet
' =================================================================================================================
Private Sub CalculateAndFormatTierSheet(ByVal WS_CurrentTier As Worksheet, ByVal AffiliateName As String, ByVal StatusData As Variant, ByVal HistoryData As Variant, ByVal DemandDataVariant As Variant, ByVal WS_Log As Worksheet, ByVal LifecycleMap As Object)
    Dim TierLRow As Long, HistLCol As Long, MonthCount As Long
    Dim SubTierSum As Double, TierSum As Double
    
    MonthCount = GetHistoricalMonthCount(DemandDataVariant, HistoryData)
    
    Dim DemandLCol As Long, HeaderRow As Variant
    DemandLCol = UBound(DemandDataVariant, 2)
    HeaderRow = GetCombinedHeaderRow(AffiliateName, DemandDataVariant, HistoryData, MonthCount, DemandLCol, WS_Log) 'Pass Log sheet
    
    AddNewProductsToTierSheet WS_CurrentTier, AffiliateName, StatusData
    TierLRow = WS_CurrentTier.Cells(WS_CurrentTier.Rows.Count, "A").End(xlUp).Row
    If TierLRow < 2 Then Exit Sub
    
    Dim OutputArray() As Variant: ReDim OutputArray(1 To TierLRow, 1 To UBound(HeaderRow))
    
    Dim r As Long, c As Long, i As Long
    For c = 1 To UBound(HeaderRow): OutputArray(1, c) = HeaderRow(c): Next c
    For r = 2 To TierLRow
        For c = 1 To 6: OutputArray(r, c) = WS_CurrentTier.Cells(r, c).Value: Next c
    Next r
    
    HistLCol = 8 + MonthCount 'A-F info, G status, H phase out
    
    For r = 2 To TierLRow
        Dim CurrAffiliate As String, CurrTier As String, CurrSubTierID As String, CurrProduct As String
        CurrAffiliate = OutputArray(r, 1)
        CurrTier = OutputArray(r, 2)
        CurrSubTierID = OutputArray(r, 3)
        CurrProduct = OutputArray(r, 6)
        
        Dim CompositeKey As String: CompositeKey = CurrAffiliate & "|" & CurrProduct
        Dim CurrentLifecycle As cProductLifecycle
        If LifecycleMap.Exists(CompositeKey) Then Set CurrentLifecycle = LifecycleMap.Item(CompositeKey) Else Set CurrentLifecycle = New cProductLifecycle
        
        OutputArray(r, 7) = CurrentLifecycle.Status
        If CurrentLifecycle.PhaseOutDate > 0 Then OutputArray(r, 8) = CurrentLifecycle.PhaseOutDate

        Dim HistoricSalesRow As Variant
        HistoricSalesRow = GetHistoricalDataRow(CurrAffiliate, CurrProduct, HistoryData, MonthCount + 6)
        For c = 1 To UBound(HistoricSalesRow): OutputArray(r, c + 8) = HistoricSalesRow(c): Next c
        
        SubTierSum = GetHistoricalSubTierSum(CurrAffiliate, CurrTier, CurrSubTierID, HistoryData, MonthCount + 6)
        TierSum = GetHistoricalTierSum(CurrAffiliate, CurrTier, HistoryData, LifecycleMap, MonthCount + 6)
        
        Dim DemandDataRow As Long: DemandDataRow = 0
        For i = 2 To UBound(DemandDataVariant, 1)
            If LCase$(DemandDataVariant(i, 1)) = LCase$(CurrAffiliate) And LCase$(DemandDataVariant(i, 2)) = LCase$(CurrTier) Then
                DemandDataRow = i
                Exit For
            End If
        Next i

        If DemandDataRow > 0 Then
            For c = (HistLCol + 1) To UBound(OutputArray, 2)
                Dim ForecastValue As Double
                ForecastValue = CalculateForecastValue(CurrentLifecycle, OutputArray(1, c), SubTierSum, TierSum, DemandDataVariant(DemandDataRow, (c - HistLCol) + 2))
                OutputArray(r, c) = ForecastValue
            Next c
        End If
        Set CurrentLifecycle = Nothing
    Next r
    
    WS_CurrentTier.Cells.Clear
    WS_CurrentTier.Range("A1").Resize(UBound(OutputArray, 1), UBound(OutputArray, 2)).Value = OutputArray
    
    FormatEnhancedSheet WS_CurrentTier
End Sub

' =================================================================================================================
' Lifecycle Mapping Function (In-Memory using Composite Key)
' =================================================================================================================
Private Function BuildLifecycleMap(ByVal StatusData As Variant, ByVal WS_Log As Worksheet) As Object
    Dim r As Long, AffiliateName As String, ProductID As String, SupersededByKey As String
    Dim CompositeKey As Variant 'FIX: Changed from String to Variant for For Each loop
    Dim TempLifecycle As cProductLifecycle, LifecycleDict As Object: Set LifecycleDict = CreateObject("Scripting.Dictionary")
    
    If Not IsArray(StatusData) Or UBound(StatusData, 1) < 2 Then Set BuildLifecycleMap = LifecycleDict: Exit Function
    
    For r = 2 To UBound(StatusData, 1)
        AffiliateName = Trim$(StatusData(r, 1))
        ProductID = Trim$(StatusData(r, 6))
        CompositeKey = AffiliateName & "|" & ProductID
        
        If Len(ProductID) > 0 And Not LifecycleDict.Exists(CStr(CompositeKey)) Then
            Set TempLifecycle = New cProductLifecycle
            With TempLifecycle
                .Affiliate = AffiliateName
                .ProductID = ProductID
                .Status = Trim$(StatusData(r, 7))
                Dim PhaseOutDate As Variant: PhaseOutDate = StatusData(r, 8)
                Dim PhaseOutPercent As Variant: PhaseOutPercent = StatusData(r, 9)
                .SupersededByProductID = Trim$(StatusData(r, 10))

                If .Status = STATUS_PHASE_IN_OUT Or .Status = STATUS_DISCONTINUED Then
                    .IsPhasingOut = True
                    If IsDate(PhaseOutDate) Then .PhaseOutDate = CDate(PhaseOutDate)
                    If IsNumeric(PhaseOutPercent) Then .PhaseOutPercent = CDbl(PhaseOutPercent)
                End If
            End With
            LifecycleDict.Add CStr(CompositeKey), TempLifecycle 'Ensure key is string when adding
            Set TempLifecycle = Nothing
        End If
    Next r

    For Each CompositeKey In LifecycleDict.Keys
        Set TempLifecycle = LifecycleDict.Item(CompositeKey)
        If TempLifecycle.IsPhasingOut And Len(TempLifecycle.SupersededByProductID) > 0 Then
            SupersededByKey = TempLifecycle.Affiliate & "|" & TempLifecycle.SupersededByProductID
            If LifecycleDict.Exists(SupersededByKey) Then
                Dim SuccessorLifecycle As cProductLifecycle
                Set SuccessorLifecycle = LifecycleDict.Item(SupersededByKey)
                With SuccessorLifecycle
                    .IsPhasingIn = True
                    .ReplacesProductID = TempLifecycle.ProductID
                    .PhaseInDate = TempLifecycle.PhaseOutDate
                    .PhaseInPercent = 1 - TempLifecycle.PhaseOutPercent
                End With
                Set SuccessorLifecycle = Nothing
            Else
                WriteToLog WS_Log, "Warning", "In Affiliate '" & TempLifecycle.Affiliate & "', Product '" & TempLifecycle.ProductID & "' is superseded by '" & TempLifecycle.SupersededByProductID & "', but the successor product was not found."
            End If
        End If
    Next CompositeKey
    Set TempLifecycle = Nothing
    Set BuildLifecycleMap = LifecycleDict
End Function

' =================================================================================================================
' Data Retrieval Helper Functions (Updated for Multi-Affiliate & New Columns)
' =================================================================================================================
Private Function GetHistoricalDataRow(ByVal AffiliateName As String, ByVal ProductName As String, ByVal HistoryData As Variant, ByVal HistColCount As Long) As Variant
    Dim r As Long, c As Long, Result() As Variant: ReDim Result(1 To HistColCount - 6)

    For r = 2 To UBound(HistoryData, 1)
        If Trim$(HistoryData(r, 1)) = AffiliateName And Trim$(HistoryData(r, 6)) = ProductName Then
            For c = 7 To HistColCount: Result(c - 6) = HistoryData(r, c): Next c
            GetHistoricalDataRow = Result
            Exit Function
        End If
    Next r
    GetHistoricalDataRow = Result 'Return empty array if not found
End Function

Private Function GetHistoricalTierSum(ByVal AffiliateName As String, ByVal TierName As String, ByVal HistoryData As Variant, ByVal LifecycleMap As Object, ByVal HistLCol As Long) As Double
    Dim TotalSum As Double, r As Long, c As Long, HSProduct As String, CompositeKey As String
    For r = 2 To UBound(HistoryData, 1)
        If LCase$(Trim$(HistoryData(r, 1))) = LCase$(AffiliateName) And LCase$(Trim$(HistoryData(r, 2))) = LCase$(TierName) Then
            HSProduct = Trim$(HistoryData(r, 6))
            CompositeKey = Trim$(HistoryData(r, 1)) & "|" & HSProduct
            Dim HSLifecycle As cProductLifecycle
            If LifecycleMap.Exists(CompositeKey) Then
                Set HSLifecycle = LifecycleMap.Item(CompositeKey)
                If HSLifecycle.Status <> STATUS_DISCONTINUED Then
                    For c = 7 To HistLCol: TotalSum = TotalSum + Val(HistoryData(r, c)): Next c
                Else
                    For c = 7 To HistLCol
                        If HSLifecycle.PhaseOutDate > 0 And IsDate(HistoryData(1, c)) Then
                            If CDate(HistoryData(1, c)) < HSLifecycle.PhaseOutDate Then TotalSum = TotalSum + Val(HistoryData(r, c))
                        End If
                    Next c
                End If
                Set HSLifecycle = Nothing
            End If
        End If
    Next r
    GetHistoricalTierSum = TotalSum
End Function

Private Function GetHistoricalSubTierSum(ByVal AffiliateName As String, ByVal TierName As String, ByVal SubTierName As String, ByVal HistoryData As Variant, ByVal HistLCol As Long) As Double
    Dim TotalSum As Double, r As Long, c As Long
    For r = 2 To UBound(HistoryData, 1)
        If LCase$(Trim$(HistoryData(r, 1))) = LCase$(AffiliateName) And LCase$(Trim$(HistoryData(r, 2))) = LCase$(TierName) And LCase$(Trim$(HistoryData(r, 3))) = LCase$(SubTierName) Then
            For c = 7 To HistLCol: TotalSum = TotalSum + Val(HistoryData(r, c)): Next c
        End If
    Next r
    GetHistoricalSubTierSum = TotalSum
End Function

' =================================================================================================================
' Core Calculation Function
' =================================================================================================================
Private Function CalculateForecastValue(ByVal Lifecycle As cProductLifecycle, ByVal ForecastDate As Date, ByVal SubTierSum As Double, ByVal TierSum As Double, ByVal TierDemand As Double) As Double
    Dim BaseForecast As Double: If TierSum > 0 Then BaseForecast = (SubTierSum * TierDemand) / TierSum
    Dim FinalForecast As Double

    Select Case Lifecycle.Status
        Case STATUS_ACTIVE, STATUS_NEW
            FinalForecast = BaseForecast
        Case STATUS_PHASE_IN_OUT
            If Lifecycle.IsPhasingOut And Lifecycle.PhaseOutDate > 0 And ForecastDate >= Lifecycle.PhaseOutDate Then
                If Month(ForecastDate) = Month(Lifecycle.PhaseOutDate) And Year(ForecastDate) = Year(Lifecycle.PhaseOutDate) Then
                    FinalForecast = BaseForecast * Lifecycle.PhaseOutPercent
                Else
                    FinalForecast = 0
                End If
            Else
                FinalForecast = BaseForecast
            End If
        Case STATUS_DISCONTINUED
             If Lifecycle.PhaseOutDate > 0 And ForecastDate >= Lifecycle.PhaseOutDate Then FinalForecast = 0 Else FinalForecast = BaseForecast
        Case Else
            FinalForecast = BaseForecast
    End Select

    If Lifecycle.IsPhasingIn Then
        If ForecastDate < Lifecycle.PhaseInDate Then
            FinalForecast = 0
        ElseIf Month(ForecastDate) = Month(Lifecycle.PhaseInDate) And Year(ForecastDate) = Year(Lifecycle.PhaseInDate) Then
            FinalForecast = BaseForecast * Lifecycle.PhaseInPercent
        End If
    End If
    CalculateForecastValue = FinalForecast
End Function

' =================================================================================================================
' Utility Functions (Updated and New)
' =================================================================================================================
Private Sub AddNewProductsToTierSheet(ByVal WS_CurrentTier As Worksheet, ByVal AffiliateName As String, ByVal StatusData As Variant)
    Dim r As Long, LastRow As Long, CurrProduct As String, ActiveType As String
    For r = 2 To UBound(StatusData, 1)
        If LCase$(Trim$(StatusData(r, 1))) = LCase$(AffiliateName) And LCase$(Trim$(StatusData(r, 2))) = LCase$(Replace(WS_CurrentTier.Name, AffiliateName & " - ", "")) Then
            ActiveType = Trim$(StatusData(r, 7))
            If ActiveType = STATUS_NEW Then
                CurrProduct = Trim$(StatusData(r, 6))
                Dim Found As Range: Set Found = WS_CurrentTier.Range("F:F").Find(What:=CurrProduct, LookIn:=xlValues, LookAt:=xlWhole)
                If Found Is Nothing Then
                    LastRow = WS_CurrentTier.Cells(WS_CurrentTier.Rows.Count, "A").End(xlUp).Row + 1
                    WS_CurrentTier.Range("A" & LastRow).Resize(1, 6).Value = Array(StatusData(r, 1), StatusData(r, 2), StatusData(r, 3), StatusData(r, 4), StatusData(r, 5), StatusData(r, 6))
                End If
            End If
        End If
    Next r
End Sub

Private Sub SetupOutputSheetHeaders(ByVal WS As Worksheet)
    WS.Range("A1:H1").Value = Array("Affiliate", "Forecast Tier", "Forecast Sub-Tier", "Local Item Nbr", "Desc", "I-S-D", "Active/Discontinued", "Phase Out Month")
End Sub

Private Function CreateOutputWorkbookForAffiliate(ByVal TWB As Workbook, ByVal AffiliateName As String, ByVal WS_Summary As Worksheet) As Workbook
    Dim WB As Workbook, WS As Worksheet, SheetNames As Object: Set SheetNames = CreateObject("System.Collections.ArrayList")

    ' --- FIX: Format the sheet while it's still named "TempSummary" ---
    FormatEnhancedSheet WS_Summary
    
    ' Add the temporary summary sheet (still named "TempSummary") and affiliate tier sheets to the collection
    SheetNames.Add WS_Summary.Name
    For Each WS In TWB.Worksheets
        If InStr(1, WS.Name, AffiliateName & " - ") > 0 Then SheetNames.Add WS.Name
    Next WS
    
    If SheetNames.Count < 2 And WS_Summary.Cells(WS_Summary.Rows.Count, "A").End(xlUp).Row < 2 Then
        Set CreateOutputWorkbookForAffiliate = Nothing
        Exit Function
    End If
    
    ' Copy all collected sheets to a new workbook
    TWB.Sheets(SheetNames.ToArray).Copy
    Set WB = ActiveWorkbook
    
    ' --- FIX: Rename the summary sheet AFTER it has been copied to the new workbook ---
    On Error Resume Next
    WB.Sheets("TempSummary").Name = SUMMARY_SHEET_PREFIX
    On Error GoTo 0
    
    ' Unlink formulas by pasting as values
    For Each WS In WB.Worksheets
        WS.Cells.Copy
        WS.Cells.PasteSpecial Paste:=xlPasteValuesAndNumberFormats
    Next WS
    Application.CutCopyMode = False
    
    On Error Resume Next
    WB.Sheets(SUMMARY_SHEET_PREFIX).Activate
    On Error GoTo 0

    Set CreateOutputWorkbookForAffiliate = WB
End Function

Private Function GetHistoricalMonthCount(ByVal DemandData As Variant, ByVal HistoryData As Variant) As Long
    Dim HistLCol As Long, CurrCol As Long, Count As Long, DemandStartDate As Date
    HistLCol = UBound(HistoryData, 2)
    
    If UBound(DemandData, 2) >= 3 And IsDate(DemandData(1, 3)) Then
        DemandStartDate = CDate(DemandData(1, 3))
    Else
        GetHistoricalMonthCount = 0
        Exit Function
    End If

    For CurrCol = 7 To HistLCol 'Historical dates start in Col G
        If IsDate(HistoryData(1, CurrCol)) Then
            If CDate(HistoryData(1, CurrCol)) < DemandStartDate Then Count = Count + 1 Else Exit For
        End If
    Next CurrCol
    GetHistoricalMonthCount = Count
End Function

Private Function GetCombinedHeaderRow(ByVal AffiliateName As String, ByVal DemandData As Variant, ByVal HistoryData As Variant, ByVal MonthCount As Long, ByVal DemandLCol As Long, ByVal WS_Log As Worksheet) As Variant
    WriteToLog WS_Log, "Info", "GetCombinedHeaderRow called for Affiliate: " & AffiliateName & " with MonthCount: " & MonthCount

    Dim HistHeaders() As Variant, r As Long, c As Long
    If MonthCount > 0 Then
        ReDim HistHeaders(1 To MonthCount)
        For c = 1 To MonthCount: HistHeaders(c) = HistoryData(1, c + 6): Next c
    End If
    
    Dim DemandHeaders() As Variant
    For r = 1 To UBound(DemandData, 1) ' Search from header row
        If LCase$(Trim$(DemandData(r, 1))) = LCase$(AffiliateName) Or r = 1 Then
            DemandHeaders = Application.WorksheetFunction.Index(DemandData, 1, 0)
            Exit For
        End If
    Next r
    
    Dim Combined() As Variant: ReDim Combined(1 To 8 + MonthCount + (DemandLCol - 2))
    Combined(1) = "Affiliate": Combined(2) = "Forecast Tier": Combined(3) = "Forecast Sub-Tier": Combined(4) = "Local Item Nbr": Combined(5) = "Desc": Combined(6) = "I-S-D": Combined(7) = "Active/Discontinued": Combined(8) = "Phase Out Month"
    
    If MonthCount > 0 Then
        For c = 1 To UBound(HistHeaders): Combined(c + 8) = HistHeaders(c): Next c
    End If
    
    For c = 3 To DemandLCol: Combined(c + 8 + MonthCount - 2) = DemandHeaders(c): Next c
    GetCombinedHeaderRow = Combined
End Function

'--- FIX: Corrected logic to NOT copy the total row from tier sheets ---
Private Sub AppendToSummarySheet(ByVal WS_Tier As Worksheet, ByVal WS_Summary As Worksheet)
    Dim TierLRow As Long, TierLCol As Long, SummaryLRow As Long
    
    'Find the last row, which includes the "TOTAL" row
    TierLRow = WS_Tier.Cells(WS_Tier.Rows.Count, "A").End(xlUp).Row
    
    'If the last row is the total row, only copy data up to the row before it
    If LCase$(Trim$(WS_Tier.Cells(TierLRow, 1).Value)) = "total" Then
        TierLRow = TierLRow - 1
    End If
    
    'If there are no data rows (only a header), exit the sub
    If TierLRow < 2 Then Exit Sub
    
    TierLCol = WS_Tier.Cells(1, WS_Tier.Columns.Count).End(xlToLeft).Column
    SummaryLRow = WS_Summary.Cells(WS_Summary.Rows.Count, "A").End(xlUp).Row
    
    'Copy headers if the summary sheet is empty
    If IsEmpty(WS_Summary.Range("I1").Value) Then
        WS_Tier.Range("I1", WS_Tier.Cells(1, TierLCol)).Copy WS_Summary.Range("I1")
    End If
    
    'Define the data range, EXCLUDING the header and total row
    Dim DataRange As Range
    Set DataRange = WS_Tier.Range("A2", WS_Tier.Cells(TierLRow, TierLCol))
    
    'Copy the data to the summary sheet
    WS_Summary.Range("A" & SummaryLRow + 1).Resize(DataRange.Rows.Count, DataRange.Columns.Count).Value = DataRange.Value
End Sub

'--- FIX: Replaced with advanced formatting from V2, adapted for new V3 column structure ---
Private Sub FormatEnhancedSheet(ByVal WS As Worksheet)
    If WS.Cells(1, 1).Value = "" Then Exit Sub
    Dim LastRow As Long, LastCol As Long, TotalRow As Long, r As Long, i As Long, HistLCol As Long
    
    LastRow = WS.Cells(WS.Rows.Count, "A").End(xlUp).Row
    LastCol = WS.Cells(1, WS.Columns.Count).End(xlToLeft).Column
    TotalRow = LastRow
    If LCase$(WS.Cells(LastRow, 1).Value) <> "total" Then TotalRow = LastRow + 1

    ' --- 1. ADD TOTALS ---
    WS.Cells(TotalRow, 1).Value = "TOTAL"
    For i = 9 To LastCol 'Totals start at column I
        On Error Resume Next
        WS.Cells(TotalRow, i).Value = Application.WorksheetFunction.Sum(WS.Range(WS.Cells(2, i), WS.Cells(LastRow, i)))
        On Error GoTo 0
    Next i

    ' --- 2. ENHANCED AESTHETICS (from V2) ---
    Dim HeaderRange As Range, DataRange As Range, TotalRange As Range, FullRange As Range
    Set HeaderRange = WS.Range(WS.Cells(1, 1), WS.Cells(1, LastCol))
    If LCase$(WS.Cells(LastRow, 1).Value) = "total" Then
        Set DataRange = WS.Range(WS.Cells(2, 1), WS.Cells(LastRow - 1, LastCol))
        Set TotalRange = WS.Range(WS.Cells(LastRow, 1), WS.Cells(LastRow, LastCol))
    Else
        Set DataRange = WS.Range(WS.Cells(2, 1), WS.Cells(LastRow, LastCol))
        Set TotalRange = WS.Range(WS.Cells(TotalRow, 1), WS.Cells(TotalRow, LastCol))
    End If
    Set FullRange = WS.Range(WS.Cells(1, 1), WS.Cells(TotalRow, LastCol))
    
    FullRange.Interior.ColorIndex = xlNone
    FullRange.Borders.LineStyle = xlNone
    FullRange.Font.Bold = False
    
    With HeaderRange
        .Font.Bold = True
        .Font.Color = vbWhite
        .Interior.Color = RGB(47, 85, 151) ' Dark Blue
        .VerticalAlignment = xlCenter
    End With
    
    With TotalRange
        .Font.Bold = True
        .Interior.Color = RGB(221, 235, 247) ' Light Blue
    End With
    
    For r = 2 To LastRow
        If r Mod 2 = 0 Then WS.Range(WS.Cells(r, 1), WS.Cells(r, LastCol)).Interior.Color = RGB(242, 242, 242)
    Next r
    
    HistLCol = GetLastHistoricalColumn(WS)
    ' Add grey background to historical data
    If HistLCol > 8 Then
        WS.Range(WS.Cells(2, 9), WS.Cells(LastRow, HistLCol)).Interior.Color = RGB(220, 220, 220)
        ' Add vertical border after last historical month
        With WS.Range(WS.Cells(1, HistLCol), WS.Cells(TotalRow, HistLCol)).Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .Color = RGB(47, 85, 151) ' Dark Blue
            .Weight = xlMedium
        End With
    End If
    
    FullRange.Borders.LineStyle = xlContinuous
    FullRange.Borders.Weight = xlThin
    FullRange.Borders.Color = RGB(210, 210, 210)
    
    ' Number formatting
    WS.Range(WS.Cells(2, 9), WS.Cells(TotalRow, LastCol)).NumberFormat = "_(* #,##0_);_(* (#,##0);_(* ""-""??_);_(@_)"
    WS.Range(WS.Cells(1, 9), WS.Cells(1, LastCol)).NumberFormat = "mmm-yy"
    
    ' --- 3. SORTING, COLUMN WIDTH AND FREEZE PANES ---
    WS.Cells.EntireColumn.AutoFit
    If WS.Name = SUMMARY_SHEET_PREFIX Then
        WS.Range("A1", WS.Cells(TotalRow, LastCol)).Sort Key1:=WS.Range("F2"), Order1:=xlAscending, Key2:=WS.Range("B2"), Order2:=xlAscending, Header:=xlYes
    End If
    WS.Activate
    WS.Range("A2").Select
    ActiveWindow.FreezePanes = True
End Sub

Private Function LoadDataToArray(ByVal WS As Worksheet) As Variant
    If WS Is Nothing Then Exit Function
    Dim LRow As Long, LCol As Long
    LRow = WS.Cells(WS.Rows.Count, "A").End(xlUp).Row
    LCol = WS.Cells(1, WS.Columns.Count).End(xlToLeft).Column
    If LRow > 1 And LCol > 0 Then
        LoadDataToArray = WS.Range(WS.Cells(1, 1), WS.Cells(LRow, LCol)).Value
    Else
        Dim TempArray(1 To 1, 1 To 1) As Variant: TempArray(1, 1) = ""
        LoadDataToArray = TempArray
    End If
End Function

Private Function SheetExists(ByVal WB As Workbook, ByVal SheetName As String) As Boolean
    Dim WS As Worksheet
    On Error Resume Next
    Set WS = WB.Sheets(SheetName)
    On Error GoTo 0
    SheetExists = Not WS Is Nothing
End Function

Private Sub InitializeLogSheet(ByVal WS As Worksheet)
    WS.Name = LOG_SHEET
    With WS.Range("A1:C1")
        .Value = Array("Timestamp", "Type", "Message")
        .Font.Bold = True
    End With
    WS.Columns("A:C").AutoFit
End Sub

Private Sub WriteToLog(ByVal WS As Worksheet, ByVal LogType As String, ByVal Message As String)
    If WS Is Nothing Then Exit Sub
    Dim NextRow As Long
    NextRow = WS.Cells(WS.Rows.Count, "A").End(xlUp).Row + 1
    WS.Cells(NextRow, "A").Value = Now
    WS.Cells(NextRow, "B").Value = LogType
    WS.Cells(NextRow, "C").Value = Message
End Sub

Private Function GetLastHistoricalColumn(ByVal WS As Worksheet) As Long
    Dim LastCol As Long, i As Long
    Dim DemandForecastStartDate As Date

    On Error Resume Next
    DemandForecastStartDate = CDate(ThisWorkbook.Sheets(DEMAND_SHEET).Cells(1, 3).Value)
    On Error GoTo 0
    If DemandForecastStartDate = 0 Then
        GetLastHistoricalColumn = 8
        Exit Function
    End If

    LastCol = WS.Cells(1, WS.Columns.Count).End(xlToLeft).Column
    GetLastHistoricalColumn = 8
    
    For i = 9 To LastCol
        If IsDate(WS.Cells(1, i).Value) Then
            If CDate(WS.Cells(1, i).Value) < DemandForecastStartDate Then
                 GetLastHistoricalColumn = i
            Else
                 Exit For
            End If
        End If
    Next i
End Function
