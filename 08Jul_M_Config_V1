'@Folder("Configuration")
Option Explicit

'================================================================================================
' Module:      M_Config
' Purpose:     This module defines all global constants and utility functions for the project.
'              It acts as a central control panel for sheet names, column positions,
'              and business logic enumerations.
' Version:     34.0
' Author:      Ayush Goyal
' Date:        08-Jul-2025
'
' Change Log:
' V34.0:       - STAGE 2 REFACTOR: Implemented Dimension Key pattern.
'              - Marked the old `BuildCompositeKey` function as deprecated. The new
'                `cDimensionKey` class is now the standard for creating cache keys.
' V33.0:       - STAGE 1 REFACTOR: Abstracted Data Sources.
'================================================================================================

' --- DEBUGGING & LOGGING FLAGS ---
Public Const DEBUG_MODE As Boolean = False 'TRUE: Prevents file saving, adds more logs. FALSE: Normal operation.

' --- SHEET NAME CONSTANTS ---
Public Const SHEET_STATUS As String = "Product Status"
Public Const SHEET_DEMAND As String = "Demand Forecast"
Public Const SHEET_HISTORY As String = "Historical Sales"
Public Const SHEET_LOG As String = "Log"

' --- DATA SOURCE CONFIGURATION (Public for Global Access) ---
Public g_dsProductStatus As cDataSource
Public g_dsHistory As cDataSource
Public g_dsDemand As cDataSource

' --- REPORT CONFIGURATION (Private for Encapsulation) ---
Private pTierReportCols As Collection
Private pSummaryReportCols As Collection

' --- ENUMERATIONS ---
Public Enum ProductStatus
    psUnknown = 0
    psActive = 1
    psPhaseInOut = 2
    psDiscontinued = 3
    psNew = 4
End Enum

Public Enum logType
    ltInfo
    ltWarning
    ltError
    ltFatal
    ltProfile ' For performance timing
End Enum

'================================================================================================
'--- GLOBAL INITIALIZATION & UTILITY FUNCTIONS ---
'================================================================================================

'---------------------------------------------------------------------------------
' Procedure : InitializeAllConfigs
' Purpose   : A master routine that calls the individual initialization
'             procedures for all configurations (Reports and Data Sources).
'---------------------------------------------------------------------------------
Public Sub InitializeAllConfigs()
    ' Initialize Data Source Mappings First
    InitializeProductStatusSource
    InitializeHistorySource
    InitializeDemandSource
    
    ' Initialize Report Structures
    InitializeTierReportConfig
    InitializeSummaryReportConfig
End Sub

'---------------------------------------------------------------------------------
' Procedure : CleanupAllConfigs
' Purpose   : A public routine to release all configuration objects from memory.
'             Called by M_Forecasting during its cleanup phase.
'---------------------------------------------------------------------------------
Public Sub CleanupAllConfigs()
    ' --- Cleanup Report Configs ---
    Set pTierReportCols = Nothing
    Set pSummaryReportCols = Nothing
    
    ' --- Cleanup Data Source Configs ---
    Set g_dsProductStatus = Nothing
    Set g_dsHistory = Nothing
    Set g_dsDemand = Nothing
End Sub

'---------------------------------------------------------------------------------
' Procedure : GetTierReportCols
' Purpose   : Provides safe, read-only public access to the private Tier Report
'             configuration collection.
' @return  : Collection - The configured collection of cReportColumn objects.
'---------------------------------------------------------------------------------
Public Function GetTierReportCols() As Collection
    Set GetTierReportCols = pTierReportCols
End Function

'---------------------------------------------------------------------------------
' Procedure : GetSummaryReportCols
' Purpose   : Provides safe, read-only public access to the private Summary Report
'             configuration collection.
' @return  : Collection - The configured collection of cReportColumn objects.
'---------------------------------------------------------------------------------
Public Function GetSummaryReportCols() As Collection
    Set GetSummaryReportCols = pSummaryReportCols
End Function

'---------------------------------------------------------------------------------
' Procedure : InitializeTierReportConfig
' Purpose   : Populates the private collection (pTierReportCols) that defines the
'             structure of the detailed Tier report.
'---------------------------------------------------------------------------------
Private Sub InitializeTierReportConfig()
    Set pTierReportCols = New Collection
    
    ' Add each column by defining its header, source property, width, and format.
    AddReportColumn pTierReportCols, "Key Figures", "KeyFigure", 25, "@"
    AddReportColumn pTierReportCols, "Affiliate", "Affiliate", 10, "@"
    AddReportColumn pTierReportCols, "Forecast Tier", "ForecastTier", 30, "@"
    AddReportColumn pTierReportCols, "Forecast Sub-Tier", "ForecastSubTier", 20, "@"
    AddReportColumn pTierReportCols, "Local Item Nbr", "LocalItemNbr", 18, "@"
    AddReportColumn pTierReportCols, "Desc", "Description", 40, "@"
    AddReportColumn pTierReportCols, "I-S-D", "ISD", 15, "@"
    AddReportColumn pTierReportCols, "Status", "StatusString", 20, "@"
    AddReportColumn pTierReportCols, "Phase Out Month", "PhaseOutDate", 15, "mmm-yy"
End Sub

'---------------------------------------------------------------------------------
' Procedure : InitializeSummaryReportConfig
' Purpose   : Populates the private collection (pSummaryReportCols) that defines
'             the structure of the Summary report.
'---------------------------------------------------------------------------------
Private Sub InitializeSummaryReportConfig()
    Set pSummaryReportCols = New Collection
    
    ' The summary sheet has a slightly different layout (no Key Figure column).
    AddReportColumn pSummaryReportCols, "Affiliate", "Affiliate", 10, "@"
    AddReportColumn pSummaryReportCols, "Forecast Tier", "ForecastTier", 30, "@"
    AddReportColumn pSummaryReportCols, "Forecast Sub-Tier", "ForecastSubTier", 20, "@"
    AddReportColumn pSummaryReportCols, "Local Item Nbr", "LocalItemNbr", 18, "@"
    AddReportColumn pSummaryReportCols, "Desc", "Description", 40, "@"
    AddReportColumn pSummaryReportCols, "I-S-D", "ISD", 15, "@"
    AddReportColumn pSummaryReportCols, "Status", "StatusString", 20, "@"
    AddReportColumn pSummaryReportCols, "Phase Out Month", "PhaseOutDate", 15, "mmm-yy"
End Sub

'---------------------------------------------------------------------------------
' Procedure : AddReportColumn
' Purpose   : A private helper function that creates a new cReportColumn object,
'             populates its properties, and adds it to the specified collection.
' @param   : colReport As Collection - The collection to add the new column to.
' @param   : header As String - The text for the column header.
' @param   : prop As String - The corresponding property name in the cProductLifecycle class.
' @param   : width As Double - The desired column width.
' @param   : format As String - The Excel number format string.
'---------------------------------------------------------------------------------
Private Sub AddReportColumn(ByVal colReport As Collection, ByVal header As String, ByVal prop As String, ByVal width As Double, ByVal format As String)
    Dim col As cReportColumn
    Set col = New cReportColumn
    
    col.HeaderText = header
    col.SourceProperty = prop
    col.ColumnWidth = width
    col.NumberFormat = format
    
    colReport.Add col
End Sub

'---------------------------------------------------------------------------------
' Procedure : InitializeProductStatusSource
' Purpose   : Configures the cDataSource object for the "Product Status" sheet.
'---------------------------------------------------------------------------------
Private Sub InitializeProductStatusSource()
    Set g_dsProductStatus = New cDataSource
    With g_dsProductStatus
        .SheetName = SHEET_STATUS
        .MapField "Affiliate", 1
        .MapField "Tier", 2
        .MapField "SubTier", 3
        .MapField "LocalItemNbr", 4
        .MapField "Description", 5
        .MapField "ISD", 6
        .MapField "Status", 7
        .MapField "PhaseOutDate", 8
        .MapField "PhaseOutPercent", 9
        .MapField "SupersededBy", 10
    End With
End Sub

'---------------------------------------------------------------------------------
' Procedure : InitializeHistorySource
' Purpose   : Configures the cDataSource object for the "Historical Sales" sheet.
'---------------------------------------------------------------------------------
Private Sub InitializeHistorySource()
    Set g_dsHistory = New cDataSource
    With g_dsHistory
        .SheetName = SHEET_HISTORY
        .MapField "Affiliate", 1
        .MapField "Tier", 2
        .MapField "SubTier", 3
        .MapField "KeyFigure", 4
        .MapField "LocalItemNbr", 5
        .StartOfMonthsCol = 8
    End With
End Sub

'---------------------------------------------------------------------------------
' Procedure : InitializeDemandSource
' Purpose   : Configures the cDataSource object for the "Demand Forecast" sheet.
'---------------------------------------------------------------------------------
Private Sub InitializeDemandSource()
    Set g_dsDemand = New cDataSource
    With g_dsDemand
        .SheetName = SHEET_DEMAND
        .MapField "Affiliate", 1
        .MapField "KeyFigure", 2
        .MapField "Tier", 3
        .StartOfMonthsCol = 4
    End With
End Sub

'---------------------------------------------------------------------------------
' Procedure : BuildCompositeKey
' Purpose   : DEPRECATED. This function is obsolete and will be removed in a future
'             version. Use the cDimensionKey class to build dictionary keys instead.
'---------------------------------------------------------------------------------
Public Function BuildCompositeKey(ByVal keyPart1 As String, ByVal keyPart2 As String) As String
    Const SEPARATOR As String = "|"
    BuildCompositeKey = Trim$(keyPart1) & SEPARATOR & Trim$(keyPart2)
End Function

'---------------------------------------------------------------------------------
' Procedure : GetStatusString
' Purpose   : Converts a ProductStatus enum value into its user-friendly
'             string representation (e.g., psActive becomes "Active").
' @param   : enmStatus As ProductStatus - The enum value to convert.
' @return  : String - The text representation of the status.
'---------------------------------------------------------------------------------
Public Function GetStatusString(ByVal enmStatus As ProductStatus) As String
    Select Case enmStatus
        Case psActive: GetStatusString = "Active"
        Case psPhaseInOut: GetStatusString = "PhaseIn-PhaseOut"
        Case psDiscontinued: GetStatusString = "Discontinued"
        Case psNew: GetStatusString = "New"
        Case Else: GetStatusString = "Unknown"
    End Select
End Function
