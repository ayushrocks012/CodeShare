Option Explicit

' --- Windows API Declaration for OLE Message Filter ---
Private Declare PtrSafe Function CoRegisterMessageFilter Lib "OLE32.DLL" _
    (ByVal lpMessageFilter As LongPtr, ByRef lplpMessageFilter As LongPtr) As Long

' --- Windows API Declaration for Sleep Function ---
#If VBA7 Then
    Public Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As LongPtr)
#Else
    Public Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
#End If

' --- Global SAP Objects ---
Public objGui As GuiApplication
Public objConn As GuiConnection
Public objSess As GuiSession
Public objSBar As GuiStatusbar

Public Sub StartExtract()
    Const cTARGET_SYSTEM_ID_CLIENT As String = "PEA100"
    Const cTARGET_SYSTEM_DESCRIPTION As String = "9A. Symphony ECC Production"
    Const cSAP_LOGON_PATH As String = "C:\Program Files (x86)\SAP\FrontEnd\SAPgui\saplogon.exe"
    Const cMAX_SESSIONS As Integer = 6
    Const cLOGON_TIMEOUT_SECONDS As Long = 60
    Const cMEDIUM_WAIT_MS As Long = 3000

    Dim SapGuiAuto As Object
    Dim W_conn As GuiConnection, W_Sess As GuiSession
    Dim foundConnection As Boolean, SessionObtained As Boolean
    Dim startTime As Single

    On Error GoTo ErrorHandler

    ' --- STEP 1: Check Existing Global Session ---
    SessionObtained = False
    If Not objSess Is Nothing Then
        If objSess.Info.SystemName & objSess.Info.Client = cTARGET_SYSTEM_ID_CLIENT Then
            Set objConn = objSess.Parent
            Set objSBar = objSess.FindById("wnd[0]/sbar")
            SessionObtained = True
            GoTo RunReportScript
        Else
            Set objSess = Nothing: Set objConn = Nothing: Set objSBar = Nothing: Set objGui = Nothing
        End If
    End If

    ' --- STEP 2: Get SAP GUI Scripting Engine ---
    If objGui Is Nothing Then
        On Error Resume Next
        Set SapGuiAuto = GetObject("SAPGUI")
        If Not SapGuiAuto Is Nothing Then Set objGui = SapGuiAuto.GetScriptingEngine
        On Error GoTo ErrorHandler
    End If

    ' --- STEP 3: Find Existing Connection ---
    foundConnection = False
    If Not objGui Is Nothing Then
        For Each W_conn In objGui.Children
            If W_conn.Children.Count > 0 Then
                Set W_Sess = W_conn.Children(0)
                If W_Sess.Info.SystemName & W_Sess.Info.Client = cTARGET_SYSTEM_ID_CLIENT Then
                    Set objConn = W_conn
                    foundConnection = True
                    Exit For
                End If
            End If
        Next W_conn
    End If

    ' --- STEP 4: Handle Based on Connection Found Status ---
    If foundConnection Then
        For Each W_Sess In objConn.Children
            If UCase(W_Sess.Info.TRANSACTION) = "SESSION_MANAGER" Or _
               UCase(W_Sess.Info.TRANSACTION) = "SMEN" Or _
               UCase(W_Sess.Info.TRANSACTION) = "S000" Then
                Set objSess = W_Sess
                Set objSBar = objSess.FindById("wnd[0]/sbar")
                SessionObtained = True
                Exit For
            End If
        Next W_Sess

        If Not SessionObtained Then
            If objConn.Children.Count < cMAX_SESSIONS Then
                Set objSess = objConn.Children(0)
                objSess.FindById("wnd[0]/tbar[0]/okcd").Text = "/o"
                objSess.FindById("wnd[0]").sendVKey 0
                Sleep cMEDIUM_WAIT_MS
                Set objSess = objConn.Children(objConn.Children.Count - 1)
                Set objSBar = objSess.FindById("wnd[0]/sbar")
                SessionObtained = True
            Else
                MsgBox "Maximum SAP sessions reached. Cannot create new session.", vbCritical
                GoTo Cleanup
            End If
        End If

    Else
        ' --- Integrated EstablishSsoConnection Logic ---
        ' Step 1: Ensure SAP GUI Engine
        If objGui Is Nothing Then
            Shell cSAP_LOGON_PATH, vbNormalFocus
            Sleep 5000
            Set SapGuiAuto = GetObject("SAPGUI")
            Set objGui = SapGuiAuto.GetScriptingEngine
        End If

        ' Step 2: Open Connection
        Set objConn = objGui.OpenConnection(cTARGET_SYSTEM_DESCRIPTION, True)
        Sleep cMEDIUM_WAIT_MS

        ' Step 3: Get Session
        Set objSess = objConn.Children(0)

        ' Step 4: Wait for Session Ready
        startTime = Timer
        Do
            If Timer - startTime > cLOGON_TIMEOUT_SECONDS Then GoTo Cleanup
            If objSess.Info.TRANSACTION <> "" Then Exit Do
            Sleep 1000
        Loop

        ' Step 5: Get Status Bar
        Set objSBar = objSess.FindById("wnd[0]/sbar")
        SessionObtained = True
    End If

RunReportScript:
    If SessionObtained Then RunGUIScript Else MsgBox "Failed to obtain SAP session.", vbCritical

Cleanup:
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    Set SapGuiAuto = Nothing: Set W_conn = Nothing: Set W_Sess = Nothing
    Exit Sub

ErrorHandler:
    MsgBox "Error #" & Err.Number & ": " & Err.Description, vbCritical
    Resume Cleanup
End Sub

Private Sub RunGUIScript()

    ' Constants specific to MB51 Execution
    Const cTRANSACTION As String = "mb51"
    Const cPLANT_COLUMN As String = "D"
    Const cDATE_LOW_COLUMN As String = "B"
    Const cDATE_HIGH_COLUMN As String = "C"
    Const cLAYOUT_COLUMN As String = "E"
    Const cFILENAME_COLUMN As String = "F"
    Const cSTART_ROW As Long = 2
    Const cDOWNLOAD_PATH As String = "Z:\Demand\Demand Review\SAP H2H Report"
    Const cFILENAME_PREFIX As String = "MB51"
    Const cFILENAME_EXTENSION As String = ".XLSX"
    Const cREPORT_EXEC_TIMEOUT_SECONDS As Long = 900
    Const cGRID_ID As String = "wnd[0]/usr/cntlGRID1/shellcont/shell"
    Const cSAP_WAIT_TIME = 500

    Dim ws As Worksheet, objExcelApp As Object
    Dim i As Long, lastRow As Long
    Dim plant As String, dateLow As String, dateHigh As String, layout As String
    Dim formattedDateLow As String, formattedDateHigh As String, formattedTimestamp As String
    Dim dynamicFilename As String
    Dim gridObject As GuiShell
    Dim startTime As Single

    ' OLE Message Filter Variables
    Dim lMsgFilter As LongPtr, lPreviousFilter As LongPtr, hResult As Long

    On Error GoTo ErrorHandler

    ' Connect to Excel
    Set objExcelApp = GetObject(, "Excel.Application")
    Set ws = objExcelApp.Worksheets("Sheet1")
    lastRow = ws.Cells(ws.Rows.Count, cPLANT_COLUMN).End(xlUp).Row

    ' Loop through each Excel row
    For i = cSTART_ROW To lastRow

        plant = Trim(ws.Range(cPLANT_COLUMN & i).Value)
        dateLow = Trim(ws.Range(cDATE_LOW_COLUMN & i).Value)
        dateHigh = Trim(ws.Range(cDATE_HIGH_COLUMN & i).Value)
        layout = Trim(ws.Range(cLAYOUT_COLUMN & i).Value)

        ' Skip if data missing
        If plant = "" Or dateLow = "" Or dateHigh = "" Then
            ws.Range(cFILENAME_COLUMN & i).Value = "Skipped - Missing Data"
            GoTo NextIteration
        End If

        ' Filename generation (original logic)
        formattedDateLow = Format(CDate(dateLow), "YYYYMMDD")
        formattedDateHigh = Format(CDate(dateHigh), "YYYYMMDD")
        formattedTimestamp = Format(Now, "yyyymmdd_hhmmss")
        dynamicFilename = cFILENAME_PREFIX & "_" & plant & "_" & formattedDateLow & "-" & formattedDateHigh & "_" & formattedTimestamp & cFILENAME_EXTENSION

        ' Navigate to MB51 transaction
        objSess.FindById("wnd[0]/tbar[0]/okcd").Text = "/n" & cTRANSACTION
        objSess.FindById("wnd[0]").sendVKey 0
        Sleep cSAP_WAIT_TIME

        ' Clear fields robustly
        On Error Resume Next
        objSess.FindById("wnd[0]/usr/ctxtMATNR-LOW").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtMATNR-HIGH").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtWERKS-LOW").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtLGORT-LOW").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtCHARG-LOW").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtLIFNR-LOW").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtKUNNR-LOW").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtBWART-LOW").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtSOBKZ").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtEBELN").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtGRUND").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtVBELN").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtPOSNR").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtPRCTR").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtSGTXT").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtBUDAT-LOW").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtBUDAT-HIGH").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtUSNAM-LOW").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtVGART-LOW").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtBLDAT").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtAWKEY").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtALV_DEF").Text = ""
        On Error GoTo ErrorHandler

        ' Set required fields
        objSess.FindById("wnd[0]/usr/ctxtWERKS-LOW").Text = plant
        objSess.FindById("wnd[0]/usr/ctxtBUDAT-LOW").Text = dateLow
        objSess.FindById("wnd[0]/usr/ctxtBUDAT-HIGH").Text = dateHigh
        objSess.FindById("wnd[0]/usr/radRFLAT_L").Select
        If layout <> "" Then objSess.FindById("wnd[0]/usr/ctxtALV_DEF").Text = layout

        ' Register OLE Message Filter
        lMsgFilter = 0&
        lPreviousFilter = 0&
        hResult = CoRegisterMessageFilter(lMsgFilter, lPreviousFilter)

        ' Execute report and export
        objSess.FindById("wnd[0]/tbar[1]/btn[8]").press
        startTime = Timer
        Do
            Set gridObject = objSess.FindById(cGRID_ID)
            If Not gridObject Is Nothing Then Exit Do
            If Timer - startTime > cREPORT_EXEC_TIMEOUT_SECONDS Then Err.Raise vbObjectError, , "Timeout waiting for report."
            Sleep 500
        Loop

        gridObject.ContextMenu
        gridObject.SelectContextMenuItem "&XXL"
        Sleep 500
        objSess.FindById("wnd[1]/tbar[0]/btn[0]").press
        Sleep 500
        objSess.FindById("wnd[1]/usr/ctxtDY_PATH").Text = cDOWNLOAD_PATH
        objSess.FindById("wnd[1]/usr/ctxtDY_FILENAME").Text = dynamicFilename
        objSess.FindById("wnd[1]/tbar[0]/btn[11]").press
        Sleep 1500

        ' Unregister OLE Filter
        If lPreviousFilter <> 0 Then
            CoRegisterMessageFilter lPreviousFilter, lMsgFilter
        End If

        ws.Range(cFILENAME_COLUMN & i).Value = dynamicFilename

NextIteration:
        Sleep 1000
    Next i

Cleanup:
    Set ws = Nothing: Set objExcelApp = Nothing
    Exit Sub

ErrorHandler:
    MsgBox "Error #" & Err.Number & ": " & Err.Description, vbCritical
    Resume Cleanup
End Sub
