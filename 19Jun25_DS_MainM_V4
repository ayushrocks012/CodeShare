'@Folder("Forecasting")
Option Explicit

'================================================================================================================
' --- FORECASTING ENGINE MODULE (M_Forecasting) ---
' V14.7: Architectural Improvements
'      - Implemented suggestions to improve maintainability, performance, and robustness.
'      - Centralized composite key creation.
'      - Replaced Select Case with Dictionary for Enum mapping.
'      - Enhanced logging with error numbers and context.
'      - Replaced magic numbers and strings with helper functions and constants.
'      - Implemented safer, more granular error handling.
'
' Author:      Ayush Goyal
' Date:        20-Jun-2025
'================================================================================================================

'--- PRIVATE MODULE-LEVEL VARIABLES ---
Private wbHost As Workbook
Private wsLog As Worksheet
Private lngWarningCount As Long
Private dictDemandCache As Object
Private dictStatusMap As Object ' For mapping strings to ProductStatus enums
Private arrStatusData As Variant, arrHistoryData As Variant, arrDemandData As Variant
Private dictLifecycleMap As Object, dictAffiliates As Object

'================================================================================================================
' 1. Main Public Orchestrator
'================================================================================================================

'@Ignore ProcedureNotUsed
' This is the main entry point, intended to be called by the user.
Public Sub UpdateForecast_V7()
    Dim tStart As Double: tStart = Timer
    
    If Not InitializeRun() Then GoTo Main_Exit
    If Not LoadAndValidateData() Then GoTo Main_Exit
    
    BuildCachesAndMaps
    ProcessAllAffiliates
    
Main_Exit:
    FinalizeRun tStart
End Sub

'================================================================================================================
' 2. Main Workflow Stages
'================================================================================================================

Private Function InitializeRun() As Boolean
    Dim tCheckpoint As Double: tCheckpoint = Timer
    
    Application.EnableCancelKey = xlErrorHandler
    On Error GoTo Init_ErrorHandler
    
    If ThisWorkbook.ReadOnly Then
        MsgBox "This workbook is in Read-Only mode. Please save a copy or enable editing to run the forecast.", vbCritical, "Process Halted"
        Exit Function
    End If
    
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.Calculation = xlCalculationManual
    Application.EnableEvents = False
    Application.StatusBar = "Initializing environment..."
    
    lngWarningCount = 0
    Set wbHost = ThisWorkbook
    
    InitializeStatusMap 'Set up the string-to-enum dictionary
    
    '--- Safely delete and create log sheet ---
    On Error Resume Next
    wbHost.Sheets(SHEET_LOG).Delete
    On Error GoTo Init_ErrorHandler 'Re-enable standard error handling
    
    Set wsLog = wbHost.Sheets.Add(After:=wbHost.Sheets(wbHost.Sheets.Count))
    InitializeLogSheet wsLog
    
    LogPerformance tCheckpoint, "Initialize Environment"
    InitializeRun = True
    Exit Function

Init_ErrorHandler:
    MsgBox "A critical error occurred during initialization: " & Err.Description, vbCritical, "Initialization Failed"
    InitializeRun = False
End Function

Private Function LoadAndValidateData() As Boolean
    Dim tCheckpoint As Double: tCheckpoint = Timer
    On Error GoTo Load_ErrorHandler
    
    Application.StatusBar = "Loading and validating source data..."
    
    arrStatusData = LoadDataToArray(wbHost.Sheets(SHEET_STATUS))
    arrHistoryData = LoadDataToArray(wbHost.Sheets(SHEET_HISTORY))
    arrDemandData = LoadDataToArray(wbHost.Sheets(SHEET_DEMAND))
    
    If Not IsArray(arrStatusData) Or UBound(arrStatusData, 1) < 2 Then Err.Raise 515, , "Sheet '" & SHEET_STATUS & "' is missing or empty."
    If Not IsArray(arrHistoryData) Or UBound(arrHistoryData, 1) < 2 Then Err.Raise 516, , "Sheet '" & SHEET_HISTORY & "' is missing or empty."
    If Not IsArray(arrDemandData) Or UBound(arrDemandData, 1) < 2 Then Err.Raise 517, , "Sheet '" & SHEET_DEMAND & "' is missing or empty."
    
    WriteToLog "Info", "LoadAndValidateData", "All source data loaded and validated."
    LogPerformance tCheckpoint, "Load & Validate Data"
    LoadAndValidateData = True
    Exit Function

Load_ErrorHandler:
    Dim strErrorMsg As String: strErrorMsg = "Failed to load source sheets. " & vbCrLf & vbCrLf & Err.Description
    WriteToLog "FATAL", "LoadAndValidateData", strErrorMsg, Err.Number
    MsgBox strErrorMsg, vbCritical, "Process Halted"
    LoadAndValidateData = False
End Function

Private Sub BuildCachesAndMaps()
    Dim tCheckpoint As Double: tCheckpoint = Timer
    
    Set dictLifecycleMap = BuildLifecycleMap(arrStatusData)
    LogPerformance tCheckpoint, "Build Lifecycle Map"
    
    Set dictAffiliates = GetUniqueAffiliates(arrDemandData)
    CacheDemandDataRows arrDemandData
    LogPerformance tCheckpoint, "Cache Demand & Affiliate Data"
End Sub

Private Sub ProcessAllAffiliates()
    Dim varAffiliateKey As Variant, strCurrentAffiliate As String
    Dim lngAffiliateCounter As Long, lngTotalAffiliates As Long
    Dim tCheckpoint As Double: tCheckpoint = Timer
    
    lngTotalAffiliates = dictAffiliates.Count
    If lngTotalAffiliates = 0 Then
        WriteToLog "Warning", "ProcessAllAffiliates", "No affiliates found. Nothing to process."
        Exit Sub
    End If
    
    Dim lngHistMonthCount As Long
    lngHistMonthCount = GetHistoricalMonthCount(arrDemandData, arrHistoryData)
    
    For Each varAffiliateKey In dictAffiliates.Keys
        strCurrentAffiliate = CStr(varAffiliateKey)
        lngAffiliateCounter = lngAffiliateCounter + 1
        On Error GoTo Affiliate_ErrorHandler
        
        If Not DEBUG_MODE Then
            Application.StatusBar = "Processing Affiliate: " & strCurrentAffiliate & " (" & lngAffiliateCounter & " of " & lngTotalAffiliates & ")..."
        End If
        WriteToLog "Info", "ProcessAllAffiliates", "Starting: " & strCurrentAffiliate
        
        ProcessForecastForAffiliate strCurrentAffiliate, lngHistMonthCount
        
        GoTo Next_Affiliate

Affiliate_ErrorHandler:
        lngWarningCount = lngWarningCount + 1
        WriteToLog "Error", "ProcessAllAffiliates", "Failed affiliate '" & strCurrentAffiliate & "'.", Err.Number, Err.Description
        Resume Next_Affiliate
        
Next_Affiliate:
        CleanupAffiliateSheets strCurrentAffiliate
        On Error GoTo 0
    Next varAffiliateKey
    
    LogPerformance tCheckpoint, "Process All Affiliates"
End Sub

Private Sub FinalizeRun(ByVal tStart As Double)
    On Error Resume Next 'Ensure cleanup completes
    
    Dim lngAffiliateCount As Long
    If Not dictAffiliates Is Nothing Then lngAffiliateCount = dictAffiliates.Count
    
    CleanupMemory
    
    Application.StatusBar = False
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    Application.EnableEvents = True
    Application.EnableCancelKey = xlInterrupt
    
    Dim strMessage As String
    strMessage = "Forecast process completed in " & Format$(Timer - tStart, "#,##0.00") & " seconds." & vbCrLf & vbCrLf
    strMessage = strMessage & "Affiliates Processed: " & lngAffiliateCount & vbCrLf
    strMessage = strMessage & "Warnings: " & lngWarningCount & " (see Log sheet for details)"
    
    MsgBox strMessage, IIf(lngWarningCount > 0, vbExclamation, vbInformation), "Forecast Update Complete"
End Sub

'================================================================================================================
' 3. Core Logic & Calculation Functions
'================================================================================================================

Private Sub ProcessForecastForAffiliate(ByVal strAffiliate As String, ByVal lngHistMonthCount As Long)
    Dim wsSummary As Worksheet, wsTier As Worksheet
    Dim colTierSheets As Collection
    Dim tTierStart As Double
    
    Set wsSummary = wbHost.Sheets.Add(After:=wbHost.Sheets(wbHost.Sheets.Count))
    wsSummary.Name = TEMP_SHEET_PREFIX & "Summary"
    
    CreateTierSheets strAffiliate, wsSummary
    Set colTierSheets = GetAffiliateTierSheets(strAffiliate)
    
    Dim dictTierSumCache As Object: Set dictTierSumCache = CreateObject("Scripting.Dictionary")
    Dim dictSubTierSumCache As Object: Set dictSubTierSumCache = CreateObject("Scripting.Dictionary")
    
    For Each wsTier In colTierSheets
        tTierStart = Timer
        If wsTier.Cells(wsTier.Rows.Count, "A").End(xlUp).Row > 1 Then
            CalculateAndFormatTierSheet wsTier, strAffiliate, lngHistMonthCount, dictTierSumCache, dictSubTierSumCache
            AppendToSummarySheet wsTier, wsSummary
        Else
            WriteToLog "Info", "ProcessForecastForAffiliate", "Skipping empty tier sheet: " & wsTier.Name
        End If
        LogPerformance tTierStart, "Tier Processed: " & wsTier.Name
    Next wsTier
    
    If Not DEBUG_MODE Then
        FormatEnhancedSheet wsSummary
    End If
    
    GenerateAffiliateReport strAffiliate, wsSummary
End Sub

Private Sub CalculateAndFormatTierSheet(ByVal wsTier As Worksheet, ByVal strAffiliate As String, ByVal lngHistMonthCount As Long, ByVal dictTierSumCache As Object, ByVal dictSubTierSumCache As Object)
    Dim arrOutput() As Variant
    Dim strCurrentProductID As String
    
    On Error GoTo Calc_ErrorHandler
    
    arrOutput = BuildTierOutputArray(wsTier, strAffiliate, strCurrentProductID, lngHistMonthCount, dictTierSumCache, dictSubTierSumCache)
    If Not IsArray(arrOutput) Then Exit Sub
    
    wsTier.Cells.Clear
    wsTier.Range("A1").Resize(UBound(arrOutput, 1), UBound(arrOutput, 2)).Value = arrOutput
    
    If Not DEBUG_MODE Then
        FormatEnhancedSheet wsTier
    End If
    
    Exit Sub
    
Calc_ErrorHandler:
    lngWarningCount = lngWarningCount + 1
    Dim strContext As String
    If strCurrentProductID <> "" Then strContext = " (last processed product: " & strCurrentProductID & ")"
    WriteToLog "Error", "CalculateAndFormatTierSheet", "Failed on sheet '" & wsTier.Name & "'" & strContext, Err.Number, Err.Description
End Sub

Private Function BuildTierOutputArray(ByVal wsTier As Worksheet, ByVal strAffiliate As String, ByRef strErrorProductID As String, ByVal lngMonthCount As Long, ByVal dictTierSumCache As Object, ByVal dictSubTierSumCache As Object) As Variant
    Dim lngTierLRow As Long, r As Long, c As Long
    Dim arrHeaderRow As Variant: arrHeaderRow = GetCombinedHeaderRow(lngMonthCount)
    
    AddNewProductsToTierSheet wsTier, strAffiliate
    lngTierLRow = wsTier.Cells(wsTier.Rows.Count, COL_AFFILIATE).End(xlUp).Row
    If lngTierLRow < 2 Then Exit Function
    
    Dim arrOutput() As Variant: ReDim arrOutput(1 To lngTierLRow, 1 To UBound(arrHeaderRow))
    
    For c = 1 To UBound(arrHeaderRow): arrOutput(1, c) = arrHeaderRow(c): Next c
    For r = 2 To lngTierLRow: For c = 1 To 6: arrOutput(r, c) = wsTier.Cells(r, c).Value: Next c: Next r
    
    For r = 2 To lngTierLRow
        strErrorProductID = arrOutput(r, COL_ISD)
        
        Dim strCompositeKey As String: strCompositeKey = BuildCompositeKey(strAffiliate, strErrorProductID)
        Dim objLifecycle As cProductLifecycle
        If dictLifecycleMap.Exists(strCompositeKey) Then Set objLifecycle = dictLifecycleMap.Item(strCompositeKey) Else Set objLifecycle = New cProductLifecycle
        
        arrOutput(r, COL_STATUS) = GetStatusString(objLifecycle.Status)
        If objLifecycle.PhaseOutDate > 0 Then arrOutput(r, COL_PHASE_OUT_DATE) = objLifecycle.PhaseOutDate
        Dim arrHistoricSales As Variant: arrHistoricSales = GetHistoricalDataRow(strAffiliate, strErrorProductID, lngMonthCount + 6)
        For c = 1 To UBound(arrHistoricSales): arrOutput(r, c + 8) = arrHistoricSales(c): Next c
        
        PopulateForecastValues arrOutput, r, objLifecycle, strAffiliate, arrOutput(r, COL_TIER), lngMonthCount, dictTierSumCache, dictSubTierSumCache
        
        Set objLifecycle = Nothing
    Next r
    
    strErrorProductID = ""
    BuildTierOutputArray = arrOutput
End Function

Private Sub PopulateForecastValues(ByRef arrOutput As Variant, ByVal lngRow As Long, ByVal objLifecycle As cProductLifecycle, ByVal strAffiliate As String, ByVal strTier As String, ByVal lngMonthCount As Long, ByVal dictTierSumCache As Object, ByVal dictSubTierSumCache As Object)
    Dim lngDemandRow As Long, c As Long
    Dim dblSubTierSum As Double, dblTierSum As Double
    
    Dim strSubTierKey As String: strSubTierKey = BuildCompositeKey(BuildCompositeKey(strAffiliate, strTier), arrOutput(lngRow, COL_SUB_TIER))
    If dictSubTierSumCache.Exists(strSubTierKey) Then
        dblSubTierSum = dictSubTierSumCache.Item(strSubTierKey)
    Else
        dblSubTierSum = GetHistoricalSubTierSum(strAffiliate, strTier, arrOutput(lngRow, COL_SUB_TIER), lngMonthCount + 6)
        dictSubTierSumCache.Add strSubTierKey, dblSubTierSum
    End If
    
    Dim strTierKey As String: strTierKey = BuildCompositeKey(strAffiliate, strTier)
    If dictTierSumCache.Exists(strTierKey) Then
        dblTierSum = dictTierSumCache.Item(strTierKey)
    Else
        dblTierSum = GetHistoricalTierSum(strAffiliate, strTier, lngMonthCount + 6)
        dictTierSumCache.Add strTierKey, dblTierSum
    End If
    
    lngDemandRow = GetDemandDataRow(strAffiliate, strTier)
    
    If lngDemandRow > 0 Then
        Dim lngForecastStartCol As Long: lngForecastStartCol = 8 + lngMonthCount + 1
        For c = lngForecastStartCol To UBound(arrOutput, 2)
            arrOutput(lngRow, c) = CalculateForecastValue(objLifecycle, arrOutput(1, c), dblSubTierSum, dblTierSum, arrDemandData(lngDemandRow, (c - lngForecastStartCol) + COL_DEMAND_START))
        Next c
    End If
End Sub

Private Function CalculateForecastValue(ByVal objLifecycle As cProductLifecycle, ByVal dteForecastDate As Date, ByVal dblSubTierSum As Double, ByVal dblTierSum As Double, ByVal dblTierDemand As Double) As Double
    Dim dblBaseForecast As Double
    If dblTierSum > 0 And IsNumeric(dblTierDemand) Then
        dblBaseForecast = (dblSubTierSum * CDbl(dblTierDemand)) / dblTierSum
    End If
    CalculateForecastValue = dblBaseForecast * objLifecycle.GetForecastMultiplier(dteForecastDate)
End Function

Private Function BuildLifecycleMap(ByVal arrStatusData As Variant) As Object
    Dim r As Long, varCompositeKey As Variant, objTempLifecycle As cProductLifecycle
    Dim dictMap As Object: Set dictMap = CreateObject("Scripting.Dictionary")
    On Error GoTo BuildMap_ErrorHandler
    
    For r = 2 To UBound(arrStatusData, 1)
        If Len(Trim$(arrStatusData(r, COL_ISD))) > 0 And Len(Trim$(arrStatusData(r, COL_AFFILIATE))) > 0 Then
            varCompositeKey = BuildCompositeKey(arrStatusData(r, COL_AFFILIATE), arrStatusData(r, COL_ISD))
            If dictMap.Exists(varCompositeKey) Then
                WriteToLog "Warning", "BuildLifecycleMap", "Duplicate product key found: '" & varCompositeKey & "'", , "Row " & r
            Else
                Set objTempLifecycle = New cProductLifecycle
                objTempLifecycle.Init arrStatusData, r
                dictMap.Add varCompositeKey, objTempLifecycle
            End If
        Else
            WriteToLog "Warning", "BuildLifecycleMap", "Missing Affiliate or I-S-D. Skipped.", , "Row " & r
        End If
    Next r

    For Each varCompositeKey In dictMap.Keys
        dictMap.Item(varCompositeKey).LinkSuccessor dictMap
    Next varCompositeKey
    
    Set BuildLifecycleMap = dictMap
    Exit Function
    
BuildMap_ErrorHandler:
    WriteToLog "FATAL", "BuildLifecycleMap", "Error building lifecycle map.", Err.Number, Err.Description
End Function

'================================================================================================================
' 4. Utility & Helper Functions
'================================================================================================================

Private Sub AddNewProductsToTierSheet(ByVal wsTier As Worksheet, ByVal strAffiliate As String)
    On Error GoTo AddNew_ErrorHandler
    Dim dictExistingProducts As Object: Set dictExistingProducts = CreateObject("Scripting.Dictionary")
    Dim lngTierLRow As Long: lngTierLRow = wsTier.Cells(wsTier.Rows.Count, COL_ISD).End(xlUp).Row
    
    If lngTierLRow > 1 Then
        Dim arrExisting As Variant, r As Long
        arrExisting = wsTier.Range("F2:F" & lngTierLRow).Value
        If IsArray(arrExisting) Then
            For r = 1 To UBound(arrExisting, 1): dictExistingProducts(arrExisting(r, 1)) = 1: Next r
        ElseIf Not IsEmpty(arrExisting) Then
            dictExistingProducts(arrExisting) = 1
        End If
    End If
    
    Dim strTierName As String: strTierName = Replace(wsTier.Name, TEMP_SHEET_PREFIX, "")
    
    Dim rStatus As Long, strStatus As String, strProduct As String
    For rStatus = 2 To UBound(arrStatusData, 1)
        If LCase$(Trim$(arrStatusData(rStatus, COL_AFFILIATE))) = LCase$(strAffiliate) And LCase$(Trim$(arrStatusData(rStatus, COL_TIER))) = LCase$(strTierName) Then
            If GetStatusEnum(Trim$(arrStatusData(rStatus, COL_STATUS))) = psNew Then
                strProduct = Trim$(arrStatusData(rStatus, COL_ISD))
                If Not dictExistingProducts.Exists(strProduct) Then
                    lngTierLRow = wsTier.Cells(wsTier.Rows.Count, "A").End(xlUp).Row + 1
                    wsTier.Range("A" & lngTierLRow).Resize(1, 6).Value = Array(arrStatusData(rStatus, 1), arrStatusData(rStatus, 2), arrStatusData(rStatus, 3), arrStatusData(rStatus, 4), arrStatusData(rStatus, 5), arrStatusData(rStatus, 6))
                    dictExistingProducts.Add strProduct, 1
                End If
            End If
        End If
    Next rStatus
    Exit Sub
    
AddNew_ErrorHandler:
    lngWarningCount = lngWarningCount + 1
    WriteToLog "Error", "AddNewProductsToTierSheet", "Failed to add new products.", Err.Number, "Sheet: " & wsTier.Name
End Sub

Private Function GetAffiliateTierSheets(ByVal strAffiliate As String) As Collection
    Dim colSheets As Collection: Set colSheets = New Collection
    Dim ws As Worksheet
    
    For Each ws In wbHost.Worksheets
        If Left$(ws.Name, Len(TEMP_SHEET_PREFIX)) = TEMP_SHEET_PREFIX And ws.Name <> TEMP_SHEET_PREFIX & "Summary" Then
            colSheets.Add ws
        End If
    Next ws
    
    Set GetAffiliateTierSheets = colSheets
End Function

Private Sub CreateTierSheets(ByVal strAffiliate As String, ByVal wsSummary As Worksheet)
    On Error GoTo TierSheet_ErrorHandler
    Dim dictTiers As Object: Set dictTiers = CreateObject("Scripting.Dictionary")
    Dim r As Long, strTier As String
    
    ' Collect all unique tiers for the affiliate first
    For r = 2 To UBound(arrDemandData, 1)
        If LCase$(Trim$(arrDemandData(r, COL_AFFILIATE))) = LCase$(strAffiliate) Then
            strTier = Trim$(arrDemandData(r, COL_TIER))
            If Len(strTier) > 0 Then dictTiers(strTier) = 1
        End If
    Next r
    
    ' Create sheets for each unique tier
    Dim varTier As Variant, wsNewTier As Worksheet
    For Each varTier In dictTiers.Keys
        strTier = CStr(varTier)
        Set wsNewTier = wbHost.Sheets.Add(After:=wbHost.Sheets(wbHost.Sheets.Count))
        wsNewTier.Name = TEMP_SHEET_PREFIX & strTier
        SetupOutputSheetHeaders wsNewTier
        PopulateTierSheetWithProducts wsNewTier, strAffiliate, strTier
    Next varTier
    
    Exit Sub
TierSheet_ErrorHandler:
    lngWarningCount = lngWarningCount + 1
    WriteToLog "Error", "CreateTierSheets", "Could not create tier sheets.", Err.Number, "Affiliate: " & strAffiliate
End Sub

Private Sub PopulateTierSheetWithProducts(ByVal wsTier As Worksheet, ByVal strAffiliate As String, ByVal strTier As String)
    Dim lngNextFreeRow As Long: lngNextFreeRow = 2
    Dim r As Long
    For r = 2 To UBound(arrStatusData, 1)
        If LCase$(Trim$(arrStatusData(r, COL_AFFILIATE))) = LCase$(strAffiliate) And LCase$(Trim$(arrStatusData(r, COL_TIER))) = LCase$(strTier) Then
            wsTier.Range("A" & lngNextFreeRow).Resize(1, 6).Value = Array(arrStatusData(r, 1), arrStatusData(r, 2), arrStatusData(r, 3), arrStatusData(r, 4), arrStatusData(r, 5), arrStatusData(r, 6))
            lngNextFreeRow = lngNextFreeRow + 1
        End If
    Next r
End Sub

Private Sub GenerateAffiliateReport(ByVal strAffiliate As String, ByVal wsSummary As Worksheet)
    On Error GoTo Report_ErrorHandler
    Dim wbReport As Workbook
    Set wbReport = CreateOutputWorkbook(strAffiliate, wsSummary)
    
    If Not wbReport Is Nothing Then
        If Not DEBUG_MODE Then
            Dim strFilePath As String: strFilePath = GetOutputFilePath(wbHost.Path, strAffiliate)
            Application.StatusBar = "Saving final report for " & strAffiliate & "..."
            wbReport.SaveAs strFilePath
            wbReport.Close SaveChanges:=False
            WriteToLog "Info", "GenerateAffiliateReport", "Report saved to " & strFilePath
        Else
            WriteToLog "Debug", "GenerateAffiliateReport", "DEBUG MODE: Report for " & strAffiliate & " created but not saved/closed."
        End If
    End If
    
    Exit Sub
Report_ErrorHandler:
    lngWarningCount = lngWarningCount + 1
    WriteToLog "Error", "GenerateAffiliateReport", "Could not generate or save report.", Err.Number, "Affiliate: " & strAffiliate
End Sub

Private Sub CleanupAffiliateSheets(ByVal strAffiliate As String)
    On Error Resume Next
    Application.DisplayAlerts = False
    Dim ws As Worksheet
    For Each ws In wbHost.Worksheets
        If Left$(ws.Name, Len(TEMP_SHEET_PREFIX)) = TEMP_SHEET_PREFIX Then
            ws.Delete
        End If
    Next ws
    Application.DisplayAlerts = True
    On Error GoTo 0
End Sub

Private Sub CleanupMemory()
    On Error Resume Next
    Erase arrStatusData
    Erase arrHistoryData
    Erase arrDemandData
    Set dictLifecycleMap = Nothing
    Set dictAffiliates = Nothing
    Set dictDemandCache = Nothing
    Set dictStatusMap = Nothing
    On Error GoTo 0
End Sub

Private Sub CacheDemandDataRows(ByVal arrDemand As Variant)
    Set dictDemandCache = CreateObject("Scripting.Dictionary")
    If Not IsArray(arrDemand) Then Exit Sub
    
    Dim r As Long, strKey As String
    For r = 2 To UBound(arrDemand, 1)
        strKey = BuildCompositeKey(arrDemand(r, COL_AFFILIATE), arrDemand(r, COL_TIER))
        If Not dictDemandCache.Exists(strKey) Then
            dictDemandCache.Add strKey, r
        End If
    Next r
End Sub

Private Function GetDemandDataRow(ByVal strAffiliate As String, ByVal strTier As String) As Long
    Dim strKey As String: strKey = BuildCompositeKey(strAffiliate, strTier)
    If dictDemandCache.Exists(strKey) Then GetDemandDataRow = dictDemandCache.Item(strKey)
End Function

Private Function GetUniqueAffiliates(ByVal arrDemandData As Variant) As Object
    Dim dict As Object: Set dict = CreateObject("Scripting.Dictionary")
    If IsArray(arrDemandData) Then
        Dim r As Long
        For r = 2 To UBound(arrDemandData, 1)
            If Not IsEmpty(arrDemandData(r, COL_AFFILIATE)) Then
                dict(arrDemandData(r, COL_AFFILIATE)) = 1
            End If
        Next r
    End If
    Set GetUniqueAffiliates = dict
End Function

Private Function GetHistoricalDataRow(ByVal strAffiliate As String, ByVal strProduct As String, ByVal lngHistColCount As Long) As Variant
    Dim arrResult() As Variant: ReDim arrResult(1 To lngHistColCount - 6)
    Dim r As Long, c As Long
    For r = 2 To UBound(arrHistoryData, 1)
        If Trim$(arrHistoryData(r, COL_AFFILIATE)) = strAffiliate And Trim$(arrHistoryData(r, COL_ISD)) = strProduct Then
            For c = COL_HISTORY_START To lngHistColCount: arrResult(c - (COL_HISTORY_START - 1)) = arrHistoryData(r, c): Next c
            GetHistoricalDataRow = arrResult
            Exit Function
        End If
    Next r
    GetHistoricalDataRow = arrResult
End Function

Private Function GetHistoricalTierSum(ByVal strAffiliate As String, ByVal strTier As String, ByVal lngHistLCol As Long) As Double
    Dim dblTotalSum As Double, r As Long, c As Long
    For r = 2 To UBound(arrHistoryData, 1)
        If LCase$(Trim$(arrHistoryData(r, COL_AFFILIATE))) = LCase$(strAffiliate) And LCase$(Trim$(arrHistoryData(r, COL_TIER))) = LCase$(strTier) Then
            Dim strCompositeKey As String: strCompositeKey = BuildCompositeKey(arrHistoryData(r, COL_AFFILIATE), arrHistoryData(r, COL_ISD))
            Dim objLifecycle As cProductLifecycle
            If dictLifecycleMap.Exists(strCompositeKey) Then
                Set objLifecycle = dictLifecycleMap.Item(strCompositeKey)
                Dim varValue As Variant
                If objLifecycle.Status <> psDiscontinued Then
                    For c = COL_HISTORY_START To lngHistLCol
                        varValue = arrHistoryData(r, c)
                        If IsNumeric(varValue) Then dblTotalSum = dblTotalSum + CDbl(varValue)
                    Next c
                Else
                    For c = COL_HISTORY_START To lngHistLCol
                        varValue = arrHistoryData(r, c)
                        If objLifecycle.PhaseOutDate > 0 And IsDate(arrHistoryData(1, c)) Then
                            If CDate(arrHistoryData(1, c)) < objLifecycle.PhaseOutDate Then
                                If IsNumeric(varValue) Then dblTotalSum = dblTotalSum + CDbl(varValue)
                            End If
                        End If
                    Next c
                End If
            End If
        End If
    Next r
    GetHistoricalTierSum = dblTotalSum
End Function

Private Function GetHistoricalSubTierSum(ByVal strAffiliate As String, ByVal strTier As String, ByVal strSubTier As String, ByVal lngHistLCol As Long) As Double
    Dim dblTotalSum As Double, r As Long, c As Long
    For r = 2 To UBound(arrHistoryData, 1)
        If LCase$(Trim$(arrHistoryData(r, COL_AFFILIATE))) = LCase$(strAffiliate) And LCase$(Trim$(arrHistoryData(r, COL_TIER))) = LCase$(strTier) And LCase$(Trim$(arrHistoryData(r, COL_SUB_TIER))) = LCase$(strSubTier) Then
            For c = COL_HISTORY_START To lngHistLCol
                Dim varValue As Variant: varValue = arrHistoryData(r, c)
                If IsNumeric(varValue) Then dblTotalSum = dblTotalSum + CDbl(varValue)
            Next c
        End If
    Next r
    GetHistoricalSubTierSum = dblTotalSum
End Function

Private Function GetOutputFilePath(ByVal strBasePath As String, ByVal strAffiliate As String) As String
    GetOutputFilePath = strBasePath & "\Demand ForeCast - " & strAffiliate & " - " & Format$(Now, "DDMMYYYY_HHMMSS") & ".xlsx"
End Function

Private Sub SetupOutputSheetHeaders(ByVal ws As Worksheet)
    ws.Range("A1:H1").Value = Array("Affiliate", "Forecast Tier", "Forecast Sub-Tier", "Local Item Nbr", "Desc", "I-S-D", "Active/Discontinued", "Phase Out Month")
End Sub

Private Function CreateOutputWorkbook(ByVal strAffiliate As String, ByVal wsSummary As Worksheet) As Workbook
    Dim colSheetsToCopy As Collection: Set colSheetsToCopy = GetAffiliateTierSheets(strAffiliate)
    colSheetsToCopy.Add wsSummary, Before:=1
    
    If colSheetsToCopy.Count < 2 And wsSummary.Cells(wsSummary.Rows.Count, "A").End(xlUp).Row < 2 Then Exit Function
    
    Dim arrSheetNames() As String: ReDim arrSheetNames(1 To colSheetsToCopy.Count)
    Dim i As Long, ws As Worksheet, wbReport As Workbook
    For i = 1 To colSheetsToCopy.Count: arrSheetNames(i) = colSheetsToCopy(i).Name: Next i
    
    wbHost.Sheets(arrSheetNames).Copy
    Set wbReport = ActiveWorkbook
    
    With wbReport.Sheets(TEMP_SHEET_PREFIX & "Summary")
        .Name = SHEET_SUMMARY_PREFIX
    End With
    
    For Each ws In wbReport.Worksheets
        ' Sanitize sheet name if it's a tier sheet
        If Left$(ws.Name, Len(TEMP_SHEET_PREFIX)) = TEMP_SHEET_PREFIX Then
            ws.Name = SanitizeSheetName(Replace(ws.Name, TEMP_SHEET_PREFIX, ""))
        End If
        
        Dim findRow As Range, findCol As Range
        Set findRow = ws.Cells.Find(What:="*", SearchOrder:=xlByRows, SearchDirection:=xlPrevious)
        Set findCol = ws.Cells.Find(What:="*", SearchOrder:=xlByColumns, SearchDirection:=xlPrevious)
        
        If Not findRow Is Nothing Then
            With ws.Range("A1", ws.Cells(findRow.Row, findCol.Column))
                .Value = .Value
            End With
            ws.Cells.EntireColumn.AutoFit
        End If
    Next ws
    
    Application.CutCopyMode = False
    wbReport.Sheets(SHEET_SUMMARY_PREFIX).Activate
    Set CreateOutputWorkbook = wbReport
End Function

Private Function GetHistoricalMonthCount(ByVal arrDemand As Variant, ByVal arrHistory As Variant) As Long
    If UBound(arrDemand, 2) < COL_DEMAND_START Or Not IsDate(arrDemand(1, COL_DEMAND_START)) Then
        WriteToLog "Warning", "GetHistoricalMonthCount", "Demand forecast start date is missing or invalid. Count set to 0."
        Exit Function
    End If
    
    Dim dteStartDate As Date: dteStartDate = CDate(arrDemand(1, COL_DEMAND_START))
    Dim lngCurrCol As Long, lngCount As Long
    For lngCurrCol = COL_HISTORY_START To UBound(arrHistory, 2)
        If IsDate(arrHistory(1, lngCurrCol)) Then
            If CDate(arrHistory(1, lngCurrCol)) < dteStartDate Then lngCount = lngCount + 1 Else Exit For
        End If
    Next lngCurrCol
    GetHistoricalMonthCount = lngCount
End Function

Private Function GetCombinedHeaderRow(ByVal lngMonthCount As Long) As Variant
    Dim arrHistHeaders() As Variant, arrDemandHeaders() As Variant, arrCombined() As Variant, c As Long
    
    If lngMonthCount > 0 Then
        ReDim arrHistHeaders(1 To lngMonthCount)
        For c = 1 To lngMonthCount: arrHistHeaders(c) = arrHistoryData(1, c + (COL_HISTORY_START - 1)): Next c
    End If
    
    arrDemandHeaders = Application.WorksheetFunction.Index(arrDemandData, 1, 0)
    ReDim arrCombined(1 To 8 + lngMonthCount + (UBound(arrDemandData, 2) - 2))
    arrCombined(1) = "Affiliate": arrCombined(2) = "Forecast Tier": arrCombined(3) = "Forecast Sub-Tier": arrCombined(4) = "Local Item Nbr"
    arrCombined(5) = "Desc": arrCombined(6) = "I-S-D": arrCombined(7) = "Active/Discontinued": arrCombined(8) = "Phase Out Month"
    
    If lngMonthCount > 0 Then
        For c = 1 To UBound(arrHistHeaders): arrCombined(c + 8) = arrHistHeaders(c): Next c
    End If
    
    For c = 3 To UBound(arrDemandData, 2)
        arrCombined(c + 8 + lngMonthCount - 2) = arrDemandHeaders(c)
    Next c
    
    GetCombinedHeaderRow = arrCombined
End Function

Private Sub AppendToSummarySheet(ByVal wsTier As Worksheet, ByVal wsSummary As Worksheet)
    Dim lngTierLRow As Long, lngTierLCol As Long, lngSummaryLRow As Long
    lngTierLRow = wsTier.Cells(wsTier.Rows.Count, "A").End(xlUp).Row
    If LCase$(Trim$(wsTier.Cells(lngTierLRow, "A").Value)) = "total" Then lngTierLRow = lngTierLRow - 1
    If lngTierLRow < 2 Then Exit Sub
    
    lngTierLCol = wsTier.Cells(1, wsTier.Columns.Count).End(xlToLeft).Column
    lngSummaryLRow = wsSummary.Cells(wsSummary.Rows.Count, "A").End(xlUp).Row
    
    If IsEmpty(wsSummary.Range("I1").Value) Then
        wsTier.Range("I1", wsTier.Cells(1, lngTierLCol)).Copy wsSummary.Range("I1")
    End If
    
    Dim rngData As Range
    Set rngData = wsTier.Range("A2", wsTier.Cells(lngTierLRow, lngTierLCol))
    wsSummary.Range("A" & lngSummaryLRow + 1).Resize(rngData.Rows.Count, rngData.Columns.Count).Value = rngData.Value
End Sub

'================================================================================================================
' 5. Formatting Sub-Procedures
'================================================================================================================

Private Sub FormatEnhancedSheet(ByVal ws As Worksheet)
    If ws.Cells(1, 1).Value = "" Then Exit Sub
    
    Dim lngLastRow As Long: lngLastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    Dim lngLastCol As Long: lngLastCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
    Dim lngTotalRow As Long: lngTotalRow = ApplyTotalRow(ws, lngLastRow, lngLastCol)
    
    ApplyTableStyles ws, lngTotalRow, lngLastCol
    ApplyNumberFormats ws, lngTotalRow, lngLastCol
    ws.Cells.EntireColumn.AutoFit
    
    If ws.Name = SHEET_SUMMARY_PREFIX Or ws.Name = TEMP_SHEET_PREFIX & "Summary" Then
        ws.Range("A1", ws.Cells(lngTotalRow, lngLastCol)).Sort Key1:=ws.Range("F2"), Order1:=xlAscending, Header:=xlYes
    End If
End Sub

Private Function ApplyTotalRow(ByVal ws As Worksheet, ByVal lngLastRow As Long, ByVal lngLastCol As Long) As Long
    Dim lngTotalRow As Long: lngTotalRow = lngLastRow
    If LCase$(ws.Cells(lngLastRow, "A").Value) <> "total" Then lngTotalRow = lngLastRow + 1
    
    ws.Cells(lngTotalRow, "A").Value = "TOTAL"
    Dim i As Long
    For i = 9 To lngLastCol
        On Error Resume Next
        ws.Cells(lngTotalRow, i).Value = Application.WorksheetFunction.Sum(ws.Range(ws.Cells(2, i), ws.Cells(lngLastRow, i)))
        On Error GoTo 0
    Next i
    ApplyTotalRow = lngTotalRow
End Function

Private Sub ApplyTableStyles(ByVal ws As Worksheet, ByVal lngTotalRow As Long, ByVal lngLastCol As Long)
    Dim rngHeader As Range, rngTotal As Range, rngFull As Range
    Set rngHeader = ws.Range(ws.Cells(1, 1), ws.Cells(1, lngLastCol))
    Set rngTotal = ws.Range(ws.Cells(lngTotalRow, 1), ws.Cells(lngTotalRow, lngLastCol))
    Set rngFull = ws.Range(ws.Cells(1, 1), ws.Cells(lngTotalRow, lngLastCol))
    
    With rngFull
        .Interior.ColorIndex = xlNone
        .Borders.LineStyle = xlNone
        .Font.Bold = False
    End With
    
    With rngHeader.Font: .Bold = True: .Color = vbWhite: End With
    rngHeader.Interior.Color = RGB(47, 85, 151)
    
    rngTotal.Font.Bold = True
    rngTotal.Interior.Color = RGB(221, 235, 247)
    
    Dim r As Long
    For r = 2 To lngTotalRow - 1
        If r Mod 2 = 0 Then ws.Range(ws.Cells(r, 1), ws.Cells(r, lngLastCol)).Interior.Color = RGB(242, 242, 242)
    Next r
    
    Dim lngHistLCol As Long: lngHistLCol = GetLastHistoricalColumn(ws)
    If lngHistLCol > 8 Then
        ws.Range(ws.Cells(2, 9), ws.Cells(lngTotalRow - 1, lngHistLCol)).Interior.Color = RGB(220, 220, 220)
        With ws.Range(ws.Cells(1, lngHistLCol), ws.Cells(lngTotalRow, lngHistLCol)).Borders(xlEdgeRight)
            .LineStyle = xlContinuous: .Weight = xlMedium
        End With
    End If
    
    With rngFull.Borders
        .LineStyle = xlContinuous
        .Weight = xlThin
    End With
End Sub

Private Sub ApplyNumberFormats(ByVal ws As Worksheet, ByVal lngTotalRow As Long, ByVal lngLastCol As Long)
    With ws
        .Range(.Cells(2, 9), .Cells(lngTotalRow, lngLastCol)).NumberFormat = "_(* #,##0_);_(* (#,##0);_(* ""-""??_);_(@_)"
        .Range(.Cells(1, 9), .Cells(1, lngLastCol)).NumberFormat = "mmm-yy"
    End With
End Sub

Private Function LoadDataToArray(ByVal ws As Worksheet) As Variant
    If ws Is Nothing Then Exit Function
    Dim lRow As Long: lRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    Dim lCol As Long: lCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
    If lRow > 1 And lCol > 0 Then LoadDataToArray = ws.Range("A1", ws.Cells(lRow, lCol)).Value
End Function

Private Sub InitializeLogSheet(ByVal ws As Worksheet)
    ws.Name = SHEET_LOG
    With ws.Range("A1:E1")
        .Value = Array("Timestamp", "Type", "Procedure", "Message", "Context / Error")
        .Font.Bold = True
    End With
    ws.Columns("A:E").AutoFit
End Sub

Private Sub WriteToLog(ByVal strType As String, ByVal strProcedure As String, ByVal strMessage As String, Optional ByVal lngErrNumber As Long = 0, Optional ByVal strContext As String = "")
    If wsLog Is Nothing Then Exit Sub
    Dim lNextRow As Long
    lNextRow = wsLog.Cells(wsLog.Rows.Count, "A").End(xlUp).Row + 1
    With wsLog.Rows(lNextRow)
        .Cells(1).Value = Now()
        .Cells(2).Value = strType
        .Cells(3).Value = strProcedure
        .Cells(4).Value = strMessage
        If lngErrNumber <> 0 Then
            .Cells(5).Value = "Err " & lngErrNumber & ": " & strContext
        Else
            .Cells(5).Value = strContext
        End If
    End With
End Sub

Private Sub LogPerformance(ByRef tCheckpoint As Double, ByVal strStageName As String)
    WriteToLog "Profile", strStageName, "Stage completed in " & Format$(Timer - tCheckpoint, "#,##0.00") & "s"
    tCheckpoint = Timer
End Sub

Private Function GetLastHistoricalColumn(ByVal ws As Worksheet) As Long
    Dim dteStartDate As Date
    On Error Resume Next
    dteStartDate = CDate(ThisWorkbook.Sheets(SHEET_DEMAND).Cells(1, COL_DEMAND_START).Value)
    On Error GoTo 0
    If dteStartDate = 0 Then GetLastHistoricalColumn = 8: Exit Function
    
    Dim i As Long
    GetLastHistoricalColumn = 8
    For i = 9 To ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
        If IsDate(ws.Cells(1, i).Value) Then
            If CDate(ws.Cells(1, i).Value) < dteStartDate Then GetLastHistoricalColumn = i Else Exit For
        End If
    Next i
End Function

Private Function SanitizeSheetName(ByVal strName As String) As String
    Dim strSanitized As String
    strSanitized = Left$(Replace(Replace(Replace(Replace(Replace(Replace(Replace(strName, ":", "-"), "\", "-"), "/", "-"), "?", ""), "*", ""), "[", "("), "]", ")"), 31)
    SanitizeSheetName = strSanitized
End Function

Public Function GetStatusEnum(ByVal strStatus As String) As ProductStatus
    Dim strKey As String: strKey = UCase$(Trim$(strStatus))
    If dictStatusMap.Exists(strKey) Then
        GetStatusEnum = dictStatusMap(strKey)
    Else
        GetStatusEnum = psUnknown
    End If
End Function

Private Sub InitializeStatusMap()
    Set dictStatusMap = CreateObject("Scripting.Dictionary")
    dictStatusMap.CompareMode = vbTextCompare 'Case-insensitive
    dictStatusMap.Add "ACTIVE", psActive
    dictStatusMap.Add "PHASEIN-PHASEOUT", psPhaseInOut
    dictStatusMap.Add "DISCONTINUED", psDiscontinued
    dictStatusMap.Add "NEW", psNew
End Sub

Public Function GetStatusString(ByVal enmStatus As ProductStatus) As String
    Select Case enmStatus
        Case psActive: GetStatusString = "Active"
        Case psPhaseInOut: GetStatusString = "PhaseIn-PhaseOut"
        Case psDiscontinued: GetStatusString = "Discontinued"
        Case psNew: GetStatusString = "New"
        Case Else: GetStatusString = "Unknown"
    End Select
End Function

Private Function BuildCompositeKey(ByVal keyPart1 As String, ByVal keyPart2 As String) As String
    Const SEPARATOR As String = "|"
    BuildCompositeKey = Trim$(keyPart1) & SEPARATOR & Trim$(keyPart2)
End Function
