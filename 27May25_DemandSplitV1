Option Explicit

Sub Refactored_UpdateForeCast_Click()

    ' --- Constants for Sheet Names ---
    Const MAIN_SHEET_NAME As String = "Main"
    Const PRODUCT_STATUS_SHEET_NAME As String = "Product Status"
    Const DEMAND_FORECAST_SHEET_NAME As String = "Demand Forecast"
    Const HISTORICAL_SALES_SHEET_NAME As String = "Historical Sales"
    Const SUMMARY_SHEET_NAME As String = "Summary"

    ' --- Constants for Column Indices (can be adjusted if layout changes) ---
    ' Product Status Sheet
    Const COL_PS_FAMILY As Long = 1              ' Column A
    Const COL_PS_LOCAL_NBR As Long = 2         ' Column B
    Const COL_PS_DESC As Long = 3              ' Column C
    Const COL_PS_PRODUCT_CODE As Long = 4      ' Column D (1-4-1)
    Const COL_PS_ACTIVE_TYPE As Long = 5       ' Column E
    Const COL_PS_PHASE_OUT_MONTH As Long = 6   ' Column F
    Const COL_PS_PHASE_OUT_PERCENT As Long = 7 ' Column G
    Const COL_PS_SUPERSEDED_SKU As Long = 8    ' Column H
    Const COL_PS_NEW_PRODUCT_PERCENT As Long = 9 ' Column I

    ' Demand Forecast Sheet
    Const COL_DF_FAMILY As Long = 1            ' Column A
    Const COL_DF_FIRST_MONTH_DATA As Long = 2  ' Column B

    ' Historical Sales Sheet
    Const COL_HS_FAMILY As Long = 1            ' Column A
    Const COL_HS_PRODUCT_CODE As Long = 4      ' Column D
    Const COL_HS_FIRST_MONTH_DATA As Long = 5  ' Column E

    ' Family Sheets (New/Current)
    Const COL_FS_FAMILY As Long = 1            ' Column A
    Const COL_FS_LOCAL_NBR As Long = 2
    Const COL_FS_DESC As Long = 3
    Const COL_FS_PRODUCT_CODE As Long = 4      ' Column D
    Const COL_FS_ACTIVE_TYPE As Long = 5       ' Column E
    Const COL_FS_PHASE_OUT_MONTH As Long = 6   ' Column F
    Const COL_FS_HIST_DATA_START As Long = 7   ' Column G (Historical Data starts here)


    ' --- Workbook and Worksheet Objects ---
    Dim wbThis As Workbook
    Dim wbNew As Workbook
    Dim wsMain As Worksheet
    Dim wsSummary As Worksheet
    Dim wsProductStatus As Worksheet
    Dim wsDemandForecast As Worksheet
    Dim wsHistoricalSales As Worksheet
    Dim wsCurrentFamilySheet As Worksheet ' Used for iterating existing sheets
    Dim wsNewFamilySheet As Worksheet     ' Used when creating a new family sheet

    ' --- Row and Column Counters ---
    Dim lngProductStatusLastRow As Long
    Dim lngDemandForecastLastRow As Long
    Dim lngDemandForecastLastCol As Long
    Dim lngHistoricalSalesLastRow As Long
    Dim lngHistoricalSalesLastCol As Long
    Dim lngFamilySheetLastRow As Long
    Dim lngFamilySheetLastCol As Long
    Dim lngSummaryLastRow As Long
    Dim lngCurrentFamilyRow As Long       ' Loop counter for Demand Forecast rows (families)
    Dim lngCurrentProductRowPS As Long    ' Loop counter for Product Status rows
    Dim lngCurrentProductRowFS As Long    ' Loop counter for Family Sheet rows
    Dim lngHistSalesRow As Long           ' Loop counter for Historical Sales rows
    Dim lngSheetCol As Long               ' Generic loop counter for columns
    Dim lngPSCmpRow As Long               ' Loop counter for Product Status (comparison for superseding)

    ' --- Data Variables ---
    Dim strCurrentFamilyName As String
    Dim strProductFamilyFromPS As String
    Dim strProductCodeFromPS As String
    Dim strActiveType As String
    Dim strNewProductSKU As String        ' Superseded SKU from Product Status
    Dim strCurrentGroupID As String
    Dim strHistSalesGroupID As String
    Dim strHistSalesProductCode As String
    Dim strFamilySheetProductCode As String
    Dim strHistSalesFamily As String
    Dim strProductStatusHistSalesActiveType As String ' ActiveType for HSProduct from Product Status

    Dim varDemandData As Variant          ' Array to hold demand data for a family
    Dim varHistoricData As Variant        ' Array to hold historic sales data for a product

    ' --- Flags and Logic Variables ---
    Dim blnFamilySheetExists As Boolean
    Dim blnIsNewProductInFamilySheet As Boolean ' Corrected typo from IsNeWProduct
    Dim blnIsSuperseding As Boolean

    ' --- Date and Percentage Variables ---
    Dim dtPhaseOutMonth As Date
    Dim dtProductStatusHistSalesPhaseOutMonth As Date ' PhaseOutMonth for HSProduct from Product Status
    Dim varPhaseOutPercent As Variant
    Dim varNewProductPercent As Variant

    ' --- Calculation Variables ---
    Dim varProductSum As Variant          ' Corrected typo from ProdutSum
    Dim varProductGroupSum As Variant     ' Corrected typo from ProdutGroupSum
    Dim varFamilySumHistorical As Variant ' Sum of historical sales for the family
    Dim lngNumHistoricalMonthsToUse As Long ' Number of historical months to use, derived from MonthCount
    Dim lngFamilySheetHistDataEndCol As Long ' Last column of historical data in the family sheet
    Dim lngFamilySheetForecastDataStartCol As Long ' First column of forecast data in the family sheet

    ' --- Performance Optimization & Error Handling ---
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False ' Set early for operations like deleting sheets
    Application.Calculation = xlCalculationManual
    On Error GoTo ErrorHandler

    ' --- Initialize Workbook and Core Worksheets ---
    Set wbThis = ThisWorkbook
    Set wsMain = wbThis.Sheets(MAIN_SHEET_NAME)
    Set wsProductStatus = wbThis.Sheets(PRODUCT_STATUS_SHEET_NAME)
    Set wsDemandForecast = wbThis.Sheets(DEMAND_FORECAST_SHEET_NAME)
    Set wsHistoricalSales = wbThis.Sheets(HISTORICAL_SALES_SHEET_NAME)

    ' --- Add and Name Summary Sheet ---
    ' Delete summary sheet if it exists from a previous run
    For Each wsCurrentFamilySheet In wbThis.Sheets
        If wsCurrentFamilySheet.Name = SUMMARY_SHEET_NAME Then
            wsCurrentFamilySheet.Delete
            Exit For
        End If
    Next
    Set wsSummary = wbThis.Sheets.Add(After:=wbThis.Sheets(wbThis.Sheets.Count))
    wsSummary.Name = SUMMARY_SHEET_NAME

    ' --- Determine Last Used Rows and Columns ---
    lngProductStatusLastRow = wsProductStatus.Cells(Rows.Count, COL_PS_FAMILY).End(xlUp).Row
    lngDemandForecastLastRow = wsDemandForecast.Cells(Rows.Count, COL_DF_FAMILY).End(xlUp).Row
    lngDemandForecastLastCol = wsDemandForecast.Cells(1, Columns.Count).End(xlToLeft).Column
    lngHistoricalSalesLastRow = wsHistoricalSales.Cells(Rows.Count, COL_HS_FAMILY).End(xlUp).Row
    lngHistoricalSalesLastCol = wsHistoricalSales.Cells(1, Columns.Count).End(xlToLeft).Column

    ' --- Determine Number of Historical Months to Consider ---
    ' Counts historical months in "Historical Sales" that are older than the first forecast month in "Demand Forecast"
    lngNumHistoricalMonthsToUse = 0
    If lngHistoricalSalesLastCol >= COL_HS_FIRST_MONTH_DATA And lngDemandForecastLastCol >= COL_DF_FIRST_MONTH_DATA Then
        For lngSheetCol = COL_HS_FIRST_MONTH_DATA To lngHistoricalSalesLastCol
            If wsDemandForecast.Cells(1, COL_DF_FIRST_MONTH_DATA).Value > wsHistoricalSales.Cells(1, lngSheetCol).Value Then
                lngNumHistoricalMonthsToUse = lngNumHistoricalMonthsToUse + 1
            Else
                Exit For ' Stop if historical month is not older
            End If
        Next lngSheetCol
    End If
    
    ' Last column for historical data in the family sheets (e.g., G, H, I if 3 historical months)
    lngFamilySheetHistDataEndCol = COL_FS_HIST_DATA_START + lngNumHistoricalMonthsToUse - 1
    ' First column for forecast data in the family sheets (immediately after historical data)
    lngFamilySheetForecastDataStartCol = lngFamilySheetHistDataEndCol + 1


    ' --- Phase 1: Create New Family Sheets and Basic Structure ---
    ' Loop through each family in the "Demand Forecast" sheet
    For lngCurrentFamilyRow = 2 To lngDemandForecastLastRow
        strCurrentFamilyName = Trim(wsDemandForecast.Cells(lngCurrentFamilyRow, COL_DF_FAMILY).Value)
        If strCurrentFamilyName = "" Then Exit For ' Stop if family name is blank

        ' Check if a sheet for this family already exists
        blnFamilySheetExists = False
        For Each wsCurrentFamilySheet In wbThis.Sheets
            If wsCurrentFamilySheet.Name = strCurrentFamilyName Then
                blnFamilySheetExists = True
                Set wsNewFamilySheet = wsCurrentFamilySheet ' Use existing sheet
                Exit For
            End If
        Next wsCurrentFamilySheet

        If Not blnFamilySheetExists Then
            ' Create a new sheet for the family
            Set wsNewFamilySheet = wbThis.Sheets.Add(After:=wbThis.Sheets(wbThis.Sheets.Count))
            wsNewFamilySheet.Name = strCurrentFamilyName

            ' Copy headers from "Product Status" (A1:D1) to new family sheet (A1)
            wsProductStatus.Range(wsProductStatus.Cells(1, COL_PS_FAMILY), wsProductStatus.Cells(1, COL_PS_PRODUCT_CODE)).Copy _
                wsNewFamilySheet.Cells(1, COL_FS_FAMILY)

            ' Add "Active/Discontinued" and "Phase Out Month" headers to family sheet
            wsNewFamilySheet.Cells(1, COL_FS_ACTIVE_TYPE).Value = "Active/Discontinued"
            wsNewFamilySheet.Cells(1, COL_FS_PHASE_OUT_MONTH).Value = "Phase Out Month"
            
            ' Copy Product Status "New Product %" header for consistency if needed (original code copied I1)
            ' wsProductStatus.Cells(1, COL_PS_NEW_PRODUCT_PERCENT).Copy wsNewFamilySheet.Cells(1, SOME_OTHER_COLUMN_IF_NEEDED)


            ' Populate the new family sheet with products from "Product Status" that match this family
            For lngCurrentProductRowPS = 2 To lngProductStatusLastRow
                strProductFamilyFromPS = LCase(Trim(wsProductStatus.Cells(lngCurrentProductRowPS, COL_PS_FAMILY).Value))
                If strProductFamilyFromPS = LCase(strCurrentFamilyName) Then
                    lngFamilySheetLastRow = wsNewFamilySheet.Cells(Rows.Count, COL_FS_FAMILY).End(xlUp).Row + 1
                    wsProductStatus.Range(wsProductStatus.Cells(lngCurrentProductRowPS, COL_PS_FAMILY), wsProductStatus.Cells(lngCurrentProductRowPS, COL_PS_PRODUCT_CODE)).Copy _
                        wsNewFamilySheet.Cells(lngFamilySheetLastRow, COL_FS_FAMILY)
                End If
            Next lngCurrentProductRowPS
        End If

        ' --- Setup Summary Sheet Headers (if not already done) ---
        If wsSummary.Cells(1, COL_FS_FAMILY).Value = "" Then
            ' Copy headers from "Product Status" (A1:D1) to Summary sheet (A1)
            wsProductStatus.Range(wsProductStatus.Cells(1, COL_PS_FAMILY), wsProductStatus.Cells(1, COL_PS_PRODUCT_CODE)).Copy _
                wsSummary.Cells(1, COL_FS_FAMILY)
            
            ' Add "Active/Discontinued" and "Phase Out Month" headers to Summary sheet
            wsSummary.Cells(1, COL_FS_ACTIVE_TYPE).Value = "Active/Discontinued"
            wsSummary.Cells(1, COL_FS_PHASE_OUT_MONTH).Value = "Phase Out Month"

            ' Copy historical month headers from "Historical Sales" to Summary sheet
            If lngNumHistoricalMonthsToUse > 0 Then
                wsHistoricalSales.Range(wsHistoricalSales.Cells(1, COL_HS_FIRST_MONTH_DATA), wsHistoricalSales.Cells(1, COL_HS_FIRST_MONTH_DATA + lngNumHistoricalMonthsToUse - 1)).Copy _
                    wsSummary.Cells(1, COL_FS_HIST_DATA_START)
            End If
            
            ' Copy forecast month headers from "Demand Forecast" to Summary sheet
            If lngDemandForecastLastCol >= COL_DF_FIRST_MONTH_DATA Then
                 wsDemandForecast.Range(wsDemandForecast.Cells(1, COL_DF_FIRST_MONTH_DATA), wsDemandForecast.Cells(1, lngDemandForecastLastCol)).Copy _
                    wsSummary.Cells(1, lngFamilySheetForecastDataStartCol)
            End If
        End If
    Next lngCurrentFamilyRow


    ' --- Phase 2: Populate Data into Family Sheets ---
    For lngCurrentFamilyRow = 2 To lngDemandForecastLastRow
        strCurrentFamilyName = Trim(wsDemandForecast.Cells(lngCurrentFamilyRow, COL_DF_FAMILY).Value)
        If strCurrentFamilyName = "" Then Exit For

        ' Get the specific family sheet
        On Error Resume Next ' Handle case where sheet might not exist if first loop failed (should not happen with above logic)
        Set wsCurrentFamilySheet = wbThis.Sheets(strCurrentFamilyName)
        If Err.Number <> 0 Then
            On Error GoTo ErrorHandler
            Debug.Print "Error: Family sheet '" & strCurrentFamilyName & "' not found in Phase 2. Skipping."
            Err.Clear
            GoTo NextFamilyIteration ' Skip to next family
        End If
        On Error GoTo ErrorHandler

        ' --- Clear existing data and Set up Headers for Historical and Forecast Periods ---
        ' Delete existing historical and forecast columns to refresh
        lngFamilySheetLastCol = wsCurrentFamilySheet.Cells(1, Columns.Count).End(xlToLeft).Column
        If lngFamilySheetLastCol >= COL_FS_HIST_DATA_START Then
            wsCurrentFamilySheet.Range(wsCurrentFamilySheet.Cells(1, COL_FS_HIST_DATA_START), wsCurrentFamilySheet.Cells(1, lngFamilySheetLastCol)).EntireColumn.Delete
        End If

        ' Copy historical month headers
        If lngNumHistoricalMonthsToUse > 0 Then
            wsHistoricalSales.Range(wsHistoricalSales.Cells(1, COL_HS_FIRST_MONTH_DATA), wsHistoricalSales.Cells(1, COL_HS_FIRST_MONTH_DATA + lngNumHistoricalMonthsToUse - 1)).Copy _
                wsCurrentFamilySheet.Cells(1, COL_FS_HIST_DATA_START)
        End If

        ' Copy forecast month headers
        If lngDemandForecastLastCol >= COL_DF_FIRST_MONTH_DATA Then
            wsDemandForecast.Range(wsDemandForecast.Cells(1, COL_DF_FIRST_MONTH_DATA), wsDemandForecast.Cells(1, lngDemandForecastLastCol)).Copy _
                wsCurrentFamilySheet.Cells(1, lngFamilySheetForecastDataStartCol)
        End If
        
        ' Get demand data for the current family
        If lngDemandForecastLastCol >= COL_DF_FIRST_MONTH_DATA Then
            varDemandData = wsDemandForecast.Range(wsDemandForecast.Cells(lngCurrentFamilyRow, COL_DF_FIRST_MONTH_DATA), wsDemandForecast.Cells(lngCurrentFamilyRow, lngDemandForecastLastCol)).Value
        Else
            ReDim varDemandData(1 To 1, 1 To 1) ' Empty placeholder
        End If


        ' --- Add New Products from "Product Status" to this Family Sheet if they are "New" type ---
        lngFamilySheetLastRow = wsCurrentFamilySheet.Cells(Rows.Count, COL_FS_FAMILY).End(xlUp).Row
        For lngCurrentProductRowPS = 2 To lngProductStatusLastRow
            If LCase(Trim(wsProductStatus.Cells(lngCurrentProductRowPS, COL_PS_FAMILY).Value)) = LCase(strCurrentFamilyName) Then
                strProductCodeFromPS = Trim(wsProductStatus.Cells(lngCurrentProductRowPS, COL_PS_PRODUCT_CODE).Value)
                strActiveType = Trim(wsProductStatus.Cells(lngCurrentProductRowPS, COL_PS_ACTIVE_TYPE).Value)

                blnIsNewProductInFamilySheet = True ' Assume it's new, then check
                For lngCurrentProductRowFS = 2 To lngFamilySheetLastRow
                    If Trim(wsCurrentFamilySheet.Cells(lngCurrentProductRowFS, COL_FS_PRODUCT_CODE).Value) = strProductCodeFromPS Then
                        blnIsNewProductInFamilySheet = False
                        Exit For
                    End If
                Next lngCurrentProductRowFS

                If blnIsNewProductInFamilySheet And strActiveType = "New" Then
                    lngFamilySheetLastRow = lngFamilySheetLastRow + 1
                    wsProductStatus.Range(wsProductStatus.Cells(lngCurrentProductRowPS, COL_PS_FAMILY), wsProductStatus.Cells(lngCurrentProductRowPS, COL_PS_PRODUCT_CODE)).Copy _
                        wsCurrentFamilySheet.Cells(lngFamilySheetLastRow, COL_FS_FAMILY)
                End If
            End If
        Next lngCurrentProductRowPS
        ' Update last row after potential additions
        lngFamilySheetLastRow = wsCurrentFamilySheet.Cells(Rows.Count, COL_FS_FAMILY).End(xlUp).Row


        ' --- Process each product in the current family sheet ---
        For lngCurrentProductRowFS = 2 To lngFamilySheetLastRow
            strFamilySheetProductCode = Trim(wsCurrentFamilySheet.Cells(lngCurrentProductRowFS, COL_FS_PRODUCT_CODE).Value)
            If strFamilySheetProductCode = "" Then GoTo NextProductInFamilySheet ' Skip blank product rows

            ' Attempt to create GroupID (e.g., "PART1-PART2" -> "PART1PART2")
            ' Original code does not handle products without a hyphen, this maintains that behavior.
            On Error Resume Next ' In case product code doesn't contain "-"
            strCurrentGroupID = Split(strFamilySheetProductCode, "-")(0) & Split(strFamilySheetProductCode, "-")(1)
            If Err.Number <> 0 Then strCurrentGroupID = strFamilySheetProductCode ' Fallback if no hyphen
            Err.Clear
            On Error GoTo ErrorHandler


            ' --- Get Product Status Details (ActiveType, PhaseOutMonth, etc.) ---
            blnIsSuperseding = False ' Reset for each product
            strActiveType = ""
            dtPhaseOutMonth = 0 ' Reset
            varPhaseOutPercent = 0 ' Reset
            strNewProductSKU = ""
            varNewProductPercent = 0

            For lngCurrentProductRowPS = 2 To lngProductStatusLastRow
                If Trim(wsProductStatus.Cells(lngCurrentProductRowPS, COL_PS_PRODUCT_CODE).Value) = strFamilySheetProductCode Then
                    strActiveType = Trim(wsProductStatus.Cells(lngCurrentProductRowPS, COL_PS_ACTIVE_TYPE).Value)
                    If IsDate(wsProductStatus.Cells(lngCurrentProductRowPS, COL_PS_PHASE_OUT_MONTH).Value) Then
                        dtPhaseOutMonth = wsProductStatus.Cells(lngCurrentProductRowPS, COL_PS_PHASE_OUT_MONTH).Value
                    End If
                    varPhaseOutPercent = wsProductStatus.Cells(lngCurrentProductRowPS, COL_PS_PHASE_OUT_PERCENT).Value
                    strNewProductSKU = Trim(wsProductStatus.Cells(lngCurrentProductRowPS, COL_PS_SUPERSEDED_SKU).Value) 'This is the product it is BEING REPLACED BY
                    varNewProductPercent = wsProductStatus.Cells(lngCurrentProductRowPS, COL_PS_NEW_PRODUCT_PERCENT).Value

                    ' Check if this product is being superseded by another product (current product is in column H of another row)
                    If strActiveType = "Active" Then
                        For lngPSCmpRow = 2 To lngProductStatusLastRow
                            If Trim(wsProductStatus.Cells(lngPSCmpRow, COL_PS_SUPERSEDED_SKU).Value) = strFamilySheetProductCode Then
                                blnIsSuperseding = True
                                ' If superseded, its effective phase-out is dictated by the NEW product that is replacing it
                                If IsDate(wsProductStatus.Cells(lngPSCmpRow, COL_PS_PHASE_OUT_MONTH).Value) Then
                                     dtPhaseOutMonth = wsProductStatus.Cells(lngPSCmpRow, COL_PS_PHASE_OUT_MONTH).Value
                                End If
                                varPhaseOutPercent = wsProductStatus.Cells(lngPSCmpRow, COL_PS_PHASE_OUT_PERCENT).Value
                                Exit For
                            End If
                        Next lngPSCmpRow
                    End If
                    Exit For
                End If
            Next lngCurrentProductRowPS

            ' Write ActiveType and PhaseOutMonth to family sheet
            wsCurrentFamilySheet.Cells(lngCurrentProductRowFS, COL_FS_ACTIVE_TYPE).Value = strActiveType
            If dtPhaseOutMonth > 0 Then wsCurrentFamilySheet.Cells(lngCurrentProductRowFS, COL_FS_PHASE_OUT_MONTH).Value = dtPhaseOutMonth


            ' --- Calculate Sum of Historical Sales for this specific product ---
            varProductSum = 0
            ReDim varHistoricData(1 To 1, 1 To lngNumHistoricalMonthsToUse) ' Initialize/clear
            Dim k_hist As Long
            For k_hist = 1 To lngNumHistoricalMonthsToUse
                varHistoricData(1, k_hist) = 0 ' Default to 0
            Next k_hist
            
            If lngNumHistoricalMonthsToUse > 0 Then
                For lngHistSalesRow = 2 To lngHistoricalSalesLastRow
                    strHistSalesProductCode = Trim(wsHistoricalSales.Cells(lngHistSalesRow, COL_HS_PRODUCT_CODE).Value)
                    If strHistSalesProductCode = strFamilySheetProductCode Then
                        ' Read the historical data for the matching product for the relevant months
                        varHistoricData = wsHistoricalSales.Range(wsHistoricalSales.Cells(lngHistSalesRow, COL_HS_FIRST_MONTH_DATA), _
                                                                wsHistoricalSales.Cells(lngHistSalesRow, COL_HS_FIRST_MONTH_DATA + lngNumHistoricalMonthsToUse - 1)).Value
                        ' Sum this product's historical sales
                        For lngSheetCol = 1 To lngNumHistoricalMonthsToUse ' Iterate through columns of varHistoricData
                             If IsNumeric(varHistoricData(1, lngSheetCol)) Then
                                varProductSum = varProductSum + CDbl(varHistoricData(1, lngSheetCol))
                             End If
                        Next lngSheetCol
                        Exit For ' Found product, no need to search further
                    End If
                Next lngHistSalesRow
                ' Write historical data to family sheet
                wsCurrentFamilySheet.Range(wsCurrentFamilySheet.Cells(lngCurrentProductRowFS, COL_FS_HIST_DATA_START), _
                                           wsCurrentFamilySheet.Cells(lngCurrentProductRowFS, lngFamilySheetHistDataEndCol)).Value = varHistoricData
                wsCurrentFamilySheet.Range(wsCurrentFamilySheet.Cells(lngCurrentProductRowFS, COL_FS_HIST_DATA_START), _
                                           wsCurrentFamilySheet.Cells(lngCurrentProductRowFS, lngFamilySheetHistDataEndCol)).Interior.Color = RGB(208, 208, 208)
            End If


            ' --- Calculate Sum of Historical Sales for the Product's Group within the Family ---
            varProductGroupSum = 0
            If lngNumHistoricalMonthsToUse > 0 Then
                For lngHistSalesRow = 2 To lngHistoricalSalesLastRow
                    strHistSalesProductCode = Trim(wsHistoricalSales.Cells(lngHistSalesRow, COL_HS_PRODUCT_CODE).Value)
                    strHistSalesFamily = UCase(Trim(wsHistoricalSales.Cells(lngHistSalesRow, COL_HS_FAMILY).Value))
                    
                    On Error Resume Next ' In case product code doesn't contain "-"
                    strHistSalesGroupID = Split(strHistSalesProductCode, "-")(0) & Split(strHistSalesProductCode, "-")(1)
                    If Err.Number <> 0 Then strHistSalesGroupID = strHistSalesProductCode ' Fallback
                    Err.Clear
                    On Error GoTo ErrorHandler

                    If strHistSalesGroupID = strCurrentGroupID And strHistSalesFamily = UCase(strCurrentFamilyName) Then
                        For lngSheetCol = COL_HS_FIRST_MONTH_DATA To (COL_HS_FIRST_MONTH_DATA + lngNumHistoricalMonthsToUse - 1)
                            If IsNumeric(wsHistoricalSales.Cells(lngHistSalesRow, lngSheetCol).Value) Then
                                varProductGroupSum = varProductGroupSum + CDbl(wsHistoricalSales.Cells(lngHistSalesRow, lngSheetCol).Value)
                            End If
                        Next lngSheetCol
                    End If
                Next lngHistSalesRow
            End If

            ' --- Calculate Total Historical Sales for the Entire Family (FamilySum) ---
            ' This sum is for products active during the historical period.
            varFamilySumHistorical = 0
            If lngNumHistoricalMonthsToUse > 0 Then
                For lngHistSalesRow = 2 To lngHistoricalSalesLastRow
                    strHistSalesFamily = LCase(Trim(wsHistoricalSales.Cells(lngHistSalesRow, COL_HS_FAMILY).Value))
                    If strHistSalesFamily = LCase(strCurrentFamilyName) Then
                        strHistSalesProductCode = Trim(wsHistoricalSales.Cells(lngHistSalesRow, COL_HS_PRODUCT_CODE).Value)
                        
                        ' Get status of this historical product from Product Status sheet
                        strProductStatusHistSalesActiveType = ""
                        dtProductStatusHistSalesPhaseOutMonth = 0
                        For lngCurrentProductRowPS = 2 To lngProductStatusLastRow
                            If Trim(wsProductStatus.Cells(lngCurrentProductRowPS, COL_PS_PRODUCT_CODE).Value) = strHistSalesProductCode Then
                                strProductStatusHistSalesActiveType = Trim(wsProductStatus.Cells(lngCurrentProductRowPS, COL_PS_ACTIVE_TYPE).Value)
                                If IsDate(wsProductStatus.Cells(lngCurrentProductRowPS, COL_PS_PHASE_OUT_MONTH).Value) Then
                                    dtProductStatusHistSalesPhaseOutMonth = wsProductStatus.Cells(lngCurrentProductRowPS, COL_PS_PHASE_OUT_MONTH).Value
                                End If
                                Exit For
                            End If
                        Next lngCurrentProductRowPS

                        For lngSheetCol = COL_HS_FIRST_MONTH_DATA To (COL_HS_FIRST_MONTH_DATA + lngNumHistoricalMonthsToUse - 1)
                            ' Original logic for FamilySum:
                            ' ((Month(ForecastMonth) < Month(HSPhaseOutMonth) And Year(ForecastMonth) < Year(HSPhaseOutMonth) And HSActiveType = "Discontinued") Or HSActiveType <> "Discontinued")
                            ' This seems to intend: sum if NOT Discontinued OR (is Discontinued AND forecast month is before phase-out)
                            ' The original comparison was `WS_HistoricalSales.Cells(1, CurCol) < WS_CurrentFamily.Cells(1, lngFamilySheetForecastDataStartCol)`
                            ' which means historical sales month (CurCol) is before the first forecast month. This is implicitly handled by only summing over lngNumHistoricalMonthsToUse.
                            ' The additional condition is about the product's status during those historical months.
                            Dim blnIncludeInFamilySum As Boolean
                            blnIncludeInFamilySum = True ' Default to include

                            If strProductStatusHistSalesActiveType = "Discontinued" And dtProductStatusHistSalesPhaseOutMonth > 0 Then
                                ' If discontinued, only include sales from months *before* its phase-out month.
                                ' This comparison is tricky. The original code compared the *first forecast month* with the *historical sales month*.
                                ' Let's simplify: if it was "Discontinued" and had a phase-out, its contribution to *past* sales should reflect that.
                                ' The original logic was:
                                ' Month(WS_CurrentFamily.Cells(1, CurrCol)) < Month(HSPhaseOutMonth) And Year(WS_CurrentFamily.Cells(1, CurrCol)) < Year(HSPhaseOutMonth)
                                ' This compared the *forecast month* (Outer loop CurrCol) with the HSPhaseOutMonth.
                                ' This part of the original code for FamilySum is complex and its direct translation is:
                                Dim dtCurrentHistoricalMonthInLoop As Date
                                dtCurrentHistoricalMonthInLoop = wsHistoricalSales.Cells(1, lngSheetCol).Value

                                If dtProductStatusHistSalesPhaseOutMonth > 0 And strProductStatusHistSalesActiveType = "Discontinued" Then
                                   If Not (Month(dtCurrentHistoricalMonthInLoop) < Month(dtProductStatusHistSalesPhaseOutMonth) And Year(dtCurrentHistoricalMonthInLoop) <= Year(dtProductStatusHistSalesPhaseOutMonth)) And _
                                      Not (Year(dtCurrentHistoricalMonthInLoop) < Year(dtProductStatusHistSalesPhaseOutMonth)) Then
                                        ' If historical month is AT or AFTER phase out month for a discontinued item, don't sum it.
                                        ' This is a bit of a guess to match the original intent.
                                        ' The original logic was:
                                        ' (Month(FC_Month) < Month(PO_Month) AND Year(FC_Month) < Year(PO_Month) AND Type = "Disc") OR Type <> "Disc"
                                        ' This was applied to the *forecast calculation loop*, not the *FamilySum* loop directly in the same way.
                                        ' For FamilySum, it was:
                                        ' WS_HistoricalSales.Cells(1, CurCol) < WS_CurrentFamily.Cells(1, HistLCol + 1) ' (i.e. historical month < first forecast month)
                                        ' AND ((Month(WS_CurrentFamily.Cells(1, CurrCol)) < Month(HSPhaseOutMonth) And Year(WS_CurrentFamily.Cells(1, CurrCol)) < Year(HSPhaseOutMonth) And HSActiveType = "Discontinued") Or HSActiveType <> "Discontinued")
                                        ' The first part is handled by `lngNumHistoricalMonthsToUse`.
                                        ' The second part: if HSActiveType is "Discontinued", then the current historical month must be before its phase out.
                                        If Not ( (Month(dtCurrentHistoricalMonthInLoop) < Month(dtProductStatusHistSalesPhaseOutMonth) And Year(dtCurrentHistoricalMonthInLoop) <= Year(dtProductStatusHistSalesPhaseOutMonth)) Or _
                                                 (Year(dtCurrentHistoricalMonthInLoop) < Year(dtProductStatusHistSalesPhaseOutMonth)) ) Then
                                            blnIncludeInFamilySum = False
                                        End If
                                   End If
                                End If
                            End If

                            If blnIncludeInFamilySum And IsNumeric(wsHistoricalSales.Cells(lngHistSalesRow, lngSheetCol).Value) Then
                                varFamilySumHistorical = varFamilySumHistorical + CDbl(wsHistoricalSales.Cells(lngHistSalesRow, lngSheetCol).Value)
                            End If
                        Next lngSheetCol
                    End If
                Next lngHistSalesRow
            End If
            If varFamilySumHistorical = 0 Then varFamilySumHistorical = 1 ' Avoid division by zero, though this might skew results if truly zero. Original code did not explicitly handle this for FamilySum.

            ' --- Calculate and Write Forecasted Values ---
            Dim lngForecastMonthIndex As Long
            For lngForecastMonthIndex = 1 To UBound(varDemandData, 2) ' Loop through forecast months
                lngSheetCol = lngFamilySheetForecastDataStartCol + lngForecastMonthIndex - 1 ' Actual column in family sheet
                Dim dblForecastValue As Double
                dblForecastValue = 0
                Dim dblFamilyDemandForMonth As Double
                If IsNumeric(varDemandData(1, lngForecastMonthIndex)) Then
                    dblFamilyDemandForMonth = CDbl(varDemandData(1, lngForecastMonthIndex))
                Else
                    dblFamilyDemandForMonth = 0
                End If

                Dim dtCurrentForecastMonth As Date
                dtCurrentForecastMonth = wsCurrentFamilySheet.Cells(1, lngSheetCol).Value

                If strActiveType = "Active" And Not blnIsSuperseding Then
                    If varFamilySumHistorical <> 0 Then
                        dblForecastValue = varProductGroupSum * dblFamilyDemandForMonth / varFamilySumHistorical
                    End If
                ElseIf strActiveType = "Active" And blnIsSuperseding Then
                    ' Product is active but being phased out because it's superseded
                    If dtPhaseOutMonth > dtCurrentForecastMonth Then ' Before phase-out month (original was >)
                         ' Original logic: if PhaseOutMonth > CurrentForecastMonth, value is 0. This seems reversed.
                         ' If it's being superseded, it should get demand *before* its phase-out.
                         ' Let's stick to original: PhaseOutMonth > FC_Date -> 0
                         ' This implies if PO date is 30-Sep, and FC_Date is 01-Sep, then 30-Sep > 01-Sep is TRUE, so value = 0. This is odd.
                         ' Original: If PhaseOutMonth > WS_CurrentFamily.Cells(1, CurrCol) Then Value = 0
                         ' Let's assume PhaseOutMonth is the *start* of phase-out.
                         ' If current forecast month is before the phase-out month, it gets full share.
                         ' If current forecast month IS the phase-out month, it gets reduced share.
                         ' If current forecast month is AFTER phase-out month, it gets 0.
                        If dtCurrentForecastMonth < dtPhaseOutMonth Then ' Strictly before phase-out
                             If varFamilySumHistorical <> 0 Then dblForecastValue = varProductGroupSum * dblFamilyDemandForMonth / varFamilySumHistorical
                        ElseIf Month(dtCurrentForecastMonth) = Month(dtPhaseOutMonth) And Year(dtCurrentForecastMonth) = Year(dtPhaseOutMonth) Then ' Is phase-out month
                            If varFamilySumHistorical <> 0 Then dblForecastValue = varProductGroupSum * dblFamilyDemandForMonth * (1 - CDbl(varPhaseOutPercent)) / varFamilySumHistorical
                        Else ' After phase-out month
                            dblForecastValue = 0
                        End If
                    ' Original logic for Active and Superseding:
                    ' If PhaseOutMonth > ForecastCellDate Then Value = 0
                    ' ElseIf PhaseOutMonth = ForecastCellDate Then Value = GroupSum * Demand * (1-PhaseOutPercent) / FamilySum
                    ' ElseIf PhaseOutMonth < ForecastCellDate Then Value = GroupSum * Demand / FamilySum
                    ' This implies if PhaseOutMonth is LATER than ForecastDate, value is 0.
                    ' If PhaseOutMonth is EARLIER than ForecastDate, value is full.
                    ' This is the opposite of a typical phase-out. I will implement the original logic as requested.
                    If dtPhaseOutMonth > dtCurrentForecastMonth Then
                        dblForecastValue = 0
                    ElseIf Month(dtPhaseOutMonth) = Month(dtCurrentForecastMonth) And Year(dtPhaseOutMonth) = Year(dtCurrentForecastMonth) Then
                        If varFamilySumHistorical <> 0 Then dblForecastValue = varProductGroupSum * dblFamilyDemandForMonth * (1 - IIf(IsNumeric(varPhaseOutPercent), CDbl(varPhaseOutPercent), 0)) / varFamilySumHistorical
                    Else ' dtPhaseOutMonth < dtCurrentForecastMonth
                        If varFamilySumHistorical <> 0 Then dblForecastValue = varProductGroupSum * dblFamilyDemandForMonth / varFamilySumHistorical
                    End If

                ElseIf strActiveType = "PhaseIn-PhaseOut" Then
                    ' Original logic:
                    ' If PhaseOutMonth > ForecastCellDate Then Value = GroupSum * Demand / FamilySum
                    ' ElseIf PhaseOutMonth = ForecastCellDate Then Value = GroupSum * Demand * PhaseOutPercent / FamilySum
                    ' ElseIf PhaseOutMonth < ForecastCellDate Then Value = 0
                    If dtPhaseOutMonth > dtCurrentForecastMonth Then
                         If varFamilySumHistorical <> 0 Then dblForecastValue = varProductGroupSum * dblFamilyDemandForMonth / varFamilySumHistorical
                    ElseIf Month(dtPhaseOutMonth) = Month(dtCurrentForecastMonth) And Year(dtPhaseOutMonth) = Year(dtCurrentForecastMonth) Then
                         If varFamilySumHistorical <> 0 Then dblForecastValue = varProductGroupSum * dblFamilyDemandForMonth * IIf(IsNumeric(varPhaseOutPercent), CDbl(varPhaseOutPercent), 0) / varFamilySumHistorical
                    Else ' dtPhaseOutMonth < dtCurrentForecastMonth
                        dblForecastValue = 0
                    End If
                ElseIf strActiveType = "Discontinued" Then
                    ' Original logic:
                    ' If Month(PhaseOutMonth) > Month(ForecastCellDate) And Year(PhaseOutMonth) > Year(ForecastCellDate) Then Value = GroupSum*Demand/FamilySum
                    ' Else Value = 0
                    ' This means if PhaseOutMonth is strictly after ForecastCellDate (considering both month and year components separately, which is odd)
                    Dim blnDiscontinuedGetsDemand As Boolean
                    blnDiscontinuedGetsDemand = False
                    If dtPhaseOutMonth > 0 Then 'Only if a phase out month is defined
                        If Year(dtPhaseOutMonth) > Year(dtCurrentForecastMonth) Then
                            blnDiscontinuedGetsDemand = True
                        ElseIf Year(dtPhaseOutMonth) = Year(dtCurrentForecastMonth) And Month(dtPhaseOutMonth) > Month(dtCurrentForecastMonth) Then
                            blnDiscontinuedGetsDemand = True
                        End If
                    End If

                    If blnDiscontinuedGetsDemand Then
                        If varFamilySumHistorical <> 0 Then dblForecastValue = varProductGroupSum * dblFamilyDemandForMonth / varFamilySumHistorical
                    Else
                        dblForecastValue = 0
                    End If
                End If

                wsCurrentFamilySheet.Cells(lngCurrentProductRowFS, lngSheetCol).Value = dblForecastValue
            Next lngForecastMonthIndex
NextProductInFamilySheet:
        Next lngCurrentProductRowFS

        ' --- Add Totals Row to Family Sheet ---
        lngFamilySheetLastRow = wsCurrentFamilySheet.Cells(Rows.Count, COL_FS_FAMILY).End(xlUp).Row
        lngFamilySheetLastCol = wsCurrentFamilySheet.Cells(1, Columns.Count).End(xlToLeft).Column
        wsCurrentFamilySheet.Cells(lngFamilySheetLastRow + 1, COL_FS_PRODUCT_CODE).Value = "Total" ' Or some other label column

        For lngSheetCol = COL_FS_HIST_DATA_START To lngFamilySheetLastCol
            wsCurrentFamilySheet.Cells(lngFamilySheetLastRow + 1, lngSheetCol).Formula = _
                "=SUM(" & wsCurrentFamilySheet.Cells(2, lngSheetCol).Address(False, False) & ":" & wsCurrentFamilySheet.Cells(lngFamilySheetLastRow, lngSheetCol).Address(False, False) & ")"
        Next lngSheetCol

        ' --- Formatting for Family Sheet ---
        With wsCurrentFamilySheet.Range(wsCurrentFamilySheet.Cells(1, 1), wsCurrentFamilySheet.Cells(lngFamilySheetLastRow + 1, lngFamilySheetLastCol))
            .Borders.LineStyle = xlContinuous
            .EntireColumn.AutoFit
        End With
        wsCurrentFamilySheet.Range(wsCurrentFamilySheet.Cells(2, COL_FS_HIST_DATA_START), wsCurrentFamilySheet.Cells(lngFamilySheetLastRow + 1, lngFamilySheetLastCol)).NumberFormat = "0"
        wsCurrentFamilySheet.Rows(lngFamilySheetLastRow + 1).Font.Bold = True
        wsCurrentFamilySheet.Range(wsCurrentFamilySheet.Cells(lngFamilySheetLastRow + 1, COL_FS_HIST_DATA_START), wsCurrentFamilySheet.Cells(lngFamilySheetLastRow + 1, lngFamilySheetLastCol)).Interior.Color = RGB(228, 158, 221)


        ' --- Copy Family Sheet Data to Summary Sheet ---
        lngSummaryLastRow = wsSummary.Cells(Rows.Count, COL_FS_FAMILY).End(xlUp).Row + 1
        ' Copy data rows (excluding total row from family sheet for now, as summary will have its own totals or structure)
        wsCurrentFamilySheet.Range(wsCurrentFamilySheet.Cells(2, COL_FS_FAMILY), wsCurrentFamilySheet.Cells(lngFamilySheetLastRow, lngFamilySheetLastCol)).Copy
        wsSummary.Cells(lngSummaryLastRow, COL_FS_FAMILY).PasteSpecial Paste:=xlPasteValuesAndNumberFormats
        Application.CutCopyMode = False


NextFamilyIteration:
    Next lngCurrentFamilyRow

    ' --- Finalize Summary Sheet ---
    lngSummaryLastRow = wsSummary.Cells(Rows.Count, COL_FS_FAMILY).End(xlUp).Row
    lngFamilySheetLastCol = wsSummary.Cells(1, Columns.Count).End(xlToLeft).Column ' Use Summary's last column
    If lngSummaryLastRow > 1 And lngFamilySheetLastCol > 0 Then ' Check if there's data to format/sort
        wsSummary.Range(wsSummary.Cells(1, 1), wsSummary.Cells(lngSummaryLastRow, lngFamilySheetLastCol)).Columns.AutoFit
        wsSummary.Range(wsSummary.Cells(1, 1), wsSummary.Cells(lngSummaryLastRow, lngFamilySheetLastCol)).Sort _
            Key1:=wsSummary.Cells(2, COL_FS_PRODUCT_CODE), Order1:=xlAscending, Header:=xlYes
    End If


    ' --- Move Processed Sheets to a New Workbook ---
    Set wbNew = Workbooks.Add

    Dim wsToMove As Worksheet
    Dim arrSheetsToKeepInOriginal As Variant
    arrSheetsToKeepInOriginal = Array(MAIN_SHEET_NAME, PRODUCT_STATUS_SHEET_NAME, HISTORICAL_SALES_SHEET_NAME, DEMAND_FORECAST_SHEET_NAME)
    
    Dim i As Long
    Dim strSheetName As String
    Dim blnKeepSheet As Boolean

    ' Iterate backwards when deleting or moving sheets from a collection
    For i = wbThis.Sheets.Count To 1 Step -1
        Set wsToMove = wbThis.Sheets(i)
        strSheetName = wsToMove.Name
        
        blnKeepSheet = False
        Dim j As Long
        For j = LBound(arrSheetsToKeepInOriginal) To UBound(arrSheetsToKeepInOriginal)
            If strSheetName = arrSheetsToKeepInOriginal(j) Then
                blnKeepSheet = True
                Exit For
            End If
        Next j
        
        If Not blnKeepSheet Then
            wsToMove.Move After:=wbNew.Sheets(wbNew.Sheets.Count)
        End If
    Next i

    ' Delete the default "Sheet1" in the new workbook
    If wbNew.Sheets.Count > 1 Then 'Ensure there's more than just "Sheet1" before trying to delete
      For Each wsToMove In wbNew.Sheets
          If wsToMove.Name = "Sheet1" Then 'Or any other default name
              If wbNew.Sheets.Count > 1 Then ' Check again, in case only Sheet1 was left after moves.
                  wsToMove.Delete
              End If
              Exit For
          End If
      Next wsToMove
    End If

    ' Activate Summary sheet in the new workbook
    On Error Resume Next ' In case Summary sheet was not created or moved
    wbNew.Sheets(SUMMARY_SHEET_NAME).Activate
    If Err.Number <> 0 Then
        If wbNew.Sheets.Count > 0 Then wbNew.Sheets(1).Activate
    End If
    Err.Clear
    On Error GoTo ErrorHandler


    ' --- Save the New Workbook ---
    Dim strPathName As String
    Dim strFileName As String
    strPathName = wbThis.Path
    If strPathName = "" Then strPathName = Environ("USERPROFILE") & "\Documents" ' Default save location
    If Right(strPathName, 1) <> "\" Then strPathName = strPathName & "\"
    
    strFileName = "Demand ForeCast - " & Format(Now, "DDMMYYYY_HHMMSS") & ".xlsx"
    wbNew.SaveAs strPathName & strFileName, FileFormat:=xlOpenXMLWorkbook
    wbNew.Close SaveChanges:=False

    wsMain.Activate
    MsgBox "Forecast Update Completed. New file saved as:" & vbCrLf & strPathName & strFileName, vbInformation

CleanExit:
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    Application.Calculation = xlCalculationAutomatic
    Set wbThis = Nothing
    Set wbNew = Nothing
    Set wsMain = Nothing
    Set wsSummary = Nothing
    Set wsProductStatus = Nothing
    Set wsDemandForecast = Nothing
    Set wsHistoricalSales = Nothing
    Set wsCurrentFamilySheet = Nothing
    Set wsNewFamilySheet = Nothing
    Exit Sub

ErrorHandler:
    MsgBox "An error occurred: " & vbCrLf & Err.Description & vbCrLf & "Procedure: Refactored_UpdateForeCast_Click", vbCritical
    Resume CleanExit

End Sub
