Private Sub RunGUIScript()

    ' --- Constants specific to MB51 Execution ---
    Const cTRANSACTION As String = "mb51"
    Const cPLANT_COLUMN As String = "D" ' Column for Plant in Excel
    Const cDATE_LOW_COLUMN As String = "B" ' Column for Start Date in Excel
    Const cDATE_HIGH_COLUMN As String = "C" ' Column for End Date in Excel
    Const cLAYOUT_COLUMN As String = "E" ' Column for Layout in Excel
    Const cFILENAME_COLUMN As String = "F" ' Column to write filename in Excel
    Const cSTART_ROW As Long = 2 ' Starting row for data in Excel (assumes header in row 1)
    Const cDOWNLOAD_PATH As String = "Z:\Demand\Demand Review\SAP H2H Report"
    Const cFILENAME_PREFIX As String = "MB51 Report"
    Const cFILENAME_EXTENSION As String = ".XLSX"
    Const cREPORT_EXEC_TIMEOUT_SECONDS As Long = 900
    ' Const cGRID_WAIT_TIMEOUT_SECONDS As Long = 180 ' Timeout for grid is now implicitly part of combined wait
    Const cGRID_ID As String = "wnd[0]/usr/cntlGRID1/shellcont/shell"
    ' Const cSTATUS_MSG_COMPLETE_1 As String = "Prepare List Output" ' Status messages are less critical with combined wait
    ' Const cSTATUS_MSG_COMPLETE_2 As String = ""
    ' Const cSTATUS_MSG_COMPLETE_3 As String = ""

    ' --- Local Variables ---
    Dim formattedDateLow As String, formattedDateHigh As String, formattedTimestamp As String
    Dim dynamicFilename As String
    Dim startTime As Single
    Dim success As Boolean
    Dim gridObject As GuiShell
    Dim currentStatus As String
    Dim i As Long, lastRow As Long
    Dim plant As String, dateLow As String, dateHigh As String, layout As String
    Dim ws As Worksheet
    Dim popupWindow As GuiModalWindow, popupID As Variant, handledPopup As Boolean
    Dim mb51FieldCheck As Object ' For post-navigation check

    On Error GoTo RestoreFilterAndErrorHandler

    ' --- Pre-checks ---
    Debug.Print "Entering RunGUIScript..."
    If objSess Is Nothing Then Err.Raise vbObjectError + 510, "RunGUIScript", "objSess is not valid."
     If objSBar Is Nothing Then
        On Error Resume Next: Set objSBar = objSess.FindById("wnd[0]/sbar"): On Error GoTo RestoreFilterAndErrorHandler
        If objSBar Is Nothing Then Debug.Print "  - Warning: objSBar could not be obtained."
    End If
    Debug.Print "  - Session and Status Bar objects checked (Status Bar " & IIf(objSBar Is Nothing, "Not ", "") & "obtained)."

    ' --- Get the Excel worksheet ---
    Set ws = ThisWorkbook.Sheets("Sheet1") ' *** CHANGE "Sheet1" if your sheet is named differently ***
    If ws Is Nothing Then
        Err.Raise vbObjectError + 519, "RunGUIScript", "Could not get a reference to the Excel worksheet 'Sheet1'."
        GoTo RestoreFilterAndExit
    End If

    ' --- Get the last row with data ---
    lastRow = ws.Cells(ws.Rows.Count, cPLANT_COLUMN).End(xlUp).Row
    Debug.Print "  - Last row with data: " & lastRow

    ' --- Loop through each row in Excel ---
    For i = cSTART_ROW To lastRow
        Debug.Print "-----------------------------------------------------"
        Debug.Print "Processing row: " & i

        ' --- Step 1: Read data from Excel row ---
        plant = ws.Range(cPLANT_COLUMN & i).Value
        dateLow = ws.Range(cDATE_LOW_COLUMN & i).Value
        dateHigh = ws.Range(cDATE_HIGH_COLUMN & i).Value
        layout = ws.Range(cLAYOUT_COLUMN & i).Value

        Debug.Print "  - Data from Excel: Plant='" & plant & "', DateLow='" & dateLow & "', DateHigh='" & dateHigh & "', Layout='" & layout & "'"

        ' --- Step 2: Prepare Filename ---
        Debug.Print "  - STEP 2: Preparing dynamic filename..."
        On Error Resume Next
        formattedDateLow = Right$(Format(dateLow, "dd.mm.yyyy"), 4) & Mid$(Format(dateLow, "dd.mm.yyyy"), 4, 2) & Left$(Format(dateLow, "dd.mm.yyyy"), 2)
        formattedDateHigh = Right$(Format(dateHigh, "dd.mm.yyyy"), 4) & Mid$(Format(dateHigh, "dd.mm.yyyy"), 4, 2) & Left$(Format(dateHigh, "dd.mm.yyyy"), 2)
        If Err.Number <> 0 Then
            MsgBox "Date parse warning for row " & i & ". Using default date format.", vbExclamation
            Err.Clear: formattedDateLow = "DateFrom": formattedDateHigh = "DateTo"
        End If
        On Error GoTo RestoreFilterAndErrorHandler
        formattedTimestamp = Format$(Now, "yyyymmdd_hhmmss")
        dynamicFilename = cFILENAME_PREFIX & "_" & formattedDateLow & "-" & formattedDateHigh & "_" & formattedTimestamp & cFILENAME_EXTENSION
        Debug.Print "  - Filename: '" & dynamicFilename & "'"

        ' --- Step 3: Navigate to Transaction ---
        Debug.Print "  - STEP 3: Navigating to transaction '" & cTRANSACTION & "'..."
        If objSess.ActiveWindow.Name <> "wnd[0]" Then
             Debug.Print "  - Closing window: " & objSess.ActiveWindow.Name
             objSess.ActiveWindow.Close: Sleep 250
        End If
        If objSess.Info.TRANSACTION <> UCase(cTRANSACTION) Then
            Debug.Print "  - Executing /n" & cTRANSACTION & "..."
            objSess.FindById("wnd[0]/tbar[0]/okcd").Text = "/n" & cTRANSACTION
            objSess.FindById("wnd[0]").sendVKey 0: Sleep 500
        Else
            Debug.Print "  - Already in transaction " & cTRANSACTION & "."
        End If

        Debug.Print "  - Navigation presumably complete. Checking presence of known MB51 field..."
        ' ** NEW: Post-Navigation Check **
        On Error Resume Next
        Set mb51FieldCheck = objSess.FindById("wnd[0]/usr/ctxtWERKS-LOW") ' Check for Plant field
        If Err.Number <> 0 Or mb51FieldCheck Is Nothing Then
            Err.Clear
            On Error GoTo RestoreFilterAndErrorHandler ' Restore main handler before raising error
            Err.Raise vbObjectError + 511, "RunGUIScript", "Failed to navigate to " & cTRANSACTION & ". Expected field 'ctxtWERKS-LOW' not found."
        Else
            Debug.Print "  - SUCCESS: Found known field 'ctxtWERKS-LOW'. Navigation confirmed."
        End If
        Set mb51FieldCheck = Nothing ' Release check object
        On Error GoTo RestoreFilterAndErrorHandler ' Ensure main handler is active

        ' --- Step 4 & 5: Set Criteria and Execute ---
        Debug.Print "  - STEP 4/5: Setting report criteria and executing..."
         On Error Resume Next ' Clear potentially existing fields
         objSess.FindById("wnd[0]/usr/ctxtMATNR-LOW").Text = "": Debug.Print "   - Cleared MATNR-LOW"
         objSess.FindById("wnd[0]/usr/ctxtMATNR-HIGH").Text = "": Debug.Print "   - Cleared MATNR-HIGH"
         On Error GoTo RestoreFilterAndErrorHandler
        objSess.FindById("wnd[0]/usr/ctxtWERKS-LOW").Text = plant: Debug.Print "   - Set Plant: '" & plant & "'"
        objSess.FindById("wnd[0]/usr/ctxtBUDAT-LOW").Text = dateLow: Debug.Print "   - Set Date Low: '" & dateLow & "'"
        objSess.FindById("wnd[0]/usr/ctxtBUDAT-HIGH").Text = dateHigh: Debug.Print "   - Set Date High: '" & dateHigh & "'"
        objSess.FindById("wnd[0]/usr/radRFLAT_L").Select: Debug.Print "   - Selected 'Flat List' radio button."
        If Trim$(layout) <> "" Then
            objSess.FindById("wnd[0]/usr/ctxtALV_DEF").Text = layout: Debug.Print "   - Set Layout: '" & layout & "'"
        Else
            objSess.FindById("wnd[0]/usr/ctxtALV_DEF").Text = "": Debug.Print "   - Cleared Layout field."
        End If
        objSess.FindById("wnd[0]/tbar[1]/btn[8]").press ' Execute (F8)
        Debug.Print "  - Criteria set and executed."

        ' --- Start OLE Message Filter ---
        Debug.Print "  - STEP 5a: Registering OLE Message Filter..."
        Dim lMsgFilter As LongPtr, lPreviousFilter As LongPtr, hResult As Long
        lMsgFilter = 0&
        hResult = CoRegisterMessageFilter(lMsgFilter, lPreviousFilter)
        If hResult <> 0 Then
            Debug.Print "   - Warning: CoRegisterMessageFilter failed (HRESULT: " & Hex$(hResult) & ").": lPreviousFilter = 0
        Else
            Debug.Print "   - OLE Filter registered."
        End If

        ' --- Step 6/7: Wait for Report Execution & Grid Appearance (Combined Wait) ---
        Debug.Print "  - STEP 6/7: Waiting for report execution AND grid (Timeout: " & cREPORT_EXEC_TIMEOUT_SECONDS & "s)..."
        startTime = Timer
        Set gridObject = Nothing ' Ensure grid object starts as Nothing
        Do
            ' Check if grid object exists first (more definitive than Busy sometimes)
            On Error Resume Next
            Set gridObject = objSess.FindById(cGRID_ID)
            Dim gridCheckErr As Long: gridCheckErr = Err.Number
            Err.Clear
            On Error GoTo RestoreFilterAndErrorHandler

            If gridCheckErr = 0 And Not gridObject Is Nothing Then
                ' Grid found! Check if SAP is still busy (unlikely but possible)
                If objSess.Busy Then
                    Debug.Print "   - Wait Loop: Grid found, but SAP still busy. Waiting briefly..."
                    Sleep 500 ' Short extra wait if grid appeared but busy still true
                End If
                Debug.Print "   - Wait Loop: Grid object found and SAP not busy. Exiting wait."
                Exit Do ' Exit the main wait loop
            End If

            ' If grid not found, check Busy status and handle popups
            If objSess.Busy Then
                 If Not objSBar Is Nothing Then currentStatus = Trim$(objSBar.Text) Else currentStatus = "[No Status Bar]"
                If Len(currentStatus) > 0 Then Debug.Print "   - Wait Loop: Busy=True, Status='" & currentStatus & "'" Else Debug.Print "   - Wait Loop: Busy=True"
                ' Integrated Popup Handling while Busy
                handledPopup = False: On Error Resume Next
                 For Each popupID In Array("wnd[1]", "wnd[2]")
                    Set popupWindow = objSess.FindById(popupID, False)
                    If Err.Number = 0 And Not popupWindow Is Nothing Then
                        handledPopup = True: Debug.Print "   - Wait Loop: Popup detected while busy: " & popupID & " ('" & popupWindow.Text & "'). Handling..."
                        popupWindow.sendVKey 0: If Err.Number <> 0 Then Debug.Print "    - VKey 0 failed. Error: " & Err.Description: Err.Clear: popupWindow.FindById("tbar[0]/btn[0]").press
                        Sleep 500: Exit For
                    End If: If Err.Number <> 0 Then Err.Clear
                Next popupID: On Error GoTo RestoreFilterAndErrorHandler
                ' End Popup Handling
            Else
                ' Busy is False, but grid wasn't found yet in this iteration. Loop again.
                Debug.Print "   - Wait Loop: Busy=False, but Grid not found yet. Continuing wait..."
            End If

            DoEvents: Sleep 250 ' Pause
            ' Check overall timeout
            If Timer - startTime > cREPORT_EXEC_TIMEOUT_SECONDS Then
                Err.Raise vbObjectError + 513, "RunGUIScript", "Timeout (" & cREPORT_EXEC_TIMEOUT_SECONDS & "s) waiting for report execution / grid appearance."
            End If
        Loop
        Debug.Print "   - Combined wait loop exited."

        ' --- Verify Grid Object after Loop ---
        If gridObject Is Nothing Then
            ' This means the loop timed out or exited unexpectedly without finding the grid
            Err.Raise vbObjectError + 515, "RunGUIScript", "Failed to find grid control (" & cGRID_ID & ") after wait loop."
        End If
        Debug.Print "  - Grid object confirmed."

        ' --- Step 8: Export Results ---
        Debug.Print "  - STEP 8: Exporting results..."
        success = False
        On Error Resume Next ' Use Resume Next for export sequence
        Debug.Print "   - Export Step 1: ContextMenu": gridObject.ContextMenu: If Err.Number <> 0 Then Debug.Print "    - Error: " & Err.Description: Err.Clear: GoTo ExportSequenceErrorCheck
        Debug.Print "   - Export Step 2: SelectContextMenuItem '&XXL'": gridObject.SelectContextMenuItem "&XXL": If Err.Number <> 0 Then Debug.Print "    - Error: " & Err.Description: Err.Clear: GoTo ExportSequenceErrorCheck
        Debug.Print "   - Export Step 3: Press Continue (wnd[1]/btn[0])": Sleep 250: objSess.FindById("wnd[1]/tbar[0]/btn[0]").press: If Err.Number <> 0 Then Debug.Print "    - Error: " & Err.Description: Err.Clear: GoTo ExportSequenceErrorCheck
        Debug.Print "   - Export Step 4: Set Path '" & cDOWNLOAD_PATH & "'": Sleep 250: objSess.FindById("wnd[1]/usr/ctxtDY_PATH").Text = cDOWNLOAD_PATH: If Err.Number <> 0 Then Debug.Print "    - Error: " & Err.Description: Err.Clear: GoTo ExportSequenceErrorCheck
        Debug.Print "   - Export Step 5: Set Filename '" & dynamicFilename & "'": objSess.FindById("wnd[1]/usr/ctxtDY_FILENAME").Text = dynamicFilename: If Err.Number <> 0 Then Debug.Print "    - Error: " & Err.Description: Err.Clear: GoTo ExportSequenceErrorCheck
        Debug.Print "   - Export Step 6: Press Save/Generate (wnd[1]/btn[11])": objSess.FindById("wnd[1]/tbar[0]/btn[11]").press: If Err.Number <> 0 Then Debug.Print "    - Error: " & Err.Description: Err.Clear: GoTo ExportSequenceErrorCheck
        success = (Err.Number = 0) ' Check success only after last step attempt
        If success Then Debug.Print "   - SUCCESS: Export commands sent." Else Debug.Print "   - FAILURE: Export sequence interrupted by error."
        Sleep 1000 ' Wait for file write to start/complete

ExportSequenceErrorCheck:
        On Error GoTo RestoreFilterAndErrorHandler ' Restore main handler
        If Not success Then Err.Raise vbObjectError + 517, "RunGUIScript", "Export sequence failed. Check Debug Window."

        ' --- Post-Export File Check ---
        Dim fullFilePath As String
        fullFilePath = cDOWNLOAD_PATH & IIf(Right$(cDOWNLOAD_PATH, 1) = "\", "", "\") & dynamicFilename
        Debug.Print "  - Export Step 7: Verifying file existence ('" & fullFilePath & "')..."
        If Dir(fullFilePath) = "" Then
            ' File not found after export attempt
            Err.Raise vbObjectError + 518, "RunGUIScript", "Export verification failed: File '" & dynamicFilename & "' not found in path '" & cDOWNLOAD_PATH & "' after export."
        Else
            Debug.Print "  - SUCCESS: Exported file found."
             ' --- Step 9: Write filename to Excel ---
            ws.Range(cFILENAME_COLUMN & i).Value = dynamicFilename
            Debug.Print "  - Filename '" & dynamicFilename & "' written to Excel, column " & cFILENAME_COLUMN & ", row " & i
        End If

        ' --- Step 10: Navigate back to MB51 for next iteration ---
        If i < lastRow Then
             Debug.Print "  - Navigating back to MB51 for next row..."
             If objSess.ActiveWindow.Name <> "wnd[0]" Then
                  Debug.Print "   - Closing current window: " & objSess.ActiveWindow.Name
                  objSess.ActiveWindow.Close: Sleep 250
             End If
             If objSess.Info.TRANSACTION <> UCase(cTRANSACTION) Then
                  Debug.Print "   - Transaction is not MB51. Executing /n" & cTRANSACTION
                  objSess.FindById("wnd[0]/tbar[0]/okcd").Text = "/n" & cTRANSACTION
                  objSess.FindById("wnd[0]").sendVKey 0
             Else
                  Debug.Print "   - Already in MB51."
             End If
        End If

    Next i ' Loop to the next row

    Debug.Print "STEP 11: Finished processing all rows."
    GoTo RestoreFilterAndExit

RestoreFilterAndErrorHandler:
    Dim errNum As Long: errNum = Err.Number: Dim errDesc As String: errDesc = Err.Description: Dim errSource As String: errSource = Err.Source
    Debug.Print "!!!!!!!!!!!!!!!!!!! ERROR in RunGUIScript !!!!!!!!!!!!!!!!!!!"
    Debug.Print "  Err #: " & errNum: Debug.Print "  Source: " & errSource: Debug.Print "  Desc: " & errDesc
    Debug.Print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    If lPreviousFilter <> 0 Then
        On Error Resume Next
        hResult = CoRegisterMessageFilter(lPreviousFilter, lMsgFilter)
        If hResult <> 0 Then
            Debug.Print "Warning: Failed RESTORE OLE Filter (Error)."
        Else
            Debug.Print "OLE Filter restored (Error)."
        End If
        lPreviousFilter = 0: On Error GoTo 0
    End If
    MsgBox "Error during MB51 script:" & vbCrLf & "Err #: " & errNum & vbCrLf & "Desc: " & errDesc, vbCritical
    On Error Resume Next
    If Not objSess Is Nothing Then
        Debug.Print "Attempting SAP cleanup after error..."
        If objSess.Busy Then Sleep 500
        If objSess.ActiveWindow.Name <> "wnd[0]" Then objSess.ActiveWindow.Close: Sleep 250
        If objSess.ActiveWindow.Name = "wnd[0]" Then objSess.FindById("wnd[0]/tbar[0]/btn[15]").press: Sleep 250
        Debug.Print "SAP cleanup attempt finished."
    End If
    GoTo FinalCleanup

RestoreFilterAndExit:
    Debug.Print "STEP 12: Normal Exit Cleanup..."
    If lPreviousFilter <> 0 Then
        On Error Resume Next
        hResult = CoRegisterMessageFilter(lPreviousFilter, lMsgFilter)
        If hResult <> 0 Then
            Debug.Print "Warning: Failed RESTORE OLE Filter (Normal)."
        Else
            Debug.Print "OLE Filter restored (Normal)."
        End If
        lPreviousFilter = 0: On Error GoTo 0
    End If
    On Error Resume Next
    Debug.Print "  - Navigating back in SAP..."
    If Not objSess Is Nothing Then
         If objSess.ActiveWindow.Name = "wnd[0]" Then
            Debug.Print "   - Active window is wnd[0]. Pressing Exit (btn[15])..."
            objSess.FindById("wnd[0]/tbar[0]/btn[15]").press: Sleep 100
            If objSess.Info.TRANSACTION = UCase(cTRANSACTION) Then
                 Debug.Print "   - Still in " & cTRANSACTION & ". Pressing Back (btn[3])..."
                 objSess.FindById("wnd[0]/tbar[0]/btn[3]").press
            End If
         ElseIf objSess.ActiveWindow.Name <> "wnd[0]" Then
            Debug.Print "   - Active window is not wnd[0] (" & objSess.ActiveWindow.Name & "). Attempting ActiveWindow.Close..."
            objSess.ActiveWindow.Close
         End If
    End If
    Debug.Print "  - SAP navigation cleanup finished."
    On Error GoTo 0
    Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - RunGUIScript finished normally."

FinalCleanup:
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    On Error GoTo 0
    Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Exiting RunGUIScript."
End Sub
