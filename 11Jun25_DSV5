Option Explicit

' =================================================================================================================
' --- MODULE-LEVEL CONSTANTS ---
' Using constants makes the code easier to maintain. If a sheet name or status changes,
' you only need to update it in one place.
' =================================================================================================================
' --- SHEET NAMES ---
Private Const MAIN_SHEET As String = "Main"
Private Const STATUS_SHEET As String = "Product Status"
Private Const DEMAND_SHEET As String = "Demand Forecast"
Private Const HISTORY_SHEET As String = "Historical Sales"
Private Const SUMMARY_SHEET As String = "Summary"
Private Const LOG_SHEET As String = "Log"

' --- PRODUCT STATUSES ---
Private Const STATUS_ACTIVE As String = "Active"
Private Const STATUS_PHASE_IN_OUT As String = "PhaseIn-PhaseOut"
Private Const STATUS_DISCONTINUED As String = "Discontinued"
Private Const STATUS_NEW As String = "New"

' =================================================================================================================
' Main Procedure: UpdateForeCast_Click
' Description: This is the primary macro that orchestrates the entire forecast update process.
' =================================================================================================================
Sub UpdateForeCast_Click()
    ' --- 1. SETUP & INITIALIZATION ---
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.StatusBar = "Initializing forecast process..."

    Dim TWB As Workbook, NewWB As Workbook
    Dim MainSheet As Worksheet, WS_Summary As Worksheet, WS_ProductStatus As Worksheet
    Dim WS_DemandForecast As Worksheet, WS_HistoricalSales As Worksheet, WS_Log As Worksheet

    Set TWB = ThisWorkbook
    On Error Resume Next
    Set MainSheet = TWB.Sheets(MAIN_SHEET)
    Set WS_ProductStatus = TWB.Sheets(STATUS_SHEET)
    Set WS_DemandForecast = TWB.Sheets(DEMAND_SHEET)
    Set WS_HistoricalSales = TWB.Sheets(HISTORY_SHEET)
    On Error GoTo 0

    ' Validate that all necessary sheets exist.
    If MainSheet Is Nothing Or WS_ProductStatus Is Nothing Or WS_DemandForecast Is Nothing Or WS_HistoricalSales Is Nothing Then
        MsgBox "One of the required worksheets ('" & MAIN_SHEET & "', '" & STATUS_SHEET & "', '" & DEMAND_SHEET & "', '" & HISTORY_SHEET & "') is missing. Aborting.", vbCritical
        GoTo Cleanup
    End If
    
    Set WS_Summary = TWB.Sheets.Add(After:=TWB.Sheets(TWB.Sheets.Count))
    WS_Summary.Name = SUMMARY_SHEET
    
    ' ***ADDED***: Create a log sheet to record warnings and notes.
    Set WS_Log = TWB.Sheets.Add(After:=TWB.Sheets(TWB.Sheets.Count))
    InitializeLogSheet WS_Log

    ' --- 2. CORE PROCESSING ---
    Application.StatusBar = "Creating family sheets..."
    CreateFamilySheets TWB, WS_ProductStatus, WS_DemandForecast, WS_Summary

    Application.StatusBar = "Processing forecast data..."
    ProcessForecastData TWB, WS_ProductStatus, WS_DemandForecast, WS_HistoricalSales, WS_Summary, WS_Log

    ' --- 3. FINALIZATION ---
    Application.StatusBar = "Creating final report workbook..."
    Set NewWB = CreateOutputWorkbook(TWB)
    
    If Not NewWB Is Nothing Then
        Application.StatusBar = "Formatting and saving final report..."
        Dim WS As Worksheet
        For Each WS In NewWB.Worksheets
            WS.Cells.EntireColumn.AutoFit
        Next WS
        
        Dim FilePath As String
        FilePath = TWB.Path & "\Demand ForeCast - " & Format(Now, "DDMMYYYY_HHMMSS") & ".xlsx"
        NewWB.SaveAs FilePath
        NewWB.Close SaveChanges:=False
    End If

' --- 4. CLEANUP ---
Cleanup:
    Application.StatusBar = False ' Clear the status bar
    If Not MainSheet Is Nothing Then MainSheet.Activate
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    MsgBox "Forecast Update Completed.", vbInformation
End Sub

' =================================================================================================================
' Helper Procedure: CreateFamilySheets
' Description: Creates a new worksheet for each product family.
' =================================================================================================================
Private Sub CreateFamilySheets(ByVal TWB As Workbook, ByVal WS_ProductStatus As Worksheet, ByVal WS_DemandForecast As Worksheet, ByVal WS_Summary As Worksheet)
    Dim DemandForecastLRow As Long, ProductStatusLRow As Long
    Dim CurrFamilyRow As Long, CurrProductRow As Long
    Dim CurrFamily As String, CurrProductFamily As String
    Dim WS_NewFamily As Worksheet

    DemandForecastLRow = WS_DemandForecast.Cells(Rows.Count, "A").End(xlUp).Row
    ProductStatusLRow = WS_ProductStatus.Cells(Rows.Count, "A").End(xlUp).Row
    
    SetupSummaryHeaders WS_ProductStatus, WS_Summary

    For CurrFamilyRow = 2 To DemandForecastLRow
        CurrFamily = Trim(WS_DemandForecast.Range("A" & CurrFamilyRow).Value)
        
        If Len(CurrFamily) > 0 And Not SheetExists(TWB, CurrFamily) Then
            Set WS_NewFamily = TWB.Sheets.Add(After:=TWB.Sheets(TWB.Sheets.Count))
            WS_NewFamily.Name = CurrFamily
            
            WS_ProductStatus.Range("A1:D1").Copy WS_NewFamily.Range("A1")
            WS_NewFamily.Range("E1").Value = "Active/Discontinued"
            WS_NewFamily.Range("F1").Value = "Phase Out Month"
            
            For CurrProductRow = 2 To ProductStatusLRow
                CurrProductFamily = LCase(Trim(WS_ProductStatus.Range("A" & CurrProductRow).Value))
                If CurrProductFamily = LCase(CurrFamily) Then
                    Dim NextFreeRow As Long
                    NextFreeRow = WS_NewFamily.Cells(Rows.Count, "A").End(xlUp).Row + 1
                    WS_ProductStatus.Range("A" & CurrProductRow & ":D" & CurrProductRow).Copy WS_NewFamily.Range("A" & NextFreeRow)
                End If
            Next CurrProductRow
        End If
    Next CurrFamilyRow
End Sub

' =================================================================================================================
' Helper Procedure: SetupSummaryHeaders
' Description: Sets up the initial STATIC headers for the "Summary" worksheet.
' =================================================================================================================
Private Sub SetupSummaryHeaders(ByVal WS_ProductStatus As Worksheet, ByVal WS_Summary As Worksheet)
    WS_ProductStatus.Range("A1:D1").Copy WS_Summary.Range("A1")
    WS_Summary.Range("E1").Value = "Active/Discontinued"
    WS_Summary.Range("F1").Value = "Phase Out Month"
End Sub

' =================================================================================================================
' Helper Procedure: ProcessForecastData
' Description: Iterates through each product family sheet to perform the main forecast calculations.
' =================================================================================================================
Private Sub ProcessForecastData(ByVal TWB As Workbook, ByVal WS_ProductStatus As Worksheet, ByVal WS_DemandForecast As Worksheet, ByVal WS_HistoricalSales As Worksheet, ByVal WS_Summary As Worksheet, ByVal WS_Log As Worksheet)
    Dim WS_CurrentFamily As Worksheet
    Dim CurrFamily As String
    Dim DemandForecastLRow As Long
    Dim CurrFamilyRow As Long

    DemandForecastLRow = WS_DemandForecast.Cells(Rows.Count, "A").End(xlUp).Row

    For CurrFamilyRow = 2 To DemandForecastLRow
        CurrFamily = Trim(WS_DemandForecast.Range("A" & CurrFamilyRow).Value)
        Application.StatusBar = "Processing family: " & CurrFamily & "..."
        
        If SheetExists(TWB, CurrFamily) Then
            Set WS_CurrentFamily = TWB.Sheets(CurrFamily)
            CalculateAndFormatFamilySheet WS_CurrentFamily, WS_ProductStatus, WS_DemandForecast, WS_HistoricalSales, WS_Log
            AppendToSummarySheet WS_CurrentFamily, WS_Summary
            Set WS_CurrentFamily = Nothing
        End If
    Next CurrFamilyRow
End Sub

' =================================================================================================================
' Helper Procedure: CalculateAndFormatFamilySheet
' Description: Performs all calculations and formatting for a single family worksheet.
' =================================================================================================================
Private Sub CalculateAndFormatFamilySheet(ByVal WS_CurrentFamily As Worksheet, ByVal WS_ProductStatus As Worksheet, ByVal WS_DemandForecast As Worksheet, ByVal WS_HistoricalSales As Worksheet, ByVal WS_Log As Worksheet)
    Dim FamilyLRow As Long, FamilyLCol As Long, HistLCol As Long, FamilyCol As Long
    Dim ProductRow As Long
    Dim ProdGroupSum As Double, FamilySum As Double
    Dim DemandData As Variant, HistoricData As Variant
    Dim MonthCount As Long
    
    FamilyLCol = WS_CurrentFamily.Cells(1, Columns.Count).End(xlToLeft).Column
    MonthCount = GetHistoricalMonthCount(WS_DemandForecast, WS_HistoricalSales)
    
    If FamilyLCol >= 7 Then
        WS_CurrentFamily.Range(WS_CurrentFamily.Cells(1, 7), WS_CurrentFamily.Cells(1, FamilyLCol)).EntireColumn.Delete
    End If
    WS_HistoricalSales.Range(WS_HistoricalSales.Cells(1, 5), WS_HistoricalSales.Cells(1, MonthCount + 4)).Copy WS_CurrentFamily.Range("G1")
    
    FamilyLCol = WS_CurrentFamily.Cells(1, Columns.Count).End(xlToLeft).Column
    Dim DemandForecastLCol As Long
    DemandForecastLCol = WS_DemandForecast.Cells(1, Columns.Count).End(xlToLeft).Column
    WS_DemandForecast.Range(WS_DemandForecast.Cells(1, 2), WS_DemandForecast.Cells(1, DemandForecastLCol)).Copy WS_CurrentFamily.Cells(1, FamilyLCol + 1)
    
    FamilyLCol = WS_CurrentFamily.Cells(1, Columns.Count).End(xlToLeft).Column
    HistLCol = 6 + MonthCount
    
    AddNewProductsToFamilySheet WS_CurrentFamily, WS_ProductStatus
    FamilyLRow = WS_CurrentFamily.Cells(Rows.Count, "A").End(xlUp).Row

    For ProductRow = 2 To FamilyLRow
        Dim CurrProduct As String, CurrProductFamily As String, CurrGroupID As String
        CurrProductFamily = WS_CurrentFamily.Range("A" & ProductRow).Value
        CurrProduct = WS_CurrentFamily.Range("D" & ProductRow).Value
        If InStr(CurrProduct, "-") > 0 Then
            CurrGroupID = Split(CurrProduct, "-")(0) & Split(CurrProduct, "-")(1)
        Else
            CurrGroupID = CurrProduct
        End If

        Dim StatusDetails As Variant
        StatusDetails = GetProductStatus(CurrProduct, WS_ProductStatus, WS_Log)
        Dim ActiveType As String, PhaseOutMonth As Date, PhaseOutPercent As Double, IsSuperseding As Boolean
        ActiveType = StatusDetails(0)

        If IsDate(StatusDetails(1)) Then PhaseOutMonth = CDate(StatusDetails(1)) Else PhaseOutMonth = 0
        If IsNumeric(StatusDetails(2)) And StatusDetails(2) <> "" Then PhaseOutPercent = CDbl(StatusDetails(2)) Else PhaseOutPercent = 0
        IsSuperseding = StatusDetails(3)

        WS_CurrentFamily.Cells(ProductRow, 5).Value = ActiveType
        If PhaseOutMonth > 0 Then WS_CurrentFamily.Cells(ProductRow, 6).Value = PhaseOutMonth

        HistoricData = GetHistoricalDataForProduct(CurrProduct, WS_HistoricalSales, MonthCount + 4)
        WS_CurrentFamily.Range(WS_CurrentFamily.Cells(ProductRow, 7), WS_CurrentFamily.Cells(ProductRow, HistLCol)).Value = HistoricData
        
        ProdGroupSum = GetHistoricalSum(CurrProductFamily, CurrGroupID, WS_HistoricalSales, MonthCount + 4)
        FamilySum = GetHistoricalFamilySum(CurrProductFamily, WS_HistoricalSales, WS_ProductStatus, MonthCount + 4, WS_Log)
        
        Dim DemandDataRow As Variant
        DemandDataRow = Application.Match(CurrProductFamily, WS_DemandForecast.Columns(1), 0)
        
        If IsNumeric(DemandDataRow) Then
            DemandData = WS_DemandForecast.Range(WS_DemandForecast.Cells(DemandDataRow, 2), WS_DemandForecast.Cells(DemandDataRow, DemandForecastLCol)).Value
            For FamilyCol = (HistLCol + 1) To FamilyLCol
                Dim ForecastValue As Double
                ForecastValue = CalculateForecastValue(ActiveType, IsSuperseding, PhaseOutMonth, PhaseOutPercent, WS_CurrentFamily.Cells(1, FamilyCol).Value, ProdGroupSum, FamilySum, DemandData(1, FamilyCol - HistLCol))
                WS_CurrentFamily.Cells(ProductRow, FamilyCol).Value = ForecastValue
            Next FamilyCol
        End If
    Next ProductRow

    FormatFamilySheet WS_CurrentFamily, FamilyLRow, FamilyLCol
End Sub

' =================================================================================================================
' Helper Function: CalculateForecastValue
' =================================================================================================================
Private Function CalculateForecastValue(ByVal ActiveType As String, ByVal isSuperseding As Boolean, ByVal PhaseOutMonth As Date, ByVal PhaseOutPercent As Double, ByVal ForecastDate As Date, ByVal ProdGroupSum As Double, ByVal FamilySum As Double, ByVal FamilyDemand As Double) As Double
    Dim BaseForecast As Double
    BaseForecast = 0
    If FamilySum > 0 Then BaseForecast = (ProdGroupSum * FamilyDemand) / FamilySum

    Select Case ActiveType
        Case STATUS_ACTIVE
            If Not isSuperseding Then
                CalculateForecastValue = BaseForecast
            Else
                If ForecastDate < PhaseOutMonth Then
                    CalculateForecastValue = 0
                ElseIf Month(ForecastDate) = Month(PhaseOutMonth) And Year(ForecastDate) = Year(PhaseOutMonth) Then
                    CalculateForecastValue = BaseForecast * (1 - PhaseOutPercent)
                Else
                    CalculateForecastValue = BaseForecast
                End If
            End If
        Case STATUS_PHASE_IN_OUT
            If ForecastDate < PhaseOutMonth Then
                CalculateForecastValue = BaseForecast
            ElseIf Month(ForecastDate) = Month(PhaseOutMonth) And Year(ForecastDate) = Year(PhaseOutMonth) Then
                CalculateForecastValue = BaseForecast * PhaseOutPercent
            Else
                CalculateForecastValue = 0
            End If
        Case STATUS_DISCONTINUED
            If PhaseOutMonth = 0 Or ForecastDate < PhaseOutMonth Then
                CalculateForecastValue = BaseForecast
            Else
                CalculateForecastValue = 0
            End If
        Case Else
            CalculateForecastValue = 0
    End Select
End Function

' =================================================================================================================
' Helper Procedure: AddNewProductsToFamilySheet
' =================================================================================================================
Private Sub AddNewProductsToFamilySheet(ByVal WS_CurrentFamily As Worksheet, ByVal WS_ProductStatus As Worksheet)
    Dim ProductStatusLRow As Long, FamilyLRow As Long, CurrProdRow As Long
    Dim CurrProduct As String, CurrProductFamily As String, ActiveType As String
    ProductStatusLRow = WS_ProductStatus.Cells(Rows.Count, "A").End(xlUp).Row
    
    For CurrProdRow = 2 To ProductStatusLRow
        CurrProductFamily = LCase(Trim(WS_ProductStatus.Range("A" & CurrProdRow).Value))
        ActiveType = Trim(WS_ProductStatus.Range("E" & CurrProdRow).Value)
        CurrProduct = Trim(WS_ProductStatus.Range("D" & CurrProdRow).Value)
        
        If CurrProductFamily = LCase(WS_CurrentFamily.Name) And ActiveType = STATUS_NEW Then
            Dim Found As Range
            Set Found = WS_CurrentFamily.Range("D:D").Find(What:=CurrProduct, LookIn:=xlValues, LookAt:=xlWhole)
            If Found Is Nothing Then
                FamilyLRow = WS_CurrentFamily.Cells(Rows.Count, "A").End(xlUp).Row + 1
                WS_ProductStatus.Range("A" & CurrProdRow & ":D" & CurrProdRow).Copy WS_CurrentFamily.Range("A" & FamilyLRow)
            End If
        End If
    Next CurrProdRow
End Sub

' =================================================================================================================
' Helper Procedure: FormatFamilySheet
' =================================================================================================================
Private Sub FormatFamilySheet(ByVal WS As Worksheet, ByVal LastRow As Long, ByVal LastCol As Long)
    If LastRow < 2 Then Exit Sub
    Dim TotalRow As Long, i As Long
    TotalRow = LastRow + 1
    
    For i = 7 To LastCol
        WS.Cells(TotalRow, i).Value = Application.WorksheetFunction.Sum(WS.Range(WS.Cells(2, i), WS.Cells(LastRow, i)))
    Next i
    
    WS.Range(WS.Cells(1, 1), WS.Cells(TotalRow, LastCol)).Borders.LineStyle = xlContinuous
    WS.Range(WS.Cells(2, 7), WS.Cells(TotalRow, LastCol)).NumberFormat = "0"
    WS.Range(WS.Cells(TotalRow, 1), WS.Cells(TotalRow, LastCol)).Font.Bold = True
    WS.Range(WS.Cells(TotalRow, 7), WS.Cells(TotalRow, LastCol)).Interior.Color = RGB(228, 158, 221)
    
    Dim HistLCol As Long
    HistLCol = GetLastHistoricalColumn(WS)
    If HistLCol > 6 Then WS.Range(WS.Cells(2, 7), WS.Cells(LastRow, HistLCol)).Interior.Color = RGB(208, 208, 208)
End Sub

' =================================================================================================================
' Helper Procedure: AppendToSummarySheet
' =================================================================================================================
Private Sub AppendToSummarySheet(ByVal WS_Family As Worksheet, ByVal WS_Summary As Worksheet)
    Dim FamilyLRow As Long, FamilyLCol As Long
    Dim SummaryLRow As Long, SummaryLastRow As Long
    
    FamilyLRow = WS_Family.Cells(Rows.Count, "A").End(xlUp).Row - 1
    If FamilyLRow < 2 Then Exit Sub
    
    FamilyLCol = WS_Family.Cells(1, Columns.Count).End(xlToLeft).Column
    SummaryLRow = WS_Summary.Cells(Rows.Count, "A").End(xlUp).Row
    
    If IsEmpty(WS_Summary.Range("G1").Value) Then
        WS_Family.Range(WS_Family.Cells(1, 7), WS_Family.Cells(1, FamilyLCol)).Copy WS_Summary.Range("G1")
    End If
    
    WS_Family.Range(WS_Family.Cells(2, 1), WS_Family.Cells(FamilyLRow, FamilyLCol)).Copy WS_Summary.Range("A" & SummaryLRow + 1)
    
    SummaryLastRow = WS_Summary.Cells(Rows.Count, "A").End(xlUp).Row
    If SummaryLastRow > 1 Then
      WS_Summary.Range("A1", WS_Summary.Cells(SummaryLastRow, FamilyLCol)).Sort Key1:=WS_Summary.Range("D2"), Order1:=xlAscending, Header:=xlYes
    End If
End Sub

' =================================================================================================================
' Helper Function: GetProductStatus
' =================================================================================================================
Private Function GetProductStatus(ByVal ProductName As String, ByVal WS_ProductStatus As Worksheet, ByVal WS_Log As Worksheet) As Variant
    Dim Result(0 To 3) As Variant, FoundRow As Variant, i As Long, ProductStatusLRow As Long
    ProductStatusLRow = WS_ProductStatus.Cells(Rows.Count, "A").End(xlUp).Row
    Result(0) = "Unknown": Result(1) = 0: Result(2) = 0: Result(3) = False
    
    On Error Resume Next
    FoundRow = Application.Match(ProductName, WS_ProductStatus.Columns("D"), 0)
    On Error GoTo 0
    
    If IsNumeric(FoundRow) Then
        Result(0) = WS_ProductStatus.Range("E" & FoundRow).Value
        Result(1) = WS_ProductStatus.Range("F" & FoundRow).Value
        Result(2) = WS_ProductStatus.Range("G" & FoundRow).Value
        
        If Result(0) = STATUS_ACTIVE Then
            For i = 2 To ProductStatusLRow
                If WS_ProductStatus.Range("H" & i).Value = ProductName Then
                    Result(3) = True
                    Result(1) = WS_ProductStatus.Range("F" & i).Value
                    Result(2) = WS_ProductStatus.Range("G" & i).Value
                    Exit For
                End If
            Next i
        End If
    Else
        ' ***ADDED***: Log a warning if a product is not found in the status sheet.
        WriteToLog WS_Log, "Warning", "Product '" & ProductName & "' not found in '" & STATUS_SHEET & "'. Status set to 'Unknown'."
    End If
    
    GetProductStatus = Result
End Function

' =================================================================================================================
' Helper Function: GetHistoricalDataForProduct
' =================================================================================================================
Private Function GetHistoricalDataForProduct(ByVal ProductName As String, ByVal WS_Hist As Worksheet, ByVal HistLCol As Long) As Variant
    Dim FoundRow As Variant
    On Error Resume Next
    FoundRow = Application.Match(ProductName, WS_Hist.Columns("D"), 0)
    On Error GoTo 0
    
    If IsNumeric(FoundRow) Then
        GetHistoricalDataForProduct = WS_Hist.Range(WS_Hist.Cells(FoundRow, 5), WS_Hist.Cells(FoundRow, HistLCol)).Value
    Else
        Dim DummyArray() As Variant
        ReDim DummyArray(1 To 1, 1 To (HistLCol - 4))
        GetHistoricalDataForProduct = DummyArray
    End If
End Function

' =================================================================================================================
' Helper Function: GetHistoricalSum
' =================================================================================================================
Private Function GetHistoricalSum(ByVal FamilyName As String, ByVal GroupID As String, ByVal WS_Hist As Worksheet, ByVal HistLCol As Long) As Double
    Dim TotalSum As Double, i As Long, r As Long, HistLRow As Long
    Dim CurrentGroupID As String, CurrentFamily As String
    HistLRow = WS_Hist.Cells(Rows.Count, "A").End(xlUp).Row
    TotalSum = 0

    For r = 2 To HistLRow
        CurrentFamily = UCase(Trim(WS_Hist.Range("A" & r).Value))
        Dim CurrentProduct As String
        CurrentProduct = Trim(WS_Hist.Range("D" & r).Value)
        If InStr(CurrentProduct, "-") > 0 Then CurrentGroupID = Split(CurrentProduct, "-")(0) & Split(CurrentProduct, "-")(1) Else CurrentGroupID = CurrentProduct
        
        If CurrentGroupID = GroupID And CurrentFamily = UCase(FamilyName) Then
            For i = 5 To HistLCol
                TotalSum = TotalSum + Val(WS_Hist.Cells(r, i).Value)
            Next i
        End If
    Next r
    GetHistoricalSum = TotalSum
End Function

' =================================================================================================================
' Helper Function: GetHistoricalFamilySum
' =================================================================================================================
Private Function GetHistoricalFamilySum(ByVal FamilyName As String, ByVal WS_Hist As Worksheet, ByVal WS_Status As Worksheet, ByVal HistLCol As Long, ByVal WS_Log As Worksheet) As Double
    Dim TotalSum As Double, r As Long, c As Long, HistLRow As Long
    Dim HSProduct As String, HSActiveType As String, HSFamily As String, HSPhaseOutMonth As Date
    HistLRow = WS_Hist.Cells(Rows.Count, "A").End(xlUp).Row
    TotalSum = 0

    For r = 2 To HistLRow
        HSFamily = LCase(Trim(WS_Hist.Range("A" & r).Value))
        
        If HSFamily = LCase(FamilyName) Then
            HSProduct = Trim(WS_Hist.Range("D" & r).Value)
            
            Dim StatusDetails As Variant
            StatusDetails = GetProductStatus(HSProduct, WS_Status, WS_Log)
            HSActiveType = StatusDetails(0)
            HSPhaseOutMonth = StatusDetails(1)

            For c = 5 To HistLCol
                Dim IncludeSale As Boolean: IncludeSale = False
                
                If HSActiveType <> STATUS_DISCONTINUED Then
                    IncludeSale = True
                Else
                    If HSPhaseOutMonth > 0 And IsDate(WS_Hist.Cells(1, c).Value) Then
                         If WS_Hist.Cells(1, c).Value < HSPhaseOutMonth Then IncludeSale = True
                    Else
                        IncludeSale = True
                    End If
                End If

                If IncludeSale Then TotalSum = TotalSum + Val(WS_Hist.Cells(r, c).Value)
            Next c
        End If
    Next r
    GetHistoricalFamilySum = TotalSum
End Function

' =================================================================================================================
' Utility Function: GetHistoricalMonthCount
' =================================================================================================================
Private Function GetHistoricalMonthCount(ByVal WS_Demand As Worksheet, ByVal WS_Hist As Worksheet) As Long
    Dim HistLCol As Long, CurrCol As Long, Count As Long
    HistLCol = WS_Hist.Cells(1, Columns.Count).End(xlToLeft).Column
    Count = 0
    For CurrCol = 5 To HistLCol
        If IsDate(WS_Demand.Cells(1, 2).Value) And IsDate(WS_Hist.Cells(1, CurrCol).Value) Then
            If CDate(WS_Demand.Cells(1, 2).Value) > CDate(WS_Hist.Cells(1, CurrCol).Value) Then Count = Count + 1 Else Exit For
        End If
    Next CurrCol
    GetHistoricalMonthCount = Count
End Function

' =================================================================================================================
' Utility Function: GetLastHistoricalColumn
' =================================================================================================================
Private Function GetLastHistoricalColumn(ByVal WS As Worksheet) As Long
    Dim DemandForecastStartDate As Date, LastCol As Long, i As Long
    On Error Resume Next
    DemandForecastStartDate = WS.Cells(1, 7).Value
    On Error GoTo 0
    If Not IsDate(DemandForecastStartDate) Then GetLastHistoricalColumn = 6: Exit Function
    
    LastCol = WS.Cells(1, Columns.Count).End(xlToLeft).Column
    GetLastHistoricalColumn = 6
    For i = 7 To LastCol
        If IsDate(WS.Cells(1, i).Value) Then
            If CDate(WS.Cells(1, i).Value) < DemandForecastStartDate Then GetLastHistoricalColumn = i Else Exit For
        End If
    Next i
End Function

' =================================================================================================================
' Utility Function: SheetExists
' =================================================================================================================
Private Function SheetExists(ByVal WB As Workbook, ByVal SheetName As String) As Boolean
    Dim WS As Worksheet
    On Error Resume Next
    Set WS = WB.Sheets(SheetName)
    On Error GoTo 0
    SheetExists = Not WS Is Nothing
End Function

' =================================================================================================================
' Utility Procedure: CreateOutputWorkbook
' =================================================================================================================
Private Function CreateOutputWorkbook(ByVal TWB As Workbook) As Workbook
    Dim WB As Workbook, WS As Worksheet
    Dim SheetNames As Object: Set SheetNames = CreateObject("System.Collections.ArrayList")
    
    For Each WS In TWB.Worksheets
        Select Case WS.Name
            Case MAIN_SHEET, STATUS_SHEET, HISTORY_SHEET, DEMAND_SHEET
            Case Else: SheetNames.Add WS.Name
        End Select
    Next WS
    
    If SheetNames.Count = 0 Then Set CreateOutputWorkbook = Nothing: Exit Function
    
    TWB.Sheets(SheetNames.ToArray).Move
    Set WB = ActiveWorkbook
    WB.Sheets(SUMMARY_SHEET).Activate
    Set CreateOutputWorkbook = WB
End Function

' =================================================================================================================
' *** NEW *** Logging Utility Procedures
' =================================================================================================================
Private Sub InitializeLogSheet(ByVal WS As Worksheet)
    WS.Name = LOG_SHEET
    With WS.Range("A1:C1")
        .Value = Array("Timestamp", "Type", "Message")
        .Font.Bold = True
    End With
End Sub

Private Sub WriteToLog(ByVal WS As Worksheet, ByVal LogType As String, ByVal Message As String)
    Dim NextRow As Long
    NextRow = WS.Cells(Rows.Count, "A").End(xlUp).Row + 1
    WS.Cells(NextRow, "A").Value = Now
    WS.Cells(NextRow, "B").Value = LogType
    WS.Cells(NextRow, "C").Value = Message
End Sub
