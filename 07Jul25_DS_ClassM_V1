'@Folder("Classes")
Option Explicit

'================================================================================================
' CLASS MODULE: cProductLifecycle
' V16.0: Key Figure Upgrade
'      - Aligned properties with the official Product Status sheet layout.
'      - Enhanced forecast multiplier logic to be more dynamic.
'
' Author:      Ayush Goyal
' Date:        06-Jul-2025
' Purpose:     Defines a Product Lifecycle object to store and manage the status,
'              phase-in/out dates, and successor information for a single product.
'================================================================================================

'--- Public Properties ---
Public Affiliate As String
Public ForecastTier As String
Public ForecastSubTier As String
Public LocalItemNbr As String
Public Description As String
Public ISD As String
Public Status As ProductStatus
Public PhaseOutDate As Date
Public PhaseOutPercent As Double
Public SupersededByProductID As String
Public IsPhasingOut As Boolean
Public IsPhasingIn As Boolean
Public PhaseInDate As Date
Public PhaseInPercent As Double

'--- Purpose: Initializes the object's properties from a row of data in the status array.
'------------------------------------------------------------------------------------------------
Public Sub Init(ByVal arrDataSource As Variant, ByVal lngRow As Long)
    On Error Resume Next
    Me.Affiliate = Trim$(arrDataSource(lngRow, PS_AFFILIATE_COL))
    Me.ForecastTier = Trim$(arrDataSource(lngRow, PS_TIER_COL))
    Me.ForecastSubTier = Trim$(arrDataSource(lngRow, PS_SUB_TIER_COL))
    Me.LocalItemNbr = Trim$(arrDataSource(lngRow, PS_LOCAL_ITEM_NBR_COL))
    Me.Description = Trim$(arrDataSource(lngRow, PS_DESC_COL))
    Me.ISD = Trim$(arrDataSource(lngRow, PS_ISD_COL))
    Me.Status = GetStatusEnum(Trim$(arrDataSource(lngRow, PS_STATUS_COL)))
    Me.SupersededByProductID = Trim$(arrDataSource(lngRow, PS_SUPERSEDED_BY_COL))
    
    Dim varPhaseOutPct As Variant: varPhaseOutPct = arrDataSource(lngRow, PS_PHASE_OUT_PCT_COL)
    If IsNumeric(varPhaseOutPct) And varPhaseOutPct >= 0 And varPhaseOutPct <= 1 Then
        Me.PhaseOutPercent = CDbl(varPhaseOutPct)
    Else
        Me.PhaseOutPercent = 1 ' Default to 100% if blank or invalid
    End If

    If Me.Status = psPhaseInOut Or Me.Status = psDiscontinued Then
        Me.IsPhasingOut = True
        If IsDate(arrDataSource(lngRow, PS_PHASE_OUT_DATE_COL)) Then
            Me.PhaseOutDate = CDate(arrDataSource(lngRow, PS_PHASE_OUT_DATE_COL))
        End If
    End If
    On Error GoTo 0
End Sub

'--- Purpose: Calculates the forecast multiplier for a given month based on the object's status.
'--- Returns: A Double (e.g., 1.0, 0.5, 0.0) to adjust the base forecast.
'------------------------------------------------------------------------------------------------
Public Function GetForecastMultiplier(ByVal dteForecastDate As Date) As Double
    GetForecastMultiplier = 1 'Default to 100% for active products

    '--- Handle Phase-In logic ---
    If Me.IsPhasingIn Then
        If dteForecastDate < Me.PhaseInDate Then
            GetForecastMultiplier = 0 'Forecast is zero before phase-in starts
            Exit Function
        ElseIf IsSameMonthAndYear(dteForecastDate, Me.PhaseInDate) Then
            GetForecastMultiplier = Me.PhaseInPercent 'Apply phase-in percentage for the first month
            Exit Function
        End If
    End If

    '--- Handle Phase-Out logic ---
    If Me.IsPhasingOut And Me.PhaseOutDate > 0 And dteForecastDate >= Me.PhaseOutDate Then
        If IsSameMonthAndYear(dteForecastDate, Me.PhaseOutDate) Then
            'In the final month, the multiplier is the specified phase-out percentage
            GetForecastMultiplier = (1 - Me.PhaseOutPercent)
        Else
            'After the final month, the forecast is zero
            GetForecastMultiplier = 0
        End If
    End If
    
    '--- Handle outright Discontinued status ---
    If Me.Status = psDiscontinued And dteForecastDate >= Me.PhaseOutDate Then
        GetForecastMultiplier = 0
    End If
    
End Function

'--- Purpose: Finds the successor product (if any) in the main lifecycle map and
'---          sets its phase-in properties based on this object's phase-out data.
'------------------------------------------------------------------------------------------------
Public Sub LinkSuccessor(ByVal dictMap As Object)
    If Not Me.IsPhasingOut Or Len(Me.SupersededByProductID) = 0 Then Exit Sub
    
    Dim strSuccessorKey As String
    strSuccessorKey = BuildCompositeKey(Me.Affiliate, Me.SupersededByProductID)
    
    If dictMap.Exists(strSuccessorKey) Then
        Dim objSuccessor As cProductLifecycle
        Set objSuccessor = dictMap.Item(strSuccessorKey)
        
        '--- Set the successor's phase-in details ---
        With objSuccessor
            .IsPhasingIn = True
            .PhaseInDate = Me.PhaseOutDate
            .PhaseInPercent = Me.PhaseOutPercent 'Successor's volume is the inverse of predecessor's
        End With
    End If
End Sub


'================================================================================================
'--- PRIVATE HELPER METHODS ---
'================================================================================================

'--- Purpose: Compares two dates to see if they fall in the same month and year.
'------------------------------------------------------------------------------------------------
Private Function IsSameMonthAndYear(ByVal date1 As Date, ByVal date2 As Date) As Boolean
    If date1 = 0 Or date2 = 0 Then Exit Function
    IsSameMonthAndYear = (Month(date1) = Month(date2) And Year(date1) = Year(date2))
End Function
