Option Explicit

' --- Windows API Declaration for OLE Message Filter ---
Private Declare PtrSafe Function CoRegisterMessageFilter Lib "OLE32.DLL" _
    (ByVal lpMessageFilter As LongPtr, ByRef lplpMessageFilter As LongPtr) As Long ' HRESULT return

' --- Windows API Declaration for Sleep Function ---
#If VBA7 Then
    Public Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As LongPtr)
#Else
    Public Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
#End If

' --- Global Objects required across calls ---
' *** USING EARLY BINDING - REQUIRES REFERENCE TO "SAP GUI Scripting API" Library ***
Public objGui       As GuiApplication
Public objConn      As GuiConnection
Public objSess      As GuiSession
Public objSBar      As GuiStatusbar

' //========================================================================
' // Sub: StartExtract
' // Purpose: Main entry point. Handles all connection/session logic.
' //========================================================================
Public Sub StartExtract()

    ' --- CONFIGURATION CONSTANTS ---
    Const cTARGET_SYSTEM_ID_CLIENT As String = "PEA100" ' <<< ADJUST: SystemID+Client (for FINDING existing)
    Const cTARGET_SYSTEM_DESCRIPTION As String = "9A. Symphony ECC Production" ' <<< ADJUST: EXACT Description (for SSO LOGIN)
    Const cSAP_LOGON_PATH As String = "C:\Program Files (x86)\SAP\FrontEnd\SAPgui\saplogon.exe" ' <<< VERIFY/ADJUST Path
    Const cMAX_SESSIONS As Integer = 6
    Const cLOGON_TIMEOUT_SECONDS As Long = 60
    Const cSHORT_WAIT_MS As Long = 500 ' Standard short wait time
    Const cMEDIUM_WAIT_MS As Long = 1500 ' Wait after potentially slow actions like /o
    Const cLONG_WAIT_MS As Long = 3000 ' Longer wait if needed

    ' --- Local Variables ---
    Dim SapGuiAuto As Object
    Dim TargetConn As GuiConnection
    Dim W_conn As GuiConnection
    Dim W_Sess As GuiSession
    Dim FirstFoundSess As GuiSession
    Dim NewSess As GuiSession
    Dim TargetSessSSO As GuiSession
    Dim SessionObtained As Boolean
    Dim Session_Nr_All_Before As Long ' Store session count before /o
    Dim Session_Nr_All_After As Long  ' Store session count after /o attempt
    Dim i As Long
    Dim j As Long
    Dim highestSessNum As Long
    Dim currentSessNum As Long
    Dim MsgResult As VbMsgBoxResult
    Dim currentTransaction As String
    Dim foundConnection As Boolean
    Dim attempts As Integer
    Dim startTime As Single
    Dim popupWnd As GuiModalWindow

    ' --- Mark Start of Execution & Initialize ---
    Debug.Print vbCrLf & "====================================================="
    Debug.Print "   *** NEW RUN START: StartExtract *** (" & Format(Now, "yyyy-mm-dd hh:nn:ss") & ")"
    Debug.Print "====================================================="

    On Error GoTo ErrorHandler

    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual

    SessionObtained = False
    foundConnection = False
    Set TargetConn = Nothing
    Set FirstFoundSess = Nothing

    Debug.Print "Target System (ID+Client for Find): '" & cTARGET_SYSTEM_ID_CLIENT & "'"
    Debug.Print "Target System (Description for SSO Login): '" & cTARGET_SYSTEM_DESCRIPTION & "'"
    Debug.Print "SAP Logon Path: '" & cSAP_LOGON_PATH & "'"
    Debug.Print "Max Sessions: " & cMAX_SESSIONS
    Debug.Print "SSO Logon Timeout: " & cLOGON_TIMEOUT_SECONDS & "s"
    Debug.Print "-----------------------------------------------------"

    ' Basic check: Constants
    If Trim$(cTARGET_SYSTEM_ID_CLIENT) = "" Or Trim$(cTARGET_SYSTEM_DESCRIPTION) = "" Then
        MsgBox "Config Error: Target system constants not defined.", vbCritical
        GoTo Cleanup
    End If

    ' --- STEP 1: Check Existing Global Session ---
    Debug.Print "STEP 1: Checking for existing global session object (objSess)..."
    If Not objSess Is Nothing Then
        Debug.Print "  - Global objSess exists. Checking validity for system '" & cTARGET_SYSTEM_ID_CLIENT & "'..."
        On Error Resume Next
        Dim tempSysName As String, tempClient As String, tempTCode As String
        tempSysName = objSess.Info.SystemName
        tempClient = objSess.Info.Client
        tempTCode = objSess.Info.TRANSACTION ' Check if session responds
        Dim sessInfoErr As Long: sessInfoErr = Err.Number
        Err.Clear
        On Error GoTo ErrorHandler

        If sessInfoErr = 0 Then
            If tempSysName & tempClient = cTARGET_SYSTEM_ID_CLIENT Then
                ' Session is valid and for the correct system
                Debug.Print "  - SUCCESS: Global objSess is valid and matches target system."
                If objConn Is Nothing Then Set objConn = objSess.Parent: Debug.Print "  - Set global objConn from objSess.Parent."
                If objSBar Is Nothing Then Set objSBar = objSess.FindById("wnd[0]/sbar"): Debug.Print "  - Set global objSBar from objSess."
                SessionObtained = True
                Debug.Print "  - Proceeding with existing global session #" & objSess.Info.SessionNumber
                GoTo RunReportScript
            Else
                 Debug.Print "  - Global objSess is for wrong system ('" & tempSysName & tempClient & "'). Clearing globals."
                 Set objSess = Nothing: Set objConn = Nothing: Set objSBar = Nothing: Set objGui = Nothing
            End If
        Else
            Debug.Print "  - Global objSess is invalid/closed (Error accessing Info: " & sessInfoErr & "). Clearing globals."
            Set objSess = Nothing: Set objConn = Nothing: Set objSBar = Nothing: Set objGui = Nothing
        End If
    Else
        Debug.Print "  - Global objSess is Nothing."
    End If

    ' --- STEP 2: Get SAP GUI Scripting Engine ---
    Debug.Print "-----------------------------------------------------"
    Debug.Print "STEP 2: Getting SAP GUI Scripting Engine..."
    If objGui Is Nothing Then
        Debug.Print "  - Global objGui is Nothing. Attempting GetObject(""SAPGUI"")..."
        On Error Resume Next
        Set SapGuiAuto = GetObject("SAPGUI")
        Dim getObjectErrNum As Long: getObjectErrNum = Err.Number
        Err.Clear
        On Error GoTo ErrorHandler

        If getObjectErrNum = 0 And Not SapGuiAuto Is Nothing Then
            Debug.Print "  - GetObject(""SAPGUI"") successful. Attempting GetScriptingEngine..."
            Set objGui = SapGuiAuto.GetScriptingEngine
            If objGui Is Nothing Then
                MsgBox "Error: Could not get Scripting Engine from SAPGUI object.", vbCritical
                GoTo Cleanup
            End If
            Debug.Print "  - SUCCESS: Obtained SAP GUI Scripting Engine via GetObject."
        Else
            Debug.Print "  - GetObject(""SAPGUI"") failed (Error: " & getObjectErrNum & "). SAP Logon may not be running."
            Set SapGuiAuto = Nothing ' Ensure it's clear
        End If
    Else
        Debug.Print "  - Using existing global objGui object."
    End If

    ' --- STEP 3: Find Existing Connection ---
    Debug.Print "-----------------------------------------------------"
    Debug.Print "STEP 3: Finding existing connection for System/Client '" & cTARGET_SYSTEM_ID_CLIENT & "'..."
    If Not objGui Is Nothing Then
        foundConnection = False
        Debug.Print "  - Looping through " & objGui.Children.Count & " GUI children (connections)..."
        For i = 0 To objGui.Children.Count - 1
            Set W_conn = Nothing ' Ensure clean slate for loop
            On Error Resume Next ' Handle potential errors accessing connection properties
            Set W_conn = objGui.Children(CLng(i))
            If Err.Number <> 0 Then
                Debug.Print "    - Error accessing connection at index " & i & ". Skipping."
                Err.Clear
                GoTo NextConnection ' Use GoTo for clarity in error handling within loop
            End If
            On Error GoTo ErrorHandler ' Restore main handler

            If Not W_conn Is Nothing Then
                 Debug.Print "    - Checking Connection Index " & i & " (Description: '" & W_conn.Description & "')..."
                 If W_conn.Children.Count > 0 Then
                     Set W_Sess = Nothing ' Ensure clean slate
                     On Error Resume Next ' Handle potential errors accessing session properties
                     Set W_Sess = W_conn.Children(0) ' Check first session
                     If Err.Number <> 0 Then
                         Debug.Print "      - Error accessing first session of connection " & i & ". Skipping connection."
                         Err.Clear
                         GoTo NextConnection
                     End If
                     On Error GoTo ErrorHandler ' Restore main handler

                     If Not W_Sess Is Nothing Then
                         On Error Resume Next ' Handle potential errors accessing Info properties
                         Dim sysInfoCheck As String: sysInfoCheck = W_Sess.Info.SystemName & W_Sess.Info.Client
                         Dim infoErr As Long: infoErr = Err.Number
                         Err.Clear
                         On Error GoTo ErrorHandler

                         If infoErr = 0 Then
                            Debug.Print "      - First session System/Client: '" & sysInfoCheck & "'"
                            If sysInfoCheck = cTARGET_SYSTEM_ID_CLIENT Then
                                 Set TargetConn = W_conn ' Found the connection
                                 foundConnection = True
                                 Debug.Print "      - MATCH FOUND! Storing this connection."
                                 Set W_Sess = Nothing ' Release temp session
                                 Exit For ' Exit the connection loop
                            End If
                         Else
                            Debug.Print "      - Error reading Info for first session (Error: " & infoErr & "). Cannot verify system."
                         End If
                         Set W_Sess = Nothing ' Release temp session
                     Else
                         Debug.Print "      - Could not get first session object for connection " & i & "."
                     End If
                 Else
                     Debug.Print "    - Connection Index " & i & " has no sessions. Skipping."
                 End If
            Else
                 Debug.Print "    - Could not get connection object at index " & i & "."
            End If
NextConnection:
             Set W_conn = Nothing ' Release loop connection object
        Next i
        If Not foundConnection Then Debug.Print "  - No existing connection found matching '" & cTARGET_SYSTEM_ID_CLIENT & "'."
    Else
        Debug.Print "  - Cannot search for connections because objGui is not valid."
    End If


    ' --- STEP 4: Handle Based on Connection Found Status ---
    Debug.Print "-----------------------------------------------------"
    Debug.Print "STEP 4: Determining session strategy..."

    If foundConnection And Not TargetConn Is Nothing Then
        ' --- PATH A: Connection Found ---
        Debug.Print "  - PATH A: Existing connection found. Checking for usable session..."
        Set objConn = TargetConn ' Set global connection object
        Session_Nr_All_Before = objConn.Children.Count ' Get count BEFORE potentially creating new one
        Debug.Print "    - Connection has " & Session_Nr_All_Before & " session(s)."

        ' Check for an IDLE session
        Debug.Print "    - Checking for an IDLE session (SESSION_MANAGER, SMEN, S000)..."
        Set FirstFoundSess = Nothing
        SessionObtained = False
        For j = 0 To objConn.Children.Count - 1
            Set W_Sess = Nothing: On Error Resume Next
            Set W_Sess = objConn.Children(CLng(j))
            If Err.Number <> 0 Then
                Debug.Print "      - Error accessing session at index " & j & ". Skipping."
                Err.Clear: GoTo NextIdleCheck
            End If
            On Error GoTo ErrorHandler ' Restore main handler

            If Not W_Sess Is Nothing Then
                Debug.Print "      - Checking Session Index " & j & " (ID: " & W_Sess.Info.SessionNumber & ")"
                If FirstFoundSess Is Nothing Then Set FirstFoundSess = W_Sess ' Store first valid one found
                On Error Resume Next
                Dim idleCheckTCode As String: idleCheckTCode = W_Sess.Info.TRANSACTION
                Dim idleErr As Long: idleErr = Err.Number
                Err.Clear
                On Error GoTo ErrorHandler
                If idleErr = 0 Then
                    Debug.Print "        - Transaction Code: '" & idleCheckTCode & "'"
                    Select Case UCase(idleCheckTCode)
                        Case "SESSION_MANAGER", "SMEN", "S000"
                            Set objSess = W_Sess ' Set global session
                            On Error Resume Next
                            Set objSBar = objSess.FindById("wnd[0]/sbar")
                            On Error GoTo ErrorHandler
                            If objSBar Is Nothing Then Debug.Print "        - Warning: Could not get status bar for idle session."
                            SessionObtained = True
                            Debug.Print "        - SUCCESS: Found suitable idle session #" & objSess.Info.SessionNumber
                            GoTo RunReportScript ' Found one, exit loop and proceed
                    End Select
                Else
                    Debug.Print "        - Error getting transaction code (Error: " & idleErr & "). Skipping idle check."
                End If
            Else
                 Debug.Print "      - Could not get session object at index " & j & "."
            End If
NextIdleCheck:
            Set W_Sess = Nothing ' Release loop variable
        Next j

        ' No idle session found, try to CREATE a new one using /o
        If Not SessionObtained Then
            Debug.Print "    - No idle session found."
            If FirstFoundSess Is Nothing Then
                MsgBox "Error: No sessions could be accessed on the found connection.", vbCritical
                GoTo Cleanup
            End If

            If Session_Nr_All_Before < cMAX_SESSIONS Then
                 Debug.Print "    - Session limit not reached (" & Session_Nr_All_Before & "/" & cMAX_SESSIONS & "). Attempting /o in session #" & FirstFoundSess.Info.SessionNumber & "..."
                 On Error GoTo ErrorHandler

                 ' Use the first valid session found to execute /o
                 Set objSess = FirstFoundSess
                 Debug.Print "      - Checking if wnd[0] of session #" & objSess.Info.SessionNumber & " is accessible..."
                 If objSess.ActiveWindow.Name <> "wnd[0]" Then
                     MsgBox "Error: Main window (wnd[0]) of session #" & objSess.Info.SessionNumber & " needed for /o is not active.", vbExclamation
                     Set objSess = Nothing
                     GoTo Cleanup
                 End If

                 Debug.Print "      - Executing /o command..."
                 objSess.FindById("wnd[0]/tbar[0]/okcd").Text = "/o"
                 objSess.FindById("wnd[0]").sendVKey 0
                 Set objSess = Nothing ' Release temporary session handle used for /o

                 Debug.Print "      - Waiting (" & cMEDIUM_WAIT_MS & "ms) for potential popup (wnd[1]) or session creation..."
                 Sleep cMEDIUM_WAIT_MS

                 ' --- ** NEW: Handle Potential 'Generate New Session' Popup (wnd[1]) ** ---
                 Set popupWnd = Nothing ' Reset popup variable
                 On Error Resume Next
                 ' Try to find the popup on the *active* GUI window, which might belong to the new session context
                 Set popupWnd = objGui.ActiveSession.FindById("wnd[1]", False) ' False = Don't raise error if not found
                 Dim popupErr As Long: popupErr = Err.Number: Err.Clear
                 On Error GoTo ErrorHandler

                 If popupErr = 0 And Not popupWnd Is Nothing Then
                    Debug.Print "      - Popup (wnd[1]) detected. Text: '" & popupWnd.Text & "'"
                    ' Check if it's the expected "Generate session" popup (text might vary)
                    If InStr(1, popupWnd.Text, "Generate", vbTextCompare) > 0 Or _
                       InStr(1, popupWnd.Text, "session", vbTextCompare) > 0 Then ' Add other keywords if needed
                        Const GENERATE_BUTTON_ID As String = "wnd[1]/tbar[0]/btn[5]" ' <<< FROM USER RECORDING
                        Debug.Print "      - Attempting to press Generate button (" & GENERATE_BUTTON_ID & ")..."
                        On Error Resume Next
                        popupWnd.FindById(GENERATE_BUTTON_ID).press
                        If Err.Number <> 0 Then
                            Debug.Print "        - Generate button press failed (Error: " & Err.Description & "). Trying Enter (VKey 0)..."
                            Err.Clear
                            popupWnd.sendVKey 0
                            If Err.Number <> 0 Then
                                Debug.Print "        - Enter (VKey 0) also failed (Error: " & Err.Description & "). Giving up on popup."
                                Err.Clear
                            Else
                                Debug.Print "        - Enter (VKey 0) sent successfully."
                            End If
                        Else
                            Debug.Print "        - Generate button pressed successfully."
                        End If
                        On Error GoTo ErrorHandler
                        Debug.Print "      - Waiting (" & cLONG_WAIT_MS & "ms) after handling popup for session to fully initialize..."
                        Sleep cLONG_WAIT_MS ' Wait longer after popup interaction
                    Else
                        Debug.Print "      - Popup (wnd[1]) detected, but text doesn't match expected 'Generate' popup. Ignoring."
                        ' Optional: Add code here to handle unexpected popups if necessary
                    End If
                 Else
                    Debug.Print "      - Popup (wnd[1]) not detected. Assuming direct session creation."
                    Sleep cSHORT_WAIT_MS ' Short additional wait
                 End If
                 Set popupWnd = Nothing ' Release popup object

                 ' --- ** NEW: Robust Session Finding Logic ** ---
                 Debug.Print "      - Verifying session count increase and finding new session..."
                 highestSessNum = 0
                 Set NewSess = Nothing
                 attempts = 0
                 Do
                    attempts = attempts + 1
                    ' Re-evaluate connection children count as it should have changed
                    If objConn Is Nothing Then Err.Raise vbObjectError + 520, "StartExtract", "Connection object lost before finding new session."
                    Session_Nr_All_After = objConn.Children.Count
                    Debug.Print "        - Attempt " & attempts & ": Current session count = " & Session_Nr_All_After

                    If Session_Nr_All_After > Session_Nr_All_Before Then
                        Debug.Print "        - Session count increased. Searching for highest session number..."
                        For j = 0 To Session_Nr_All_After - 1
                            Set W_Sess = Nothing: On Error Resume Next
                            Set W_Sess = objConn.Children(CLng(j))
                            If Err.Number <> 0 Then
                                Debug.Print "          - Warning: Error accessing session at index " & j & ".": Err.Clear
                                GoTo NextFindLoopSess
                            End If
                            On Error GoTo ErrorHandler ' Restore

                            If Not W_Sess Is Nothing Then
                                On Error Resume Next
                                currentSessNum = W_Sess.Info.SessionNumber
                                If Err.Number = 0 Then
                                    If currentSessNum > highestSessNum Then
                                        highestSessNum = currentSessNum
                                        Set NewSess = W_Sess ' Store the session object with the highest number
                                    End If
                                Else
                                    Debug.Print "          - Warning: Error reading session number for index " & j & ".": Err.Clear
                                End If
                                On Error GoTo ErrorHandler ' Restore
                            End If
NextFindLoopSess:
                            Set W_Sess = Nothing ' Release loop var
                        Next j

                        If Not NewSess Is Nothing Then
                            Debug.Print "        - Found session with highest number: #" & NewSess.Info.SessionNumber
                            Exit Do ' Found the new session, exit the wait loop
                        Else
                            Debug.Print "        - Session count increased, but couldn't identify highest session number object yet."
                        End If
                    Else
                        Debug.Print "        - Session count has not increased yet."
                    End If

                    If attempts >= 10 Then ' Timeout after ~5 seconds (10 * 500ms)
                        Err.Raise vbObjectError + 521, "StartExtract", "Timeout waiting for session count to increase after /o command."
                    End If
                    Sleep cSHORT_WAIT_MS ' Wait before next check
                 Loop

                 ' --- Final Check and Assignment ---
                 If NewSess Is Nothing Then
                     ' This should ideally not be reached if the loop timed out correctly
                     Err.Raise vbObjectError + 522, "StartExtract", "Could not identify new session object after /o."
                 End If

                 Set objSess = NewSess ' Set GLOBAL session to the new one
                 Debug.Print "      - SUCCESS: Identified new session #" & objSess.Info.SessionNumber & " created via /o."
                 On Error Resume Next
                 Set objSBar = objSess.FindById("wnd[0]/sbar")
                 On Error GoTo ErrorHandler
                 If objSBar Is Nothing Then Debug.Print "      - Warning: Could not get status bar for new session."
                 SessionObtained = True
                 Debug.Print "    - Proceeding with newly created session."
                 GoTo RunReportScript

            Else
                 Debug.Print "    - Session limit reached (" & Session_Nr_All_Before & "/" & cMAX_SESSIONS & "). Cannot create new session via /o."
                 MsgResult = MsgBox("Max sessions reached. No idle session found.", vbCritical + vbOKOnly)
                 GoTo Cleanup
            End If
        End If ' End /o logic

    Else
        ' --- PATH B: No Connection Found (or objGui was Nothing) - Attempt SSO Logon ---
        Debug.Print "  - PATH B: No existing connection found for target or objGui invalid. Attempting SSO login..."
        Debug.Print "    - Using Description: '" & cTARGET_SYSTEM_DESCRIPTION & "'"

        ' --- Start of Integrated EstablishSsoConnection Logic ---
        On Error GoTo SsoLoginErrorHandler ' Use specific handler

        Set objConn = Nothing: Set objSess = Nothing: Set objSBar = Nothing ' Reset globals for new login

        ' Step 1: Get/Ensure SAP GUI Scripting Engine
        If objGui Is Nothing Then
            Debug.Print "    - SSO Step 1: objGui is Nothing. Attempting GetObject/Start Logon..."
            On Error Resume Next
            Set SapGuiAuto = GetObject("SAPGUI")
            Dim getObjErrSso As Long: getObjErrSso = Err.Number: Err.Clear
            On Error GoTo SsoLoginErrorHandler
            If getObjErrSso <> 0 Or SapGuiAuto Is Nothing Then
                 Debug.Print "      - GetObject failed. Starting SAP Logon: '" & cSAP_LOGON_PATH & "'"
                 Dim shellResult As Variant: On Error Resume Next
                 shellResult = Shell(cSAP_LOGON_PATH, vbNormalFocus)
                 Dim shellErr As Long: shellErr = Err.Number: Dim shellDesc As String: shellDesc = Err.Description: Err.Clear
                 On Error GoTo SsoLoginErrorHandler
                 If shellErr <> 0 Then MsgBox "Shell Error (" & shellErr & "): " & shellDesc, vbCritical: GoTo Cleanup
                 Debug.Print "      - Shell executed. Waiting 5s...": Sleep 5000
                 attempts = 0
                 Do
                     attempts = attempts + 1: Debug.Print "      - GetObject attempt " & attempts & "..."
                     On Error Resume Next: Set SapGuiAuto = GetObject("SAPGUI"): If Err.Number = 0 And Not SapGuiAuto Is Nothing Then Exit Do: Err.Clear: Sleep 2000
                 Loop While attempts < 5
                 If SapGuiAuto Is Nothing Then MsgBox "GetObject still failed after starting Logon.", vbCritical: GoTo Cleanup
                 Debug.Print "      - GetObject successful after starting Logon."
            Else
                 Debug.Print "      - GetObject successful."
            End If
            Set objGui = SapGuiAuto.GetScriptingEngine
            If objGui Is Nothing Then MsgBox "Could not get Scripting Engine.", vbCritical: GoTo Cleanup
            Debug.Print "      - Scripting Engine obtained."
        Else
             Debug.Print "    - SSO Step 1: Using existing objGui."
        End If

        ' Step 2: Open Connection
        Debug.Print "    - SSO Step 2: Opening Connection '" & cTARGET_SYSTEM_DESCRIPTION & "'..."
        On Error Resume Next
        Set TargetConn = objGui.OpenConnection(cTARGET_SYSTEM_DESCRIPTION, True) ' True for async
        Dim openConnErr As Long: openConnErr = Err.Number: Dim openConnDesc As String: openConnDesc = Err.Description: Err.Clear
        On Error GoTo SsoLoginErrorHandler
        If openConnErr <> 0 Or TargetConn Is Nothing Then MsgBox "OpenConnection Error (" & openConnErr & "): " & openConnDesc, vbCritical: GoTo Cleanup
        Set objConn = TargetConn ' Set global
        Debug.Print "      - OpenConnection successful. Connection: '" & objConn.Description & "'"

        ' Step 3: Get Session
        Debug.Print "    - SSO Step 3: Waiting for session object..."
        startTime = Timer
        Do
            If objConn.Children.Count > 0 Then Exit Do
            Sleep cSHORT_WAIT_MS: DoEvents
            If Timer - startTime > 15 Then MsgBox "Timeout waiting for session object.", vbCritical: GoTo Cleanup ' Reduced timeout slightly
        Loop
        Set TargetSessSSO = objConn.Children(0)
        If TargetSessSSO Is Nothing Then MsgBox "Could not get session object.", vbCritical: GoTo Cleanup
        Set objSess = TargetSessSSO ' Set global
        Debug.Print "      - Session object obtained (ID: " & objSess.Info.SessionNumber & ")."

        ' Step 4: Wait for Session Ready
        Debug.Print "    - SSO Step 4: Waiting for session ready (Timeout: " & cLOGON_TIMEOUT_SECONDS & "s)..."
        startTime = Timer
        Do
            On Error Resume Next
            currentTransaction = objSess.Info.TRANSACTION
            Dim sessReadyErr As Long: sessReadyErr = Err.Number: Err.Clear
            On Error GoTo SsoLoginErrorHandler
            If sessReadyErr = 0 Then
                If currentTransaction <> "" And UCase(currentTransaction) <> "SAPMSYST" Then Debug.Print "      - Session active. TCode: '" & currentTransaction & "'": Exit Do
            Else
                Debug.Print "      - Waiting session ready (Info error: " & sessReadyErr & ")"
            End If
            Sleep cSHORT_WAIT_MS: DoEvents
            If Timer - startTime > cLOGON_TIMEOUT_SECONDS Then MsgBox "Timeout waiting for main menu.", vbCritical: GoTo Cleanup
        Loop

        ' Step 5: Get Status Bar
        Debug.Print "    - SSO Step 5: Getting status bar..."
        On Error Resume Next
        Set objSBar = objSess.FindById("wnd[0]/sbar")
        On Error GoTo ErrorHandler ' Restore MAIN handler
        If objSBar Is Nothing Then Debug.Print "      - Warning: Could not get status bar." Else Debug.Print "      - Status bar obtained."

        ' Step 6: SSO Success
        SessionObtained = True
        Debug.Print "    - SSO Step 6: SSO login process successful."

        ' Optional: Verify system match
        If Not objSess Is Nothing Then
           On Error Resume Next
           Dim loggedInSys As String: loggedInSys = objSess.Info.SystemName & objSess.Info.Client
           Dim sysCheckErr As Long: sysCheckErr = Err.Number: Err.Clear
           On Error GoTo ErrorHandler
           If sysCheckErr = 0 Then
               If loggedInSys <> cTARGET_SYSTEM_ID_CLIENT Then
                    MsgBox "Warning: SSO login successful but system mismatch ('" & loggedInSys & "' vs '" & cTARGET_SYSTEM_ID_CLIENT & "').", vbExclamation
               Else
                   Debug.Print "      - System match verified ('" & loggedInSys & "')."
               End If
           Else
               Debug.Print "      - Warning: Could not verify system match after SSO login (Error: " & sysCheckErr & ")."
           End If
        End If

        ' --- End of Integrated SSO Logic ---
        If SessionObtained Then GoTo RunReportScript Else GoTo Cleanup ' Should always be true here unless error occurred

    End If ' End Path A vs Path B


    ' --- Fallback Check ---
    If Not SessionObtained Then
        Debug.Print "ERROR: Fallback reached - session not obtained."
        MsgBox "Could not get a usable SAP session after all attempts.", vbCritical
        GoTo Cleanup
    End If


RunReportScript:
    ' Proceed only if a session was successfully obtained
    If SessionObtained And Not objSess Is Nothing Then
        Debug.Print "-----------------------------------------------------"
        Debug.Print "STEP 5: Session ready. Calling RunGUIScript..."
        Debug.Print "  - Session ID: " & objSess.Info.SessionNumber
        Debug.Print "  - System/Client: " & objSess.Info.SystemName & "/" & objSess.Info.Client
        Debug.Print "  - User: " & objSess.Info.User
        Debug.Print "-----------------------------------------------------"
        RunGUIScript ' Call the Private sub for report steps
    Else
        Debug.Print "INTERNAL ERROR: Reached RunReportScript label but SessionObtained=" & SessionObtained & " or objSess is Nothing."
        MsgBox "Internal Error: Could not proceed to run GUI script.", vbCritical
    End If

Cleanup:
    Debug.Print "-----------------------------------------------------"
    Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Running Cleanup for StartExtract..."

    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True

    Set TargetConn = Nothing: Debug.Print "  - Released TargetConn"
    Set W_conn = Nothing: Debug.Print "  - Released W_conn"
    Set W_Sess = Nothing: Debug.Print "  - Released W_Sess"
    Set FirstFoundSess = Nothing: Debug.Print "  - Released FirstFoundSess"
    Set NewSess = Nothing: Debug.Print "  - Released NewSess"
    Set SapGuiAuto = Nothing: Debug.Print "  - Released SapGuiAuto"
    Set TargetSessSSO = Nothing: Debug.Print "  - Released TargetSessSSO"
    Set popupWnd = Nothing: Debug.Print "  - Released popupWnd"

    ' Explicitly release GLOBAL SAP objects
     Debug.Print "  - Releasing global SAP objects..."
     On Error Resume Next
     Set objSBar = Nothing: Debug.Print "    - Released objSBar"
     Set objSess = Nothing: Debug.Print "    - Released objSess"
     Set objConn = Nothing: Debug.Print "    - Released objConn"
     Set objGui = Nothing: Debug.Print "    - Released objGui"
     On Error GoTo 0
     Debug.Print "  - Global SAP objects released."

    Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - StartExtract finished."
    Debug.Print "=====================================================" & vbCrLf
    Exit Sub

' --- Error Handlers ---
ErrorHandler:
    Dim errNum As Long: errNum = Err.Number
    Dim errDesc As String: errDesc = Err.Description
    Dim errSource As String: errSource = Err.Source
    Debug.Print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - ERROR ENCOUNTERED in StartExtract (General Handler)!"
    Debug.Print "    Error #: " & errNum: Debug.Print "    Source:  " & errSource: Debug.Print "    Desc:    " & errDesc
    Debug.Print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    MsgBox "Error during SAP session setup/creation:" & vbCrLf & vbCrLf & _
           "Err #: " & errNum & vbCrLf & "Desc: " & errDesc, vbCritical
    Resume Cleanup

SsoLoginErrorHandler:
    Dim ssoErrNum As Long: ssoErrNum = Err.Number
    Dim ssoErrDesc As String: ssoErrDesc = Err.Description
    Dim ssoErrSource As String: ssoErrSource = Err.Source
    Debug.Print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - ERROR ENCOUNTERED during SSO Login Attempt!"
    Debug.Print "    Error #: " & ssoErrNum: Debug.Print "    Source:  " & ssoErrSource: Debug.Print "    Desc:    " & ssoErrDesc
    Debug.Print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
     MsgBox "Error during SAP SSO Logon attempt:" & vbCrLf & vbCrLf & _
           "Err #: " & ssoErrNum & vbCrLf & "Desc: " & ssoErrDesc, vbCritical
     SessionObtained = False ' Ensure flag is false
     Resume Cleanup ' Go to main cleanup

End Sub


' //========================================================================
' // Sub: RunGUIScript (MB51 Extraction Logic)
' // Purpose: Executes MB51 steps. Called only by StartExtract. Declared Private.
' //========================================================================

Private Sub RunGUIScript()

    ' --- Constants specific to MB51 Execution ---
    Const cTRANSACTION As String = "mb51"
    Const cPLANT_COLUMN As String = "D" ' Column for Plant in Excel
    Const cDATE_LOW_COLUMN As String = "B" ' Column for Start Date in Excel
    Const cDATE_HIGH_COLUMN As String = "C" ' Column for End Date in Excel
    Const cLAYOUT_COLUMN As String = "E" ' Column for Layout in Excel
    Const cFILENAME_COLUMN As String = "F" ' Column to write filename in Excel
    Const cSTART_ROW As Long = 2 ' Starting row for data in Excel (assumes header in row 1)
    Const cDOWNLOAD_PATH As String = "Z:\Demand\Demand Review\SAP H2H Report" ' <<< VERIFY THIS PATH EXISTS
    Const cFILENAME_PREFIX As String = "MB51" ' Changed filename prefix
    Const cFILENAME_EXTENSION As String = ".XLSX"
    Const cREPORT_EXEC_TIMEOUT_SECONDS As Long = 900
    Const cSAP_WAIT_TIME = 500 ' Short wait after SAP GUI actions
    ' *** ADDED: Define the Grid Control ID ***
    ' Use SAP GUI Scripting Tracker to find the correct ID if this doesn't work
    Const cGRID_ID As String = "wnd[0]/usr/cntlGRID1/shellcont/shell" ' Common ID for ALV Grid

    ' --- Local Variables ---
    Dim formattedDateLow As String, formattedDateHigh As String, formattedTimestamp As String
    Dim dynamicFilename As String
    Dim startTime As Single
    Dim success As Boolean
    Dim gridObject As GuiShell
    Dim currentStatus As String
    Dim i As Long, lastRow As Long
    Dim plant As String, dateLow As String, dateHigh As String, layout As String
    Dim ws As Worksheet
    Dim popupWindow As GuiModalWindow, popupID As Variant, handledPopup As Boolean
    Dim mb51FieldCheck As Object ' For post-navigation check
    Dim objExcelApp As Object
    Dim lMsgFilter As LongPtr, lPreviousFilter As LongPtr, hResult As Long ' For OLE Filter

    On Error GoTo RestoreFilterAndErrorHandler

    ' --- Initialize OLE Filter variables ---
    lMsgFilter = 0&
    lPreviousFilter = 0&

    ' --- Pre-checks ---
    Debug.Print "Entering RunGUIScript..."
    If objSess Is Nothing Then Err.Raise vbObjectError + 510, "RunGUIScript", "objSess is not valid."
    If objSBar Is Nothing Then
        On Error Resume Next: Set objSBar = objSess.FindById("wnd[0]/sbar"): On Error GoTo RestoreFilterAndErrorHandler
        If objSBar Is Nothing Then Debug.Print "  - Warning: objSBar could not be obtained."
    End If
    Debug.Print "  - Session and Status Bar objects checked (Status Bar " & IIf(objSBar Is Nothing, "Not ", "") & "obtained)."

    ' --- Get the Excel worksheet ---
    On Error Resume Next ' Handle case where Excel isn't open or sheet doesn't exist
    Set objExcelApp = GetObject(, "Excel.Application")
    If Err.Number <> 0 Then
        MsgBox "Error: Could not connect to running Excel application.", vbCritical
        GoTo RestoreFilterAndExit
    End If
    Set ws = objExcelApp.Worksheets("Sheet1") ' *** CHANGE "Sheet1" if your sheet is named differently ***
    If ws Is Nothing Then
        MsgBox "Error: Could not find worksheet named 'Sheet1' in the active Excel workbook.", vbCritical
        Set objExcelApp = Nothing
        GoTo RestoreFilterAndExit
    End If
    On Error GoTo RestoreFilterAndErrorHandler ' Restore main error handler
    Debug.Print "  - Connected to Excel Worksheet: '" & ws.Name & "'"

    ' --- Get the last row with data ---
    lastRow = ws.Cells(ws.Rows.Count, cPLANT_COLUMN).End(xlUp).row
    If lastRow < cSTART_ROW Then
        MsgBox "No data found in Excel sheet '" & ws.Name & "' starting from row " & cSTART_ROW & ", column " & cPLANT_COLUMN & ".", vbInformation
        GoTo RestoreFilterAndExit
    End If
    Debug.Print "  - Last row with data: " & lastRow

    ' --- Loop through each row in Excel ---
    For i = cSTART_ROW To lastRow
        Debug.Print "-----------------------------------------------------"
        Debug.Print "Processing row: " & i

        ' --- Step 1: Read data from Excel row ---
        plant = Trim$(CStr(ws.Range(cPLANT_COLUMN & i).value))
        dateLow = Trim$(CStr(ws.Range(cDATE_LOW_COLUMN & i).value)) ' Expecting DD.MM.YYYY format
        dateHigh = Trim$(CStr(ws.Range(cDATE_HIGH_COLUMN & i).value)) ' Expecting DD.MM.YYYY format
        layout = Trim$(CStr(ws.Range(cLAYOUT_COLUMN & i).value))

        ' Basic Validation
        If plant = "" Or dateLow = "" Or dateHigh = "" Then
            Debug.Print "  - WARNING: Skipping row " & i & " due to missing Plant or Date data."
            ws.Range(cFILENAME_COLUMN & i).value = "Skipped - Missing Data" ' Indicate skipped row
            GoTo NextRowLoop
        End If
        Debug.Print "  - Data from Excel: Plant='" & plant & "', DateLow='" & dateLow & "', DateHigh='" & dateHigh & "', Layout='" & layout & "'"

        ' --- Step 2: Prepare Filename ---
        Debug.Print "  - STEP 2: Preparing dynamic filename..."
        On Error Resume Next ' Handle potential date formatting errors
        ' Assuming input is DD.MM.YYYY - convert to YYYYMMDD for filename
        Dim dateLowParts() As String, dateHighParts() As String
        dateLowParts = Split(dateLow, ".")
        dateHighParts = Split(dateHigh, ".")
        If UBound(dateLowParts) = 2 And UBound(dateHighParts) = 2 Then
             formattedDateLow = dateLowParts(2) & dateLowParts(1) & dateLowParts(0)
             formattedDateHigh = dateHighParts(2) & dateHighParts(1) & dateHighParts(0)
        Else
             ' Fallback if date format is wrong
             Debug.Print "    - Warning: Date format in Excel row " & i & " ('" & dateLow & "', '" & dateHigh & "') is not DD.MM.YYYY. Using raw values."
             formattedDateLow = Replace(dateLow, ".", "") ' Simple replace as fallback
             formattedDateHigh = Replace(dateHigh, ".", "")
        End If
        If Err.Number <> 0 Then
            MsgBox "Date parse warning for row " & i & ". Using default date format.", vbExclamation
            Err.Clear: formattedDateLow = "DateFrom": formattedDateHigh = "DateTo"
        End If
        On Error GoTo RestoreFilterAndErrorHandler
        formattedTimestamp = Format$(Now, "yyyymmdd_hhmmss")
        dynamicFilename = cFILENAME_PREFIX & "_" & plant & "_" & formattedDateLow & "-" & formattedDateHigh & "_" & formattedTimestamp & cFILENAME_EXTENSION ' Modified Filename
        Debug.Print "  - Filename: '" & dynamicFilename & "'"

        ' --- Step 3: Navigate to Transaction ---
        Debug.Print "  - STEP 3: Navigating to transaction '" & cTRANSACTION & "'..."
        If objSess.ActiveWindow.Name <> "wnd[0]" Then
            Debug.Print "  - Closing window: " & objSess.ActiveWindow.Name
            objSess.ActiveWindow.Close: Sleep cSAP_WAIT_TIME
        End If

        ' Check if already in MB51 or need to navigate
        Dim needsNavigation As Boolean: needsNavigation = True
        On Error Resume Next
        Set mb51FieldCheck = objSess.FindById("wnd[0]/usr/ctxtWERKS-LOW") ' Check for Plant field
        If Err.Number = 0 And Not mb51FieldCheck Is Nothing Then
            If objSess.Info.TRANSACTION = UCase(cTRANSACTION) Then
                Debug.Print "  - Already in transaction " & cTRANSACTION & "."
                needsNavigation = False
            End If
        End If
        Err.Clear
        On Error GoTo RestoreFilterAndErrorHandler

        If needsNavigation Then
            Debug.Print "  - Executing /n" & cTRANSACTION & "..."
            objSess.FindById("wnd[0]/tbar[0]/okcd").Text = "/n" & cTRANSACTION
            objSess.FindById("wnd[0]").sendVKey 0: Sleep cSAP_WAIT_TIME * 2 ' Longer wait after TCode change

            Debug.Print "  - Navigation presumably complete. Checking presence of known MB51 field..."
            ' ** NEW: Post-Navigation Check **
            On Error Resume Next
            Set mb51FieldCheck = objSess.FindById("wnd[0]/usr/ctxtWERKS-LOW") ' Check for Plant field again
            If Err.Number <> 0 Or mb51FieldCheck Is Nothing Then
                Err.Clear
                On Error GoTo RestoreFilterAndErrorHandler ' Restore main handler before raising error
                Err.Raise vbObjectError + 511, "RunGUIScript", "Failed to navigate to " & cTRANSACTION & ". Expected field 'ctxtWERKS-LOW' not found after /n command."
            Else
                Debug.Print "  - SUCCESS: Found known field 'ctxtWERKS-LOW'. Navigation confirmed."
            End If
            Set mb51FieldCheck = Nothing ' Release check object
            On Error GoTo RestoreFilterAndErrorHandler ' Ensure main handler is active
        End If


        ' --- Step 4 & 5: Clear Fields, Set Criteria and Execute ---
        Debug.Print "  - STEP 4/5: Clearing fields, setting report criteria and executing..."
        ' Clear fields (using On Error Resume Next for robustness)
        On Error Resume Next
        objSess.FindById("wnd[0]/usr/ctxtMATNR-LOW").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtMATNR-HIGH").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtWERKS-LOW").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtLGORT-LOW").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtCHARG-LOW").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtLIFNR-LOW").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtKUNNR-LOW").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtBWART-LOW").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtSOBKZ").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtEBELN").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtGRUND").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtVBELN").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtPOSNR").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtPRCTR").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtSGTXT").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtBUDAT-LOW").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtBUDAT-HIGH").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtUSNAM-LOW").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtVGART-LOW").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtBLDAT").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtAWKEY").Text = ""
        objSess.FindById("wnd[0]/usr/ctxtALV_DEF").Text = ""
        Err.Clear ' Clear any errors from clearing non-existent fields
        On Error GoTo RestoreFilterAndErrorHandler ' Restore main handler

        ' Set values
        objSess.FindById("wnd[0]/usr/ctxtWERKS-LOW").Text = plant: Debug.Print "   - Set Plant: '" & plant & "'"
        objSess.FindById("wnd[0]/usr/ctxtBUDAT-LOW").Text = dateLow: Debug.Print "   - Set Date Low: '" & dateLow & "'"
        objSess.FindById("wnd[0]/usr/ctxtBUDAT-HIGH").Text = dateHigh: Debug.Print "   - Set Date High: '" & dateHigh & "'"
        objSess.FindById("wnd[0]/usr/radRFLAT_L").Select: Debug.Print "   - Selected 'Flat List' radio button."
        If Trim$(layout) <> "" Then
            objSess.FindById("wnd[0]/usr/ctxtALV_DEF").Text = layout: Debug.Print "   - Set Layout: '" & layout & "'"
        Else
            ' Ensure layout field is truly empty if no layout provided
            objSess.FindById("wnd[0]/usr/ctxtALV_DEF").Text = "": Debug.Print "   - Cleared Layout field."
        End If

        ' --- Start OLE Message Filter ---
        Debug.Print "  - STEP 5a: Registering OLE Message Filter..."
        If lPreviousFilter = 0 Then ' Only register if not already registered (e.g., from previous error)
            hResult = CoRegisterMessageFilter(lMsgFilter, lPreviousFilter)
            If hResult <> 0 Then
                Debug.Print "   - Warning: CoRegisterMessageFilter failed (HRESULT: " & Hex$(hResult) & "). Continuing without filter."
                lPreviousFilter = 0 ' Ensure it's marked as not registered
            Else
                Debug.Print "   - OLE Filter registered."
            End If
        Else
             Debug.Print "   - OLE Filter already registered."
        End If

        ' Execute report
        objSess.FindById("wnd[0]/tbar[1]/btn[8]").press ' Execute (F8)
        Debug.Print "  - Criteria set and executed."

        ' --- Step 6/7: Wait for Report Execution & Grid Appearance (Combined Wait) ---
        Debug.Print "  - STEP 6/7: Waiting for report execution AND grid (ID: " & cGRID_ID & ", Timeout: " & cREPORT_EXEC_TIMEOUT_SECONDS & "s)..."
        startTime = Timer
        Set gridObject = Nothing ' Ensure grid object starts as Nothing
        Do
            ' Check if grid object exists first
            On Error Resume Next
            Set gridObject = objSess.FindById(cGRID_ID)
            Dim gridCheckErr As Long: gridCheckErr = Err.Number
            Err.Clear
            On Error GoTo RestoreFilterAndErrorHandler

            If gridCheckErr = 0 And Not gridObject Is Nothing Then
                ' Grid found! Check if SAP is still busy (less likely now, but possible)
                If objSess.Busy Then
                    Debug.Print "   - Wait Loop: Grid found, but SAP still busy. Waiting briefly..."
                    Sleep 500 ' Short extra wait if grid appeared but busy still true
                End If
                Debug.Print "   - Wait Loop: Grid object found and SAP not busy. Exiting wait."
                Exit Do ' Exit the main wait loop
            End If

            ' If grid not found, check Busy status and handle popups
            If objSess.Busy Then
                If Not objSBar Is Nothing Then currentStatus = Trim$(objSBar.Text) Else currentStatus = "[No Status Bar]"
                If Len(currentStatus) > 0 Then Debug.Print "   - Wait Loop: Busy=True, Status='" & currentStatus & "'" Else Debug.Print "   - Wait Loop: Busy=True"
                ' Integrated Popup Handling while Busy (Simple Enter/OK press)
                handledPopup = False: On Error Resume Next
                For Each popupID In Array("wnd[1]", "wnd[2]") ' Check common popup windows
                    Set popupWindow = objSess.FindById(popupID, False)
                    If Err.Number = 0 And Not popupWindow Is Nothing Then
                        handledPopup = True: Debug.Print "   - Wait Loop: Popup detected while busy: " & popupID & " ('" & popupWindow.Text & "'). Sending Enter..."
                        popupWindow.sendVKey 0 ' Try Enter first
                        If Err.Number <> 0 Then Debug.Print "    - VKey 0 failed. Error: " & Err.Description: Err.Clear: popupWindow.FindById("tbar[0]/btn[0]").press ' Try OK button
                        Sleep 500: Exit For ' Handle one popup per loop iteration
                    End If: If Err.Number <> 0 Then Err.Clear
                Next popupID: On Error GoTo RestoreFilterAndErrorHandler
                ' End Popup Handling
            Else
                ' Busy is False, but grid wasn't found yet in this iteration. Loop again.
                Debug.Print "   - Wait Loop: Busy=False, but Grid not found yet. Continuing wait..."
            End If

            DoEvents: Sleep 250 ' Pause
            ' Check overall timeout
            If Timer - startTime > cREPORT_EXEC_TIMEOUT_SECONDS Then
                Err.Raise vbObjectError + 513, "RunGUIScript", "Timeout (" & cREPORT_EXEC_TIMEOUT_SECONDS & "s) waiting for report execution / grid appearance (ID: " & cGRID_ID & ")."
            End If
        Loop
        Debug.Print "   - Combined wait loop exited."

        ' --- Verify Grid Object after Loop ---
        If gridObject Is Nothing Then
            ' This means the loop timed out or exited unexpectedly without finding the grid
            Err.Raise vbObjectError + 515, "RunGUIScript", "Failed to find grid control (" & cGRID_ID & ") after wait loop."
        End If
        Debug.Print "  - Grid object confirmed."

        ' --- Step 8: Export Results ---
        Debug.Print "  - STEP 8: Exporting results..."
        success = False
        On Error Resume Next ' Use Resume Next for export sequence
        Debug.Print "   - Export Step 1: ContextMenu": gridObject.ContextMenu: If Err.Number <> 0 Then Debug.Print "    - Error ContextMenu: " & Err.Description: Err.Clear: GoTo ExportSequenceErrorCheck
        Debug.Print "   - Export Step 2: SelectContextMenuItem '&XXL'": gridObject.SelectContextMenuItem "&XXL": If Err.Number <> 0 Then Debug.Print "    - Error SelectContextMenuItem: " & Err.Description: Err.Clear: GoTo ExportSequenceErrorCheck
        Sleep 250 ' Wait for spreadsheet popup
        Debug.Print "   - Export Step 3: Press Continue (wnd[1]/tbar[0]/btn[0])": objSess.FindById("wnd[1]/tbar[0]/btn[0]").press: If Err.Number <> 0 Then Debug.Print "    - Error Press Continue: " & Err.Description: Err.Clear: GoTo ExportSequenceErrorCheck
        Sleep 500 ' Wait for file dialog popup
        Debug.Print "   - Export Step 4: Set Path '" & cDOWNLOAD_PATH & "'": objSess.FindById("wnd[1]/usr/ctxtDY_PATH").Text = cDOWNLOAD_PATH: If Err.Number <> 0 Then Debug.Print "    - Error Set Path: " & Err.Description: Err.Clear: GoTo ExportSequenceErrorCheck
        Debug.Print "   - Export Step 5: Set Filename '" & dynamicFilename & "'": objSess.FindById("wnd[1]/usr/ctxtDY_FILENAME").Text = dynamicFilename: If Err.Number <> 0 Then Debug.Print "    - Error Set Filename: " & Err.Description: Err.Clear: GoTo ExportSequenceErrorCheck
        Debug.Print "   - Export Step 6: Press Save/Generate (wnd[1]/tbar[0]/btn[11])": objSess.FindById("wnd[1]/tbar[0]/btn[11]").press: If Err.Number <> 0 Then Debug.Print "    - Error Press Save/Generate: " & Err.Description: Err.Clear: GoTo ExportSequenceErrorCheck
        success = (Err.Number = 0) ' Check success only after last step attempt
        If success Then Debug.Print "   - SUCCESS: Export commands sent." Else Debug.Print "   - FAILURE: Export sequence interrupted by error."
        Sleep 1500 ' Wait longer for file write to potentially complete

ExportSequenceErrorCheck:
        On Error GoTo RestoreFilterAndErrorHandler ' Restore main handler
        If Not success Then Err.Raise vbObjectError + 517, "RunGUIScript", "Export sequence failed. Check Debug Window for specific step error."

        ' --- Post-Export File Check ---
        Dim fullFilePath As String
        fullFilePath = cDOWNLOAD_PATH & IIf(Right$(cDOWNLOAD_PATH, 1) = "\", "", "\") & dynamicFilename
        Debug.Print "  - Export Step 7: Verifying file existence ('" & fullFilePath & "')..."
        If Dir(fullFilePath) = "" Then
            ' File not found after export attempt
            Err.Raise vbObjectError + 518, "RunGUIScript", "Export verification failed: File '" & dynamicFilename & "' not found in path '" & cDOWNLOAD_PATH & "' after export. Check path and SAP permissions."
        Else
            Debug.Print "  - SUCCESS: Exported file found."
            ' --- Step 9: Write filename to Excel ---
            ws.Range(cFILENAME_COLUMN & i).value = dynamicFilename
            Debug.Print "  - Filename '" & dynamicFilename & "' written to Excel, column " & cFILENAME_COLUMN & ", row " & i
        End If

        ' --- Step 10: Navigate back for next iteration (if needed) ---
        If i < lastRow Then
            Debug.Print "  - Navigating back to prepare for next row..."
            ' Use /nMB51 directly - usually safer than Back/Exit from grid display
            Debug.Print "   - Executing /n" & cTRANSACTION & " to return to selection screen..."
            objSess.FindById("wnd[0]/tbar[0]/okcd").Text = "/n" & cTRANSACTION
            objSess.FindById("wnd[0]").sendVKey 0: Sleep cSAP_WAIT_TIME * 2 ' Longer wait after TCode change

             ' Verify return to MB51 selection screen
            On Error Resume Next
            Set mb51FieldCheck = objSess.FindById("wnd[0]/usr/ctxtWERKS-LOW")
            If Err.Number <> 0 Or mb51FieldCheck Is Nothing Then
                Err.Clear
                On Error GoTo RestoreFilterAndErrorHandler
                Err.Raise vbObjectError + 519, "RunGUIScript", "Failed to return to " & cTRANSACTION & " selection screen for next iteration."
            Else
                Debug.Print "   - Successfully returned to " & cTRANSACTION & " selection screen."
            End If
            Set mb51FieldCheck = Nothing
            On Error GoTo RestoreFilterAndErrorHandler
        End If

NextRowLoop: ' Label to jump to for skipping a row
    Loop ' Loop to the next row

    Debug.Print "STEP 11: Finished processing all rows."
    GoTo RestoreFilterAndExit

RestoreFilterAndErrorHandler:
    Dim errNumRun As Long: errNumRun = Err.Number: Dim errDescRun As String: errDescRun = Err.Description: Dim errSourceRun As String: errSourceRun = Err.Source
    Debug.Print "!!!!!!!!!!!!!!!!!!! ERROR in RunGUIScript !!!!!!!!!!!!!!!!!!!"
    Debug.Print "  Err #: " & errNumRun: Debug.Print "  Source: " & errSourceRun: Debug.Print "  Desc: " & errDescRun
    Debug.Print "  Processing Row: " & i ' Add row number context
    Debug.Print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    If lPreviousFilter <> 0 Then
        On Error Resume Next ' Don't let filter restoration cause another error
        hResult = CoRegisterMessageFilter(lPreviousFilter, lMsgFilter)
        If hResult <> 0 Then
            Debug.Print "Warning: Failed RESTORE OLE Filter (Error)."
        Else
            Debug.Print "OLE Filter restored (Error)."
        End If
        lPreviousFilter = 0: On Error GoTo 0 ' Reset filter flag and restore default error handling
    End If
    MsgBox "Error during MB51 script processing row " & i & ":" & vbCrLf & "Err #: " & errNumRun & vbCrLf & "Desc: " & errDescRun, vbCritical
    On Error Resume Next ' Attempt cleanup, ignore further errors here
    If Not objSess Is Nothing Then
        Debug.Print "Attempting SAP cleanup after error..."
        If objSess.Busy Then Sleep 500
        ' Try to close popups first
        Set popupWindow = objSess.FindById("wnd[2]", False): If Not popupWindow Is Nothing Then popupWindow.Close: Sleep 250
        Set popupWindow = objSess.FindById("wnd[1]", False): If Not popupWindow Is Nothing Then popupWindow.Close: Sleep 250
        ' Try to get back to main screen or exit
        If objSess.ActiveWindow.Name = "wnd[0]" Then objSess.FindById("wnd[0]/tbar[0]/btn[15]").press: Sleep 250 ' Exit
        Debug.Print "SAP cleanup attempt finished."
    End If
    GoTo FinalCleanup ' Jump to the final cleanup section

RestoreFilterAndExit:
    Debug.Print "STEP 12: Normal Exit Cleanup..."
    If lPreviousFilter <> 0 Then
        On Error Resume Next ' Don't let filter restoration cause an error on normal exit
        hResult = CoRegisterMessageFilter(lPreviousFilter, lMsgFilter)
        If hResult <> 0 Then
            Debug.Print "Warning: Failed RESTORE OLE Filter (Normal)."
        Else
            Debug.Print "OLE Filter restored (Normal)."
        End If
        lPreviousFilter = 0: On Error GoTo 0 ' Reset filter flag and restore default error handling
    End If
    On Error Resume Next ' Ignore errors during final navigation back
    Debug.Print "  - Navigating back in SAP (if possible)..."
    If Not objSess Is Nothing Then
        If objSess.ActiveWindow.Name = "wnd[0]" Then
             ' If still in MB51, press Back, otherwise Exit
            If objSess.Info.TRANSACTION = UCase(cTRANSACTION) Then
                 Debug.Print "   - In " & cTRANSACTION & ". Pressing Back (btn[3])..."
                 objSess.FindById("wnd[0]/tbar[0]/btn[3]").press
            Else
                 Debug.Print "   - Not in " & cTRANSACTION & ". Pressing Exit (btn[15])..."
                 objSess.FindById("wnd[0]/tbar[0]/btn[15]").press
            End If
        ElseIf objSess.ActiveWindow.Name <> "wnd[0]" Then
            Debug.Print "   - Active window is not wnd[0] (" & objSess.ActiveWindow.Name & "). Attempting ActiveWindow.Close..."
            objSess.ActiveWindow.Close
        End If
    End If
    Debug.Print "  - SAP navigation cleanup finished."
    On Error GoTo 0 ' Restore default error handling
    Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - RunGUIScript finished normally."

FinalCleanup:
    ' Release Excel objects if they were set
    If Not ws Is Nothing Then Set ws = Nothing: Debug.Print "  - Released ws"
    If Not objExcelApp Is Nothing Then Set objExcelApp = Nothing: Debug.Print "  - Released objExcelApp"

    ' Screen updating/calculation handled in StartExtract's cleanup
    On Error GoTo 0 ' Ensure error handling is off before exiting
    Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Exiting RunGUIScript."
End Sub
