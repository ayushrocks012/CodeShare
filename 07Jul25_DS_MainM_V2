'@Folder("Forecasting")
Option Explicit

'================================================================================================
' FORECASTING ENGINE MODULE (M_Forecasting)
' V20.0: Historical Data and Advanced Formatting
'      - Reinstated historical sales months into the final report.
'      - Implemented a new, efficient cache for monthly historical data lookups.
'      - Overhauled FormatTierSheet to apply distinct formatting for historical vs. forecast columns.
'
' Author:      Ayush Goyal
' Date:        07-Jul-2025
'================================================================================================

'--- Private Module-Level Variables ---
Private wbHost As Workbook
Private wsLog As Worksheet
Private dictStatusMap As Object
Private arrStatusData As Variant
Private arrHistoryData As Variant
Private arrDemandData As Variant
Private dictLifecycleMap As Object
Private dictAffiliates As Object
Private dictKeyFigures As Object
Private dictHistoryCache As Object ' NEW: For fast monthly historical lookups

'================================================================================================
' 1. MAIN PUBLIC ORCHESTRATOR
'================================================================================================

Public Sub UpdateForecast_V8()
    Dim tStart As Double: tStart = Timer

    If Not InitializeRun() Then GoTo Main_Exit
    If Not LoadAndValidateData() Then GoTo Main_Exit
    
    BuildCachesAndMaps
    ProcessAllAffiliates

Main_Exit:
    FinalizeRun tStart
End Sub


'================================================================================================
' 2. CORE WORKFLOW STAGES
'================================================================================================

Private Function InitializeRun() As Boolean
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.Calculation = xlCalculationManual
    
    Set wbHost = ThisWorkbook
    InitializeStatusMap
    
    On Error Resume Next
    wbHost.Sheets(SHEET_LOG).Delete
    On Error GoTo 0
    
    Set wsLog = wbHost.Sheets.Add(After:=wbHost.Sheets(wbHost.Sheets.Count))
    InitializeLogSheet wsLog
    
    InitializeRun = True
End Function

Private Function LoadAndValidateData() As Boolean
    On Error GoTo Load_ErrorHandler
    
    arrStatusData = LoadDataToArray(wbHost.Sheets(SHEET_STATUS))
    arrHistoryData = LoadDataToArray(wbHost.Sheets(SHEET_HISTORY))
    arrDemandData = LoadDataToArray(wbHost.Sheets(SHEET_DEMAND))
    
    If Not IsArray(arrStatusData) Then Err.Raise 515, , "Sheet '" & SHEET_STATUS & "' is missing or empty."
    If Not IsArray(arrHistoryData) Then Err.Raise 516, , "Sheet '" & SHEET_HISTORY & "' is missing or empty."
    If Not IsArray(arrDemandData) Then Err.Raise 517, , "Sheet '" & SHEET_DEMAND & "' is missing or empty."
    
    LoadAndValidateData = True
    Exit Function

Load_ErrorHandler:
    MsgBox "Failed to load source sheets. " & vbCrLf & Err.Description, vbCritical, "Process Halted"
    LoadAndValidateData = False
End Function

Private Sub BuildCachesAndMaps()
    Set dictLifecycleMap = BuildLifecycleMap(arrStatusData)
    Set dictAffiliates = GetUniqueValues(arrDemandData, DF_AFFILIATE_COL)
    Set dictKeyFigures = GetUniqueValues(arrDemandData, DF_KEY_FIGURE_COL)
    BuildHistoryCache ' Build the new cache
End Sub

Private Sub BuildHistoryCache()
    Set dictHistoryCache = CreateObject("Scripting.Dictionary")
    Dim r As Long, c As Long
    Dim strKey As String
    Dim dictMonthlyValues As Object
    
    For r = 2 To UBound(arrHistoryData, 1)
        ' Key: Affiliate|KeyFigure|LocalItemNbr
        strKey = arrHistoryData(r, HS_AFFILIATE_COL) & "|" & arrHistoryData(r, HS_KEY_FIGURE_COL) & "|" & arrHistoryData(r, 5) 'HS_LOCAL_ITEM_NBR_COL
        
        If Not dictHistoryCache.Exists(strKey) Then
            Set dictMonthlyValues = CreateObject("Scripting.Dictionary")
            For c = HS_START_OF_MONTHS_COL To UBound(arrHistoryData, 2)
                dictMonthlyValues.Add CDate(arrHistoryData(1, c)), arrHistoryData(r, c)
            Next c
            dictHistoryCache.Add strKey, dictMonthlyValues
        End If
    Next r
End Sub


Private Sub ProcessAllAffiliates()
    Dim varAffiliate As Variant
    For Each varAffiliate In dictAffiliates.Keys
        ProcessForecastForAffiliate CStr(varAffiliate)
    Next varAffiliate
End Sub

Private Sub FinalizeRun(ByVal tStart As Double)
    CleanupMemory
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    Application.Calculation = xlCalculationAutomatic
    MsgBox "Forecast process completed in " & Format$(Timer - tStart, "#,##0.00") & " seconds.", vbInformation
End Sub

'================================================================================================
' 3. CORE LOGIC & CALCULATION
'================================================================================================

Private Sub ProcessForecastForAffiliate(ByVal strAffiliate As String)
    CalculateAllForecastsForAffiliate strAffiliate
    GenerateAffiliateReport strAffiliate
End Sub

Private Sub CalculateAllForecastsForAffiliate(ByVal strAffiliate As String)
    Dim objLifecycle As cProductLifecycle
    Dim varProductKey As Variant, varKeyFigure As Variant
    Dim i As Long
    
    For Each varProductKey In dictLifecycleMap.Keys
        Set objLifecycle = dictLifecycleMap.Item(varProductKey)
        If objLifecycle.Affiliate = strAffiliate Then
            Set objLifecycle.ForecastValues = CreateObject("Scripting.Dictionary")
        End If
    Next varProductKey
    
    For Each varProductKey In dictLifecycleMap.Keys
        Set objLifecycle = dictLifecycleMap.Item(varProductKey)
        If objLifecycle.Affiliate = strAffiliate Then
            For Each varKeyFigure In dictKeyFigures.Keys
                Dim strKeyFigure As String: strKeyFigure = CStr(varKeyFigure)
                Dim dblHistSubTierSum As Double, dblHistTierSum As Double
                
                dblHistSubTierSum = GetHistoricalSum(strAffiliate, objLifecycle.ForecastTier, objLifecycle.ForecastSubTier, strKeyFigure)
                dblHistTierSum = GetHistoricalSum(strAffiliate, objLifecycle.ForecastTier, "", strKeyFigure)
                
                For i = 1 To UBound(arrDemandData, 2) - DF_START_OF_MONTHS_COL + 1
                    Dim dteForecastMonth As Date: dteForecastMonth = arrDemandData(1, DF_START_OF_MONTHS_COL + i - 1)
                    Dim dblDemandTierValue As Double: dblDemandTierValue = GetDemandValue(strAffiliate, objLifecycle.ForecastTier, strKeyFigure, dteForecastMonth)
                    Dim dblBaseForecast As Double
                    
                    If dblHistTierSum > 0 Then
                        dblBaseForecast = (dblHistSubTierSum / dblHistTierSum) * dblDemandTierValue
                    End If
                    
                    objLifecycle.ForecastValues.Add strKeyFigure & "|" & dteForecastMonth, dblBaseForecast
                Next i
            Next varKeyFigure
        End If
    Next varProductKey
    
    For Each varProductKey In dictLifecycleMap.Keys
        Set objLifecycle = dictLifecycleMap.Item(varProductKey)
        If objLifecycle.Affiliate = strAffiliate Then
            objLifecycle.LinkAndTransferSuccessorForecast dictLifecycleMap
        End If
    Next varProductKey
End Sub

Private Sub GenerateAffiliateReport(ByVal strAffiliate As String)
    Dim wbReport As Workbook, ws As Worksheet
    Dim varKeyFigure As Variant, varTier As Variant
    Dim dictTiers As Object, dictSheetToKeyFigureMap As Object
    Set dictSheetToKeyFigureMap = CreateObject("Scripting.Dictionary")
    
    Set wbReport = Workbooks.Add
    
    For Each varKeyFigure In dictKeyFigures.Keys
        Set ws = wbReport.Sheets.Add(Before:=wbReport.Sheets(1))
        Dim sheetName As String: sheetName = SanitizeSheetName("Summary - " & CStr(varKeyFigure))
        ws.Name = sheetName
        dictSheetToKeyFigureMap.Add sheetName, CStr(varKeyFigure)
    Next varKeyFigure
    
    Application.DisplayAlerts = False
    wbReport.Sheets("Sheet1").Delete
    Application.DisplayAlerts = True

    Set dictTiers = GetUniqueTiersForAffiliate(strAffiliate)
    
    For Each varTier In dictTiers.Keys
        Set ws = wbReport.Sheets.Add(After:=wbReport.Sheets(wbReport.Sheets.Count))
        ws.Name = SanitizeSheetName(CStr(varTier))
        PopulateTierSheet ws, strAffiliate, CStr(varTier)
        FormatTierSheet ws
    Next varTier
    
    PopulateSummarySheets wbReport, strAffiliate, dictSheetToKeyFigureMap
    
    If Not DEBUG_MODE Then
        Dim strFilePath As String
        strFilePath = GetOutputFilePath(wbHost.Path, strAffiliate)
        wbReport.SaveAs strFilePath
        wbReport.Close SaveChanges:=False
        WriteToLog "Info", "GenerateAffiliateReport", "Report saved to " & strFilePath
    End If
End Sub

Private Sub PopulateTierSheet(ByVal ws As Worksheet, ByVal strAffiliate As String, ByVal strTier As String)
    Dim arrOutput() As Variant, arrHeader() As Variant
    Dim i As Long, c As Long
    Dim objLifecycle As cProductLifecycle
    Dim varKeyFigure As Variant
    Dim colProducts As Collection
    Dim numHistMonths As Long, numFcstMonths As Long
    Dim outputRowIndex As Long, subtotalStartRow As Long
    
    Set colProducts = GetProductsForTier(strAffiliate, strTier)
    If colProducts.Count = 0 Then Exit Sub
    
    numHistMonths = UBound(arrHistoryData, 2) - HS_START_OF_MONTHS_COL + 1
    numFcstMonths = UBound(arrDemandData, 2) - DF_START_OF_MONTHS_COL + 1
    
    ReDim arrHeader(1 To 8 + numHistMonths + numFcstMonths)
    
    arrHeader(1) = "Affiliate": arrHeader(2) = "Forecast Tier": arrHeader(3) = "Forecast Sub-Tier"
    arrHeader(4) = "Key Figures": arrHeader(5) = "Local Item Nbr": arrHeader(6) = "Desc"
    arrHeader(7) = "I-S-D": arrHeader(8) = "Status"
    
    c = 9
    For i = 1 To numHistMonths
        arrHeader(c) = arrHistoryData(1, HS_START_OF_MONTHS_COL + i - 1)
        c = c + 1
    Next i
    For i = 1 To numFcstMonths
        arrHeader(c) = arrDemandData(1, DF_START_OF_MONTHS_COL + i - 1)
        c = c + 1
    Next i
    
    ReDim arrOutput(1 To (colProducts.Count * dictKeyFigures.Count) + dictKeyFigures.Count, 1 To UBound(arrHeader))
    
    outputRowIndex = 1
    
    For Each varKeyFigure In dictKeyFigures.Keys
        subtotalStartRow = outputRowIndex
        
        For Each objLifecycle In colProducts
            arrOutput(outputRowIndex, 1) = objLifecycle.Affiliate
            arrOutput(outputRowIndex, 2) = objLifecycle.ForecastTier
            arrOutput(outputRowIndex, 3) = objLifecycle.ForecastSubTier
            arrOutput(outputRowIndex, 4) = CStr(varKeyFigure)
            arrOutput(outputRowIndex, 5) = objLifecycle.LocalItemNbr
            arrOutput(outputRowIndex, 6) = objLifecycle.Description
            arrOutput(outputRowIndex, 7) = objLifecycle.ISD
            arrOutput(outputRowIndex, 8) = GetStatusString(objLifecycle.Status)
            
            c = 9
            ' Populate Historical Data
            Dim histKey As String: histKey = objLifecycle.Affiliate & "|" & CStr(varKeyFigure) & "|" & objLifecycle.LocalItemNbr
            For i = 1 To numHistMonths
                Dim dteHistMonth As Date: dteHistMonth = arrHistoryData(1, HS_START_OF_MONTHS_COL + i - 1)
                If dictHistoryCache.Exists(histKey) Then
                    If dictHistoryCache.Item(histKey).Exists(dteHistMonth) Then
                        arrOutput(outputRowIndex, c) = dictHistoryCache.Item(histKey).Item(dteHistMonth)
                    End If
                End If
                c = c + 1
            Next i
            
            ' Populate Forecast Data
            For i = 1 To numFcstMonths
                Dim dteFcstMonth As Date: dteFcstMonth = arrDemandData(1, DF_START_OF_MONTHS_COL + i - 1)
                Dim fcstKey As String: fcstKey = CStr(varKeyFigure) & "|" & dteFcstMonth
                If objLifecycle.ForecastValues.Exists(fcstKey) Then
                    arrOutput(outputRowIndex, c) = objLifecycle.ForecastValues.Item(fcstKey) * objLifecycle.GetForecastMultiplier(dteFcstMonth)
                End If
                c = c + 1
            Next i
            outputRowIndex = outputRowIndex + 1
        Next objLifecycle
        
        arrOutput(outputRowIndex, 1) = "TOTAL"
        arrOutput(outputRowIndex, 2) = strTier
        arrOutput(outputRowIndex, 4) = CStr(varKeyFigure)
        For c = 9 To UBound(arrOutput, 2)
            Dim monthlyTotal As Double, productRow As Long
            For productRow = subtotalStartRow To outputRowIndex - 1
                If IsNumeric(arrOutput(productRow, c)) Then
                    monthlyTotal = monthlyTotal + arrOutput(productRow, c)
                End If
            Next productRow
            arrOutput(outputRowIndex, c) = monthlyTotal
        Next c
        outputRowIndex = outputRowIndex + 1
        
    Next varKeyFigure
    
    ws.Range("A1").Resize(1, UBound(arrHeader)).Value = arrHeader
    ws.Range("A2").Resize(outputRowIndex - 1, UBound(arrHeader)).Value = arrOutput
End Sub

Private Sub FormatTierSheet(ByVal ws As Worksheet)
    Dim lastRow As Long, lastCol As Long
    Dim dataRange As Range, headerRange As Range
    Dim i As Long, histColEnd As Long
    
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).row
    If lastRow <= 1 Then Exit Sub
    
    lastCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
    histColEnd = 8 + (UBound(arrHistoryData, 2) - HS_START_OF_MONTHS_COL + 1)
    
    Set headerRange = ws.Range("A1").Resize(1, lastCol)
    Set dataRange = ws.Range("A1").Resize(lastRow, lastCol)
    
    ' Format Static and Forecast Headers (Dark Blue)
    With Union(ws.Range("A1:H1"), ws.Range(ws.Cells(1, histColEnd + 1), ws.Cells(1, lastCol)))
        .Font.Bold = True
        .Font.Color = vbWhite
        .Interior.Color = RGB(0, 32, 96)
        .VerticalAlignment = xlCenter
    End With
    
    ' Format Historical Headers (Gray)
    With ws.Range(ws.Cells(1, 9), ws.Cells(1, histColEnd))
        .Font.Bold = True
        .Font.Color = vbBlack
        .Interior.Color = RGB(217, 217, 217)
        .VerticalAlignment = xlCenter
    End With
    
    ' Format Historical Data Area (Light Fill)
    ws.Range(ws.Cells(2, 9), ws.Cells(lastRow, histColEnd)).Interior.Color = RGB(242, 242, 242)
    
    ' Format Subtotal Rows
    For i = 2 To lastRow
        If ws.Cells(i, 1).Value = "TOTAL" Then
            With ws.Range(ws.Cells(i, 1), ws.Cells(i, lastCol))
                .Font.Bold = True
                .Interior.Color = RGB(220, 230, 241) ' Light Blue
            End With
        End If
    Next i
    
    ws.Range(ws.Cells(2, 9), ws.Cells(lastRow, lastCol)).NumberFormat = "#,##0"
    
    With dataRange.Borders
        .LineStyle = xlContinuous
        .Weight = xlThin
    End With
    
    ws.Columns.AutoFit
    ws.Activate
    ws.Rows(2).Select
    ActiveWindow.FreezePanes = True
    ws.Cells(1, 1).Select
End Sub

Private Sub FormatSummarySheet(ByVal ws As Worksheet)
    Dim lastRow As Long, lastCol As Long
    Dim dataRange As Range, headerRange As Range

    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).row
    If lastRow <= 1 Then Exit Sub
    
    lastCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
    
    Set headerRange = ws.Range("A1").Resize(1, lastCol)
    Set dataRange = ws.Range("A1").Resize(lastRow, lastCol)
    
    With headerRange
        .Font.Bold = True
        .Font.Color = vbWhite
        .Interior.Color = RGB(0, 32, 96)
        .VerticalAlignment = xlCenter
    End With
    
    ws.Range(ws.Cells(2, 8), ws.Cells(lastRow, lastCol)).NumberFormat = "#,##0"
    
    With dataRange.Borders
        .LineStyle = xlContinuous
        .Weight = xlThin
    End With
    
    ws.Columns.AutoFit
    ws.Activate
    ws.Rows(2).Select
    ActiveWindow.FreezePanes = True
    ws.Cells(1, 1).Select
End Sub


Private Sub PopulateSummarySheets(ByVal wbReport As Workbook, ByVal strAffiliate As String, ByVal dictMap As Object)
    Dim ws As Worksheet
    For Each ws In wbReport.Worksheets
        If dictMap.Exists(ws.Name) Then
            Dim strFullKeyFigure As String
            strFullKeyFigure = dictMap.Item(ws.Name)
            
            Dim arrHeader As Variant
            Dim numForecastMonths As Long: numForecastMonths = UBound(arrDemandData, 2) - DF_START_OF_MONTHS_COL + 1
            ReDim arrHeader(1 To 7 + numForecastMonths)
            arrHeader(1) = "Affiliate": arrHeader(2) = "Forecast Tier": arrHeader(3) = "Forecast Sub-Tier"
            arrHeader(4) = "Local Item Nbr": arrHeader(5) = "Desc": arrHeader(6) = "I-S-D": arrHeader(7) = "Status"
            
            Dim i As Long
            For i = 1 To numForecastMonths
                arrHeader(7 + i) = arrDemandData(1, DF_START_OF_MONTHS_COL + i - 1)
            Next i
            ws.Range("A1").Resize(1, UBound(arrHeader)).Value = arrHeader
            
            Dim lngRow As Long: lngRow = 2
            Dim objLifecycle As cProductLifecycle
            Dim varKey As Variant
            For Each varKey In dictLifecycleMap.Keys
                Set objLifecycle = dictLifecycleMap.Item(varKey)
                If objLifecycle.Affiliate = strAffiliate Then
                    ws.Cells(lngRow, 1).Value = objLifecycle.Affiliate: ws.Cells(lngRow, 2).Value = objLifecycle.ForecastTier
                    ws.Cells(lngRow, 3).Value = objLifecycle.ForecastSubTier: ws.Cells(lngRow, 4).Value = objLifecycle.LocalItemNbr
                    ws.Cells(lngRow, 5).Value = objLifecycle.Description: ws.Cells(lngRow, 6).Value = objLifecycle.ISD
                    ws.Cells(lngRow, 7).Value = GetStatusString(objLifecycle.Status)
                    
                    For i = 1 To numForecastMonths
                        Dim dteForecastMonth As Date: dteForecastMonth = arrDemandData(1, DF_START_OF_MONTHS_COL + i - 1)
                        Dim forecastKey As String: forecastKey = strFullKeyFigure & "|" & dteForecastMonth
                        
                        If objLifecycle.ForecastValues.Exists(forecastKey) Then
                            ws.Cells(lngRow, 7 + i).Value = objLifecycle.ForecastValues.Item(forecastKey) * objLifecycle.GetForecastMultiplier(dteForecastMonth)
                        End If
                    Next i
                    lngRow = lngRow + 1
                End If
            Next varKey
            
            FormatSummarySheet ws
        End If
    Next ws
End Sub

'================================================================================================
' 4. DATA RETRIEVAL & CACHING
'================================================================================================

Private Function BuildLifecycleMap(ByVal arrStatus As Variant) As Object
    Dim dictMap As Object: Set dictMap = CreateObject("Scripting.Dictionary")
    Dim r As Long, obj As cProductLifecycle
    
    For r = 2 To UBound(arrStatus, 1)
        Dim strKey As String: strKey = BuildCompositeKey(arrStatus(r, PS_AFFILIATE_COL), arrStatus(r, PS_ISD_COL))
        If Not dictMap.Exists(strKey) Then
            Set obj = New cProductLifecycle
            obj.Init arrStatus, r
            dictMap.Add strKey, obj
        End If
    Next r
    Set BuildLifecycleMap = dictMap
End Function

Private Function GetHistoricalSum(strAffiliate As String, strTier As String, strSubTier As String, strKeyFigure As String) As Double
    Dim r As Long, dblSum As Double
    For r = 2 To UBound(arrHistoryData, 1)
        If arrHistoryData(r, HS_AFFILIATE_COL) = strAffiliate And _
           arrHistoryData(r, HS_TIER_COL) = strTier And _
           arrHistoryData(r, HS_KEY_FIGURE_COL) = strKeyFigure Then
           
            If strSubTier = "" Or arrHistoryData(r, HS_SUB_TIER_COL) = strSubTier Then
                Dim c As Long
                For c = HS_START_OF_MONTHS_COL To UBound(arrHistoryData, 2)
                    If IsNumeric(arrHistoryData(r, c)) Then
                        dblSum = dblSum + CDbl(arrHistoryData(r, c))
                    End If
                Next c
            End If
        End If
    Next r
    GetHistoricalSum = dblSum
End Function

Private Function GetDemandValue(strAffiliate As String, strTier As String, strKeyFigure As String, dteMonth As Date) As Double
    Dim r As Long, c As Long
    For c = DF_START_OF_MONTHS_COL To UBound(arrDemandData, 2)
        If IsDate(arrDemandData(1, c)) Then
            If CDate(arrDemandData(1, c)) = dteMonth Then Exit For
        End If
    Next c
    If c > UBound(arrDemandData, 2) Then Exit Function
    
    For r = 2 To UBound(arrDemandData, 1)
        If arrDemandData(r, DF_AFFILIATE_COL) = strAffiliate And _
           arrDemandData(r, DF_TIER_COL) = strTier And _
           arrDemandData(r, DF_KEY_FIGURE_COL) = strKeyFigure Then
            If IsNumeric(arrDemandData(r, c)) Then
                GetDemandValue = CDbl(arrDemandData(r, c))
            End If
            Exit Function
        End If
    Next r
End Function

Private Function GetProductsForTier(strAffiliate As String, strTier As String) As Collection
    Set GetProductsForTier = New Collection
    Dim varKey As Variant, obj As cProductLifecycle
    For Each varKey In dictLifecycleMap.Keys
        Set obj = dictLifecycleMap.Item(varKey)
        If obj.Affiliate = strAffiliate And obj.ForecastTier = strTier Then
            GetProductsForTier.Add obj
        End If
    Next varKey
End Function

Private Function GetUniqueTiersForAffiliate(strAffiliate As String) As Object
    Set GetUniqueTiersForAffiliate = CreateObject("Scripting.Dictionary")
    Dim r As Long
    For r = 2 To UBound(arrDemandData, 1)
        If arrDemandData(r, DF_AFFILIATE_COL) = strAffiliate Then
            Dim strTier As String: strTier = arrDemandData(r, DF_TIER_COL)
            If Not GetUniqueTiersForAffiliate.Exists(strTier) Then
                GetUniqueTiersForAffiliate.Add strTier, 1
            End If
        End If
    Next r
End Function

'================================================================================================
' 5. UTILITY & HELPER FUNCTIONS
'================================================================================================

Private Function LoadDataToArray(ByVal ws As Worksheet) As Variant
    If ws Is Nothing Then Exit Function
    Dim lRow As Long: lRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).row
    Dim lCol As Long: lCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
    If lRow > 1 And lCol > 0 Then LoadDataToArray = ws.Range("A1", ws.Cells(lRow, lCol)).Value
End Function

Public Function BuildCompositeKey(ByVal keyPart1 As String, ByVal keyPart2 As String) As String
    Const SEPARATOR As String = "|"
    BuildCompositeKey = Trim$(keyPart1) & SEPARATOR & Trim$(keyPart2)
End Function

Private Function GetUniqueValues(arrData As Variant, ByVal lngCol As Long) As Object
    Dim dict As Object: Set dict = CreateObject("Scripting.Dictionary")
    dict.CompareMode = vbTextCompare
    Dim r As Long
    For r = 2 To UBound(arrData, 1)
        If Not IsEmpty(arrData(r, lngCol)) Then
            If Not dict.Exists(arrData(r, lngCol)) Then
                dict.Add arrData(r, lngCol), 1
            End If
        End If
    Next r
    Set GetUniqueValues = dict
End Function

Private Function SanitizeSheetName(ByVal strName As String) As String
    Dim sanitizedString As String
    sanitizedString = strName
    sanitizedString = Replace(sanitizedString, "/", "-")
    sanitizedString = Replace(sanitizedString, "\", "-")
    sanitizedString = Replace(sanitizedString, "?", "")
    sanitizedString = Replace(sanitizedString, "*", "")
    sanitizedString = Replace(sanitizedString, "[", "")
    sanitizedString = Replace(sanitizedString, "]", "")
    SanitizeSheetName = Left$(sanitizedString, 31)
End Function

Private Function GetOutputFilePath(ByVal strBasePath As String, ByVal strAffiliate As String) As String
    GetOutputFilePath = strBasePath & "\Demand Forecast - " & strAffiliate & " - " & Format$(Now, "ddmmyyyy_hhmmss") & ".xlsx"
End Function

Private Sub CleanupMemory()
    Set dictLifecycleMap = Nothing
    Set dictAffiliates = Nothing
    Set dictKeyFigures = Nothing
    Set dictHistoryCache = Nothing
    Erase arrStatusData
    Erase arrHistoryData
    Erase arrDemandData
End Sub

'================================================================================================
' 6. LOGGING & STATUS MAPPING
'================================================================================================

Private Sub InitializeLogSheet(ByVal ws As Worksheet)
    ws.Name = SHEET_LOG
    With ws.Range("A1:E1")
        .Value = Array("Timestamp", "Type", "Procedure", "Message", "Context / Error")
        .Font.Bold = True
    End With
    ws.Columns("A:E").AutoFit
End Sub

Private Sub WriteToLog(ByVal strType As String, ByVal strProcedure As String, ByVal strMessage As String, Optional ByVal lngErrNumber As Long = 0, Optional ByVal strContext As String = "")
    If wsLog Is Nothing Then Exit Sub
    Dim lNextRow As Long
    lNextRow = wsLog.Cells(wsLog.Rows.Count, "A").End(xlUp).row + 1
    With wsLog.Rows(lNextRow)
        .Cells(1).Value = Now()
        .Cells(2).Value = strType
        .Cells(3).Value = strProcedure
        .Cells(4).Value = strMessage
        If lngErrNumber <> 0 Then
            .Cells(5).Value = "Err " & lngErrNumber & ": " & strContext
        Else
            .Cells(5).Value = strContext
        End If
    End With
End Sub

Public Function GetStatusEnum(ByVal strStatus As String) As ProductStatus
    Dim strKey As String: strKey = UCase$(Trim$(strStatus))
    If dictStatusMap.Exists(strKey) Then
        GetStatusEnum = dictStatusMap.Item(strKey)
    Else
        GetStatusEnum = psUnknown
    End If
End Function

Public Function GetStatusString(ByVal enmStatus As ProductStatus) As String
    Select Case enmStatus
        Case psActive: GetStatusString = "Active"
        Case psPhaseInOut: GetStatusString = "PhaseIn-PhaseOut"
        Case psDiscontinued: GetStatusString = "Discontinued"
        Case psNew: GetStatusString = "New"
        Case Else: GetStatusString = "Unknown"
    End Select
End Function

Private Sub InitializeStatusMap()
    Set dictStatusMap = CreateObject("Scripting.Dictionary")
    dictStatusMap.CompareMode = vbTextCompare
    dictStatusMap.Add "ACTIVE", psActive
    dictStatusMap.Add "PHASEIN-PHASEOUT", psPhaseInOut
    dictStatusMap.Add "DISCONTINUED", psDiscontinued
    dictStatusMap.Add "NEW", psNew
End Sub
