'@Folder("Classes")
Option Explicit

'================================================================================================
' Class:       cCalculationEngine
' Purpose:     Encapsulates the core forecast calculation logic. This class is configured
'              with the names of the relevant business dimensions and executes the
'              forecast formula.
' Version:     1.3
' Author:      Ayush Goyal
' Date:        08-Jul-2025
'
' Change Log:
' V1.3:        - PERFORMANCE: Replaced cDimensionKey with direct string concatenation
'                in the private key-building helper functions. This avoids object
'                creation overhead in the main calculation loop, significantly
'                improving performance.
' V1.2:        - REFACTOR: Added an Init method to accept stable dependencies.
'================================================================================================

' --- Private Member Variables ---
Private m_TotalLevelDim As String
Private m_ShareLevelDim As String
Private m_KeyFigureDim As String
Private m_AffiliateDim As String
Private m_demandDataArray As Variant
Private m_demandMonthsCol As Long

' --- Public Configuration Properties ---
Public Property Let TotalLevelDim(ByVal Value As String): m_TotalLevelDim = Value: End Property
Public Property Let ShareLevelDim(ByVal Value As String): m_ShareLevelDim = Value: End Property
Public Property Let KeyFigureDim(ByVal Value As String): m_KeyFigureDim = Value: End Property
Public Property Let AffiliateDim(ByVal Value As String): m_AffiliateDim = Value: End Property

'================================================================================================
'--- PUBLIC INITIALIZATION & EXECUTION ---
'================================================================================================

Public Sub Init(ByVal demandDataArray As Variant, ByVal demandMonthsCol As Long)
    m_demandDataArray = demandDataArray
    m_demandMonthsCol = demandMonthsCol
End Sub

Public Sub Execute(ByVal item As cForecastItem, _
                   ByVal strKeyFigure As String, _
                   ByVal histCache As Object, _
                   ByVal demandCache As Object)

    Dim histSubTierSum As Double, histTierSum As Double
    
    ' --- Get historical sums from the cache using optimized key builders ---
    histTierSum = GetValueFromCache(histCache, BuildTotalLevelKey(item, strKeyFigure))
    
    ' --- Only proceed if the overall tier has a sales history ---
    If histTierSum > 0 Then
        histSubTierSum = GetValueFromCache(histCache, BuildShareLevelKey(item, strKeyFigure))
        
        Dim monthIndex As Long
        For monthIndex = 1 To UBound(m_demandDataArray, 2) - m_demandMonthsCol + 1
            Dim forecastMonth As Date: forecastMonth = m_demandDataArray(1, m_demandMonthsCol + monthIndex - 1)
            Dim demandTierValue As Double
            
            ' --- Get the tier's demand value from the cache ---
            demandTierValue = GetValueFromCache(demandCache, BuildDemandKey(item, strKeyFigure, forecastMonth))
            
            ' --- CORE FORECAST LOGIC ---
            Dim productShareOfTier As Double
            If histTierSum <> 0 Then productShareOfTier = histSubTierSum / histTierSum

            Dim baseForecast As Double
            baseForecast = productShareOfTier * demandTierValue
            
            item.ForecastValues.Add strKeyFigure & "|" & forecastMonth, baseForecast
        Next monthIndex
    Else
        ' --- If tier has no history, all forecasts for this key figure are zero ---
        Dim i As Long
        For i = 1 To UBound(m_demandDataArray, 2) - m_demandMonthsCol + 1
            Dim fMonth As Date: fMonth = m_demandDataArray(1, m_demandMonthsCol + i - 1)
            item.ForecastValues.Add strKeyFigure & "|" & fMonth, 0
        Next i
    End If
End Sub

'================================================================================================
'--- PRIVATE HELPER METHODS (OPTIMIZED) ---
'================================================================================================

Private Function BuildTotalLevelKey(ByVal item As cForecastItem, ByVal strKeyFigure As String) As String
    ' OPTIMIZED: Direct string concatenation in alphabetical order of dimension names
    ' "Affiliate", "ForecastTier", "KeyFigure"
    BuildTotalLevelKey = item.Affiliate & "|" & _
                         item.ForecastTier & "|" & _
                         strKeyFigure
End Function

Private Function BuildShareLevelKey(ByVal item As cForecastItem, ByVal strKeyFigure As String) As String
    ' OPTIMIZED: Direct string concatenation in alphabetical order of dimension names
    ' "Affiliate", "ForecastSubTier", "ForecastTier", "KeyFigure"
    BuildShareLevelKey = item.Affiliate & "|" & _
                         item.ForecastSubTier & "|" & _
                         item.ForecastTier & "|" & _
                         strKeyFigure
End Function

Private Function BuildDemandKey(ByVal item As cForecastItem, ByVal strKeyFigure As String, ByVal dteMonth As Date) As String
    ' OPTIMIZED: Direct string concatenation in alphabetical order of dimension names
    ' "Affiliate", "ForecastTier", "KeyFigure", "Month"
    BuildDemandKey = item.Affiliate & "|" & _
                     item.ForecastTier & "|" & _
                     strKeyFigure & "|" & _
                     dteMonth
End Function

Private Function GetValueFromCache(ByVal cache As Object, ByVal cacheKey As String) As Double
    If cache.Exists(cacheKey) Then
        GetValueFromCache = cache.Item(cacheKey)
    Else
        GetValueFromCache = 0
    End If
End Function
