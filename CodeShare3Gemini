Option Explicit ' Enforces variable declaration

' --- Configuration ---
Private Const TARGET_SYSTEM As String = "PEA100" ' Target SAP System ID + Client
Private Const MAX_POSSIBLE_SESSIONS As Integer = 6
' MB51 Specific Parameters (Can be passed to RunGUIScript or read from elsewhere)
Private Const EXPORT_PATH As String = "Z:\Demand\Demand Review\2025\03 Mar 25\SAP H2H Report"
Private Const EXPORT_FILENAME As String = "H2H Usage Report v4.XLSX"
Private Const PLANT_CODE As String = "1534"
' Get current date and format it (as an example, adjust if needed)
' Note: Using current date for example, replace with fixed dates if necessary
' Private Const DATE_LOW As String = "01.03.2025" ' Use Format(DateSerial(Year(Date), Month(Date), 1), "dd.mm.yyyy") for first day of month
' Private Const DATE_HIGH As String = "31.03.2025" ' Use Format(DateSerial(Year(Date), Month(Date) + 1, 0), "dd.mm.yyyy") for last day of month
Private Const DATE_LOW As String = "01.04.2025" ' Using current date based on prompt context
Private Const DATE_HIGH As String = "30.04.2025" ' Using current date based on prompt context
Private Const ALV_LAYOUT As String = "AYUSH_TRY"


' --- Module Level SAP Objects ---
' These are set by StartExtract and used by RunGUIScript
Private objGui As Object ' GuiApplication
Private objConn As Object ' GuiConnection
Private objSess As Object ' GuiSession

' --- Orchestrator Sub (Recommended) ---
' This sub calls the two main parts in sequence
Sub ProcessMB51Report()

    ' Optimize Excel
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    On Error GoTo Cleanup ' Handle errors in this top-level procedure

    ' 1. Attempt to find and attach to SAP session
    If StartExtract(TARGET_SYSTEM) Then
        ' 2. If successful, run the specific GUI script task
        RunGUIScript PLANT_CODE, DATE_LOW, DATE_HIGH, ALV_LAYOUT, EXPORT_PATH, EXPORT_FILENAME
        
        MsgBox "MB51 extraction process completed.", vbInformation, "Process Finished"
        
    Else
        ' Error message was already displayed by StartExtract if it failed
        ' No further action needed here, cleanup will occur
    End If

Cleanup:
    If Err.Number <> 0 Then
        MsgBox "An unexpected error occurred in the main procedure: " & vbCrLf & Err.Description, vbCritical, "Orchestration Error " & Err.Number
    End If
    ' Restore Excel settings
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    
    ' Optional: Release SAP objects if no longer needed
    ' Set objSess = Nothing
    ' Set objConn = Nothing
    ' Set objGui = Nothing
End Sub


' --- Subroutine to Find and Attach to SAP Session ---
' Returns True if successful, False otherwise. Sets module-level objGui, objConn, objSess.
Public Function StartExtract(ByVal systemId As String) As Boolean
    Dim i As Integer, j As Integer
    Dim currentConn As Object ' GuiConnection
    Dim currentSess As Object ' GuiSession
    Dim sessionCount As Integer
    Dim sessionFound As Boolean
    Dim suitableSession As Object ' GuiSession
    
    StartExtract = False ' Default return value (failure)
    Set suitableSession = Nothing
    sessionFound = False
    
    ' Clear previous session objects if any (to ensure a fresh find)
    Set objSess = Nothing
    Set objConn = Nothing
    Set objGui = Nothing
    
    On Error Resume Next ' Temporarily ignore errors during SAP object access
    Set objGui = GetObject("SAPGUI").GetScriptingEngine
    If Err.Number <> 0 Then
        MsgBox "Could not get SAP GUI Scripting Engine." & vbCrLf & "Is SAP GUI running and scripting enabled?", vbCritical, "SAP Connection Error"
        Exit Function ' Return False
    End If
    On Error GoTo 0 ' Restore error handling

    ' --- Iterate through connections and sessions ---
    If objGui Is Nothing Then Exit Function ' Safety check

    For i = 0 To objGui.Children.Count - 1
        Set currentConn = objGui.Children(CLng(i))
        sessionCount = currentConn.Children.Count
        
        For j = 0 To sessionCount - 1
            Set currentSess = currentConn.Children(CLng(j))
            
            ' Check if this session matches the target system
            If currentSess.Info.SystemName & currentSess.Info.Client = systemId Then
                ' Check if the session is at a suitable starting point
                Select Case currentSess.Info.Transaction
                    Case "SESSION_MANAGER", "SMEN", "S000", "" ' Idle / Main Menu
                        Set suitableSession = currentSess
                        ' Set the module-level variables
                        Set objConn = currentConn
                        Set objSess = suitableSession
                        sessionFound = True
                        Exit For ' Stop searching sessions in this connection
                    Case Else
                        ' Session busy, keep searching
                End Select
            End If
        Next j
        
        If sessionFound Then Exit For ' Stop searching connections
        
        ' Check for Max Sessions Reached only if no suitable session found yet on this connection
        If Not sessionFound And sessionCount >= MAX_POSSIBLE_SESSIONS Then
            Dim k As Integer, targetSystemExistsOnConnection As Boolean
            targetSystemExistsOnConnection = False
            For k = 0 To sessionCount - 1
                 If currentConn.Children(k).Info.SystemName & currentConn.Children(k).Info.Client = systemId Then
                    targetSystemExistsOnConnection = True
                    Exit For
                 End If
            Next k
            
            If targetSystemExistsOnConnection Then
                 MsgBox "Maximum number of sessions (" & MAX_POSSIBLE_SESSIONS & ") reached for system " & systemId & " on this connection, and no idle session found.", vbCritical + vbOKOnly, "SAP Session Limit"
                 Exit Function ' Return False
            End If
        End If
    Next i

    ' --- Final Check and Return Status ---
    If sessionFound Then
        StartExtract = True ' Indicate success
    Else
        MsgBox "No active and idle session found for system " & systemId & "." & vbCrLf & _
               "Please ensure you are logged into SAP, scripting is enabled, and a session is available at the main menu.", vbCritical + vbOKOnly, "SAP Session Not Found"
        Set objSess = Nothing ' Ensure objects are Nothing on failure
        Set objConn = Nothing
        Set objGui = Nothing
        StartExtract = False ' Indicate failure
    End If

End Function


' --- Subroutine to Execute Specific SAP GUI Script Steps ---
Public Sub RunGUIScript(ByVal plant As String, _
                        ByVal dateLow As String, _
                        ByVal dateHigh As String, _
                        ByVal layout As String, _
                        ByVal exportPath As String, _
                        ByVal exportFileName As String)
                              
    ' Pre-condition check: Assumes StartExtract was successful
    If objSess Is Nothing Then
        MsgBox "RunGUIScript called, but no valid SAP session is attached (StartExtract likely failed).", vbCritical, "Internal Error - No Session"
        Exit Sub
    End If

    Dim fs As Object ' FileSystemObject
    Dim objSBar As Object ' GuiStatusbar (Optional)

    On Error GoTo SapScriptError

    ' Optional: Get Status Bar
    ' Set objSBar = objSess.FindById("wnd[0]/sbar")

    ' --- Start MB51 Transaction ---
    objSess.FindById("wnd[0]/tbar[0]/okcd").Text = "mb51"
    objSess.FindById("wnd[0]").sendVKey 0 ' Enter

    ' --- Fill Selection Screen ---
    objSess.FindById("wnd[0]/usr/ctxtWERKS-LOW").Text = plant
    objSess.FindById("wnd[0]/usr/ctxtBUDAT-LOW").Text = dateLow
    objSess.FindById("wnd[0]/usr/ctxtBUDAT-HIGH").Text = dateHigh
    objSess.FindById("wnd[0]/usr/radRFLAT_L").Select ' Flat List radio button
    objSess.FindById("wnd[0]/usr/ctxtALV_DEF").Text = layout ' ALV Layout

    ' --- Execute Report ---
    objSess.FindById("wnd[0]/tbar[1]/btn[8]").press ' F8 = Execute

    ' --- Check Export Path ---
    On Error Resume Next ' Check FSO creation
    Set fs = CreateObject("Scripting.FileSystemObject")
    If Err.Number <> 0 Then
        MsgBox "Could not create FileSystemObject. Cannot verify export path.", vbExclamation, "Scripting Error"
        Set fs = Nothing
        On Error GoTo SapScriptError ' Restore error handling
        GoTo ExitPoint ' Skip export
    End If
    
    If Not fs.FolderExists(exportPath) Then
         On Error GoTo 0 ' Turn error trapping back on before MsgBox
         MsgBox "Export directory not found:" & vbCrLf & exportPath & vbCrLf & vbCrLf & "Please create the directory.", vbCritical, "Directory Not Found"
         Set fs = Nothing
         On Error Resume Next ' Try to go back in SAP
         objSess.FindById("wnd[0]/tbar[0]/btn[3]").press ' F3 = Back
         On Error GoTo SapScriptError ' Restore proper error handling
         GoTo ExitPoint ' Exit this sub
    End If
    On Error GoTo SapScriptError ' Restore SAP script error handling
    Set fs = Nothing

    ' --- Export to Excel ---
    objSess.FindById("wnd[0]/usr/cntlGRID1/shellcont/shell").SelectContextMenuItem "&XXL"
    objSess.FindById("wnd[1]/tbar[0]/btn[0]").press ' Confirm Spreadsheet format
    objSess.FindById("wnd[1]/usr/ctxtDY_PATH").Text = exportPath
    objSess.FindById("wnd[1]/usr/ctxtDY_FILENAME").Text = exportFileName
    objSess.FindById("wnd[1]/tbar[0]/btn[0]").press ' Confirm path/filename

    ' Optional: Check status bar for success message
    ' Application.Wait Now + TimeValue("0:00:01") ' Short pause
    ' If Not objSBar Is Nothing Then ... check objSBar.Text ...

    ' --- Go Back Twice ---
    objSess.FindById("wnd[0]/tbar[0]/btn[15]").press ' Exit/Back
    objSess.FindById("wnd[0]/tbar[0]/btn[15]").press ' Exit/Back

ExitPoint:
    Set objSBar = Nothing
    Set fs = Nothing
    Exit Sub ' Normal exit

SapScriptError:
    MsgBox "Error during SAP GUI script execution (RunGUIScript):" & vbCrLf & _
           "Error: " & Err.Number & " - " & Err.Description & vbCrLf & vbCrLf & _
           "Attempting to return to SAP main menu.", vbCritical, "SAP Script Error"
    ' Cleanup attempt
    On Error Resume Next
    If Not objSess Is Nothing Then
        objSess.FindById("wnd[0]/tbar[0]/btn[12]").press ' Cancel
        objSess.FindById("wnd[0]/tbar[0]/btn[3]").press  ' Back
        objSess.FindById("wnd[0]/tbar[0]/btn[3]").press  ' Back
    End If
    Resume ExitPoint ' Go to cleanup point of this sub

End Sub
