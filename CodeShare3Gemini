Option Explicit ' Enforces variable declaration

' 1. Declare only those Public Variables required
Public objGui As Object  ' As GuiApplication
Public objConn As Object ' As GuiConnection
Public objSess As Object ' As GuiSession

' --- Module Level Configuration (Only for connection strategy) ---
Private Const TARGET_SYSTEM As String = "PEA100" ' Target SAP System ID + Client
Private Const MAX_POSSIBLE_SESSIONS As Integer = 6

' 2. Sub StartExtract - finds and attaches to SAP Sessions,
'    then CALLS RunGUIScript if successful.
Public Sub StartExtract(ByVal systemId As String)
    Dim i As Integer, j As Integer
    Dim currentConn As Object ' GuiConnection
    Dim currentSess As Object ' GuiSession
    Dim sessionCount As Integer
    Dim sessionFound As Boolean
    Dim suitableSession As Object ' GuiSession
    
    sessionFound = False
    Set suitableSession = Nothing

    ' --- Manage Application Settings ---
    ' Turn off screen updating and calculation at the start
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    On Error GoTo Cleanup ' Use error handling for cleanup

    ' Clear previous session objects before attempting to set new ones
    Set objSess = Nothing
    Set objConn = Nothing
    Set objGui = Nothing
    
    ' --- Get SAP GUI Object ---
    On Error Resume Next ' Temporarily ignore errors for GetObject
    Set objGui = GetObject("SAPGUI").GetScriptingEngine
    If Err.Number <> 0 Then
        MsgBox "Could not get SAP GUI Scripting Engine." & vbCrLf & "Is SAP GUI running and scripting enabled?", vbCritical, "SAP Connection Error"
        GoTo Cleanup ' Go straight to cleanup if connection fails here
    End If
    On Error GoTo Cleanup ' Restore error handling for subsequent steps

    ' --- Iterate through connections and sessions ---
    If objGui Is Nothing Then GoTo Cleanup ' Should not happen if above check passed, but safety first

    For i = 0 To objGui.Children.Count - 1
        Set currentConn = objGui.Children(CLng(i))
        sessionCount = currentConn.Children.Count
        
        For j = 0 To sessionCount - 1
            Set currentSess = currentConn.Children(CLng(j))
            
            ' Check if this session matches the target system
            If currentSess.Info.SystemName & currentSess.Info.Client = systemId Then
                ' Check if the session is at a suitable starting point
                Select Case currentSess.Info.Transaction
                    Case "SESSION_MANAGER", "SMEN", "S000", "" ' Idle / Main Menu
                        Set suitableSession = currentSess
                        ' Set the Public module-level variables directly
                        Set objConn = currentConn ' Set connection associated with the session
                        Set objSess = suitableSession ' Set the found session
                        ' objGui is already set
                        sessionFound = True
                        Exit For ' Stop searching sessions in this connection
                    Case Else
                        ' Session busy, keep searching
                End Select
            End If
        Next j
        
        If sessionFound Then Exit For ' Stop searching connections
        
        ' Check for Max Sessions Reached only if no suitable session found yet on this connection
        If Not sessionFound And sessionCount >= MAX_POSSIBLE_SESSIONS Then
            Dim k As Integer, targetSystemExistsOnConnection As Boolean
            targetSystemExistsOnConnection = False
            For k = 0 To sessionCount - 1
                 If currentConn.Children(k).Info.SystemName & currentConn.Children(k).Info.Client = systemId Then
                    targetSystemExistsOnConnection = True
                    Exit For
                 End If
            Next k
            
            If targetSystemExistsOnConnection Then
                 MsgBox "Maximum number of sessions (" & MAX_POSSIBLE_SESSIONS & ") reached for system " & systemId & " on this connection, and no idle session found.", vbCritical + vbOKOnly, "SAP Session Limit"
                 GoTo Cleanup ' Go straight to cleanup if max sessions reached for target system
            End If
        End If
    Next i

    ' --- Check Result and Call RunGUIScript ---
    If sessionFound Then
        ' Successfully attached, now directly call the script execution sub
        ' Debug.Print "StartExtract successful: Attached. Calling RunGUIScript..."
        
        ' Handle potential errors specifically within RunGUIScript
        On Error GoTo RunScriptError
        RunGUIScript ' <<< CALL IS EMBEDDED HERE
        On Error GoTo Cleanup ' Restore general error handling after successful call
        
        ' Optional: Indicate overall success after RunGUIScript finished without error
        ' MsgBox "SAP Extraction Process Completed Successfully.", vbInformation, "Success"
        
    Else
        ' Connection failed - Message was shown inside loop or will be shown now
        If objGui Is Nothing Then
             ' Message already shown if GetObject failed
        ElseIf suitableSession Is Nothing Then ' Check if suitableSession remained Nothing
             MsgBox "No active and idle session found for system " & systemId & "." & vbCrLf & _
                    "Please ensure you are logged into SAP, scripting is enabled, and a session is available at the main menu.", vbCritical + vbOKOnly, "SAP Session Not Found"
        End If
        ' Ensure objects are Nothing if we failed to find session
        Set objSess = Nothing
        Set objConn = Nothing
        ' objGui might still be valid, but clear all for consistency on failure to attach? Your choice.
        ' Set objGui = Nothing
    End If

    ' --- Proceed to Cleanup Section ---
    GoTo Cleanup

RunScriptError:
    ' Error occurred *during* the execution of RunGUIScript
    MsgBox "An error occurred during RunGUIScript execution:" & vbCrLf & Err.Description, vbCritical, "RunGUIScript Error"
    ' The error is handled here, then we proceed to the main cleanup
    Resume Cleanup ' Use Resume to go to the Cleanup label after handling the error

Cleanup:
    ' This section runs regardless of success, failure, or error
    If Err.Number <> 0 And Not sessionFound Then ' Display general error only if specific messages weren't shown
         MsgBox "An unexpected error occurred during StartExtract (before finding session): " & vbCrLf & Err.Description, vbCritical, "StartExtract Error " & Err.Number
    End If
    
    ' --- Restore Application Settings ---
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    
    ' Optional: Release SAP objects (consider if needed immediately or if they might be reused)
    ' Set objSess = Nothing
    ' Set objConn = Nothing
    ' Set objGui = Nothing
End Sub


' 3. Sub RunGuiScript - has the transactions.
'    All constants required for this sub are inside this sub.
'    Relies on Public objSess being set by StartExtract.
Public Sub RunGUIScript()

    ' === Constants specific to this MB51 task ===
    Const TCODE As String = "mb51"
    Const PLANT As String = "1534"
    Const DATE_LOW As String = "01.03.2025" ' Using March 2025 from original code
    Const DATE_HIGH As String = "31.03.2025" ' Using March 2025 from original code
    Const ALV_LAYOUT As String = "AYUSH_TRY"
    Const EXPORT_PATH As String = "Z:\Demand\Demand Review\2025\03 Mar 25\SAP H2H Report"
    Const EXPORT_FILENAME As String = "H2H Usage Report v4.XLSX"
    ' Optional: Constants for UI element IDs
    Const ID_OK_CODE As String = "wnd[0]/tbar[0]/okcd"
    Const ID_PLANT_LOW As String = "wnd[0]/usr/ctxtWERKS-LOW"
    Const ID_DATE_LOW As String = "wnd[0]/usr/ctxtBUDAT-LOW"
    Const ID_DATE_HIGH As String = "wnd[0]/usr/ctxtBUDAT-HIGH"
    Const ID_RADIO_FLAT As String = "wnd[0]/usr/radRFLAT_L"
    Const ID_LAYOUT As String = "wnd[0]/usr/ctxtALV_DEF"
    Const ID_EXECUTE_BTN As String = "wnd[0]/tbar[1]/btn[8]"
    Const ID_GRID_CONTEXT As String = "wnd[0]/usr/cntlGRID1/shellcont/shell"
    Const ID_EXPORT_MENU As String = "&XXL"
    Const ID_EXPORT_POPUP1_OK As String = "wnd[1]/tbar[0]/btn[0]"
    Const ID_EXPORT_POPUP2_PATH As String = "wnd[1]/usr/ctxtDY_PATH"
    Const ID_EXPORT_POPUP2_FILE As String = "wnd[1]/usr/ctxtDY_FILENAME"
    Const ID_EXPORT_POPUP2_OK As String = "wnd[1]/tbar[0]/btn[0]"
    Const ID_BACK_BTN As String = "wnd[0]/tbar[0]/btn[3]"
    Const ID_EXIT_BTN As String = "wnd[0]/tbar[0]/btn[15]"
    Const ID_CANCEL_BTN As String = "wnd[0]/tbar[0]/btn[12]"
                              
    ' Pre-condition check: Ensure StartExtract successfully set the session object
    ' This check is slightly redundant now as RunGUIScript is only called on success,
    ' but it's good practice to keep it in case RunGUIScript is ever called directly.
    If objSess Is Nothing Then
        MsgBox "RunGUIScript cannot execute because no valid SAP session is available.", vbCritical, "Prerequisite Failed"
        Exit Sub
    End If

    Dim fs As Object ' FileSystemObject
    Dim objSBar As Object ' GuiStatusbar (Optional)

    ' NOTE: Error handling within RunGUIScript will now jump to the RunScriptError label
    '       within StartExtract because of how VBA's On Error works when subs are called.
    '       Alternatively, use 'On Error GoTo 0' and 'On Error GoTo MyLocalHandler'
    '       inside RunGUIScript if you need truly localized handling, but the current
    '       setup where StartExtract handles errors occurring during RunGUIScript is common.
    '       Let's keep the `On Error GoTo SapScriptError` local to RunGUIScript for clarity,
    '       but handle its exit logic carefully.

    On Error GoTo SapScriptError ' Use a local handler for errors within this sub

    ' Optional: Get Status Bar
    ' Set objSBar = objSess.FindById("wnd[0]/sbar")

    ' --- Start Transaction ---
    objSess.FindById(ID_OK_CODE).Text = TCODE
    objSess.FindById("wnd[0]").sendVKey 0 ' Enter

    ' --- Fill Selection Screen ---
    objSess.FindById(ID_PLANT_LOW).Text = PLANT
    objSess.FindById(ID_DATE_LOW).Text = DATE_LOW
    objSess.FindById(ID_DATE_HIGH).Text = DATE_HIGH
    objSess.FindById(ID_RADIO_FLAT).Select ' Select radio button
    objSess.FindById(ID_LAYOUT).Text = ALV_LAYOUT

    ' --- Execute Report ---
    objSess.FindById(ID_EXECUTE_BTN).press ' F8 = Execute

    ' --- Check Export Path ---
    On Error Resume Next ' Check FSO creation
    Set fs = CreateObject("Scripting.FileSystemObject")
    If Err.Number <> 0 Then
        MsgBox "Could not create FileSystemObject. Cannot verify export path.", vbExclamation, "Scripting Error"
        Set fs = Nothing
        On Error GoTo SapScriptError ' Restore error handling
        GoTo ExitPoint ' Skip export
    End If
    
    If Not fs.FolderExists(EXPORT_PATH) Then
         On Error GoTo 0 ' Turn error trapping back on before MsgBox
         MsgBox "Export directory not found:" & vbCrLf & EXPORT_PATH & vbCrLf & vbCrLf & "Please create the directory.", vbCritical, "Directory Not Found"
         Set fs = Nothing
         On Error Resume Next ' Try to go back in SAP
         objSess.FindById(ID_BACK_BTN).press ' F3 = Back
         On Error GoTo SapScriptError ' Restore proper error handling
         GoTo ExitPoint ' Exit this sub
    End If
    On Error GoTo SapScriptError ' Restore SAP script error handling
    Set fs = Nothing

    ' --- Export to Excel ---
    objSess.FindById(ID_GRID_CONTEXT).SelectContextMenuItem ID_EXPORT_MENU
    objSess.FindById(ID_EXPORT_POPUP1_OK).press ' Confirm Spreadsheet format
    objSess.FindById(ID_EXPORT_POPUP2_PATH).Text = EXPORT_PATH
    objSess.FindById(ID_EXPORT_POPUP2_FILE).Text = EXPORT_FILENAME
    objSess.FindById(ID_EXPORT_POPUP2_OK).press ' Confirm path/filename

    ' --- Go Back Twice (using Exit button as per original code) ---
    objSess.FindById(ID_EXIT_BTN).press ' Exit/Back
    objSess.FindById(ID_EXIT_BTN).press ' Exit/Back
    
    ' Indicate success for this specific script
    MsgBox "RunGUIScript (MB51 Export) completed successfully.", vbInformation, "Task Complete" ' Message specific to this sub

ExitPoint:
    ' Normal cleanup for this sub
    Set objSBar = Nothing
    Set fs = Nothing
    Exit Sub ' Normal exit from RunGUIScript

SapScriptError:
    ' Local error handling for RunGUIScript
    MsgBox "Error during SAP GUI script execution (RunGUIScript):" & vbCrLf & _
           "Error: " & Err.Number & " - " & Err.Description & vbCrLf & vbCrLf & _
           "Attempting to return to SAP main menu.", vbCritical, "SAP Script Error"
    ' Cleanup attempt within SAP
    On Error Resume Next ' Ignore errors during this cleanup
    If Not objSess Is Nothing Then
        objSess.FindById(ID_CANCEL_BTN).press ' Cancel
        objSess.FindById(ID_BACK_BTN).press  ' Back
        objSess.FindById(ID_BACK_BTN).press  ' Back
    End If
    ' After handling the error locally, exit this sub.
    ' The error state is cleared unless we explicitly raise it again.
    ' The calling sub (StartExtract) will then proceed to its Cleanup section.
    Resume ExitPoint ' Go to local cleanup and exit

End Sub


' --- How to Use ---
' Simply call StartExtract with the target system ID.
' It will handle connection and then automatically call RunGUIScript if successful.
'
' Example:
' Sub TriggerProcess()
'     StartExtract "PEA100" ' Call StartExtract directly
' End Sub
