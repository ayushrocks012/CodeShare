Option Explicit

' --- Global Objects required by both Subs (or across multiple calls) ---
Public objGui      As GuiApplication ' SAP GUI Application object
Public objConn     As GuiConnection  ' SAP GUI Connection object
Public objSess     As GuiSession     ' SAP GUI Session object
Public objSBar     As GuiStatusbar   ' SAP GUI Statusbar object

Sub StartExtract()
    ' --- Constants specific to StartExtract ---
    Const cTARGET_SYSTEM As String = "PEA100"  ' Target SAP System(Client)
    Const cMAX_SESSIONS As Integer = 6         ' Maximum allowed SAP sessions

    ' --- Local Variables for StartExtract ---
    Dim SapGuiAuto As Object          ' For GetObject("SAPGUI")
    Dim W_conn As Object              ' Temp Connection object in loop (use Object for GuiConnection)
    Dim W_Sess As Object              ' Temp Session object in loop (use Object for GuiSession)
    Dim W_Ret As Boolean              ' Flag indicating if a suitable session was found
    Dim Session_Nr As Long            ' Stores the session index found (-1 if not found)
    Dim Session_Nr_All As Long        ' Stores the number of sessions in the relevant connection
    Dim i As Long                     ' Loop counter for Connections
    Dim j As Long                     ' Loop counter for Sessions
    Dim MsgResult As VbMsgBoxResult   ' To store result from MsgBox calls

    On Error GoTo ErrorHandler ' Enable basic error handling

    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual

    W_Ret = False ' Initialize session found flag
    Session_Nr = -1 ' Initialize session number tracker
    Session_Nr_All = 0 ' Initialize session count

    ' Basic check if target system is defined
    If Trim$(cTARGET_SYSTEM) = "" Then
        MsgBox "Target SAP system constant (cTARGET_SYSTEM) is not defined.", vbCritical + vbOKOnly, "Configuration Error"
        GoTo Cleanup
    End If

    ' Check if a valid session object already exists globally and matches the target system
    If Not objSess Is Nothing Then
        If objSess.Info.SystemName & objSess.Info.Client = cTARGET_SYSTEM Then
            ' Check if the session is still alive (basic check)
            On Error Resume Next ' Temporarily ignore error if session is dead
            Dim currentTransaction As String
            currentTransaction = objSess.Info.Transaction
            If Err.Number = 0 Then ' If no error reading transaction, session is likely ok
                 On Error GoTo ErrorHandler ' Restore main error handling
                 W_Ret = True
                 GoTo RunScript ' Use existing session
            Else
                ' Session object exists but is likely invalid/closed, reset it
                Err.Clear
                On Error GoTo ErrorHandler ' Restore main error handling
                Set objSess = Nothing
                Set objConn = Nothing
                Set objSBar = Nothing
                ' Continue to find a new session
            End If
        Else
           ' Global objSess exists but is for a different system, reset it
            Set objSess = Nothing
            Set objConn = Nothing
            Set objSBar = Nothing
            ' Continue to find a new session
        End If
    End If

    ' Get SAP GUI Scripting Engine if not already available
    If objGui Is Nothing Then
        Set SapGuiAuto = GetObject("SAPGUI")
        If SapGuiAuto Is Nothing Then GoTo SapError ' Error if SAP GUI process not found
        Set objGui = SapGuiAuto.GetScriptingEngine
        If objGui Is Nothing Then GoTo SapError ' Error if Scripting Engine cannot be obtained
    End If

    ' Loop through connections and sessions to find a suitable one
    For i = 0 To objGui.Children.Count - 1
        Set W_conn = objGui.Children(i + 0) ' Get connection
        If Not W_conn Is Nothing Then
            Session_Nr_All = W_conn.Children.Count ' Get session count for this connection
            For j = 0 To W_conn.Children.Count - 1
                Set W_Sess = W_conn.Children(j + 0) ' Get session
                If Not W_Sess Is Nothing Then
                    If W_Sess.Info.SystemName & W_Sess.Info.Client = cTARGET_SYSTEM Then
                        ' Found the right system, check if it's a usable session (e.g., at main menu)
                        Select Case W_Sess.Info.Transaction
                            Case "SESSION_MANAGER", "SMEN", "S000" ' Add other idle TCodes if necessary
                                Session_Nr = W_Sess.Info.SessionNumber - 1 ' Store session index (0-based)
                                Set objConn = W_conn ' Set global Connection object
                                Set objSess = W_Sess ' Set global Session object
                                Set objSBar = objSess.FindById("wnd[0]/sbar") ' Set global Status Bar object
                                W_Ret = True
                                GoTo RunScript ' Found a suitable session, exit loops
                            Case Else
                                ' Session is for the correct system but busy or in an unknown state.
                                ' We could potentially store this session in case no idle one is found,
                                ' but current logic prioritizes idle sessions.
                        End Select
                    End If
                End If ' End W_Sess check
            Next j
        End If ' End W_conn check

        ' If we found a connection for the target system but no idle session,
        ' check max sessions for *that* connection. Note: This only checks the LAST
        ' connection matching the system if multiple exist.
        If Session_Nr = -1 And Session_Nr_All = cMAX_SESSIONS Then
            ' Check if ANY session on this connection matched the system, even if not idle
             Dim systemMatchFoundOnConn As Boolean
             systemMatchFoundOnConn = False
             For j = 0 To W_conn.Children.Count - 1
                 Set W_Sess = W_conn.Children(j + 0)
                 If Not W_Sess Is Nothing Then
                     If W_Sess.Info.SystemName & W_Sess.Info.Client = cTARGET_SYSTEM Then
                        systemMatchFoundOnConn = True
                        Exit For
                     End If
                 End If
             Next j

             If systemMatchFoundOnConn Then
                MsgResult = MsgBox("Maximum number of sessions (" & cMAX_SESSIONS & ") reached for system " & cTARGET_SYSTEM & " connection. Cannot continue.", vbCritical + vbOKOnly, "Session Limit Reached")
                GoTo Cleanup
             End If
        End If

    Next i

    ' If loop finishes and no suitable session found
    If Not W_Ret Then
        MsgResult = MsgBox("No suitable idle session found for system " & cTARGET_SYSTEM & "." & vbCrLf & _
                           "Please ensure you are logged into SAP, scripting is enabled, and a session is available at the main menu (SESSION_MANAGER, SMEN, S000).", vbCritical + vbOKOnly, "Session Not Found")
        GoTo Cleanup
    End If

RunScript:
    If W_Ret Then
        ' --- Call the actual SAP automation ---
        RunGUIScript

        ' Optional: Clear the global session object after use if you want StartExtract
        ' to always re-find the session on the next run. Keep it if you want
        ' StartExtract to reuse the existing objSess if called again quickly.
        ' Set objSess = Nothing
        ' Set objConn = Nothing
        ' Set objSBar = Nothing
    End If

Cleanup:
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    Set SapGuiAuto = Nothing ' Release local object
    Set W_conn = Nothing     ' Release loop object
    Set W_Sess = Nothing     ' Release loop object
    Exit Sub ' Normal exit

ErrorHandler: ' Handle errors during setup
    MsgBox "An error occurred during SAP session setup:" & vbCrLf & vbCrLf & _
           "Error Number: " & Err.Number & vbCrLf & _
           "Description: " & Err.Description & vbCrLf & vbCrLf & _
           "Possible causes:" & vbCrLf & _
           "- SAP GUI is not running." & vbCrLf & _
           "- Scripting is disabled in SAP GUI options or by the server." & vbCrLf & _
           "- The SAP system (" & cTARGET_SYSTEM & ") is unavailable.", _
           vbCritical, "SAP Scripting Error"
    Resume Cleanup ' Go to cleanup routine after error

SapError: ' Specific error for GetObject/GetScriptingEngine failure
     MsgBox "Could not connect to SAP GUI Scripting Engine." & vbCrLf & _
            "Please ensure SAP GUI is running and scripting is enabled in RZ11 and SAP GUI Options.", _
            vbCritical, "SAP Scripting Error"
     Resume Cleanup ' Go to cleanup routine after error

End Sub

Public Sub RunGUIScript()
    ' --- Constants specific to RunGUIScript ---
    Const cTRANSACTION As String = "mb51"
    Const cPLANT As String = "1534"
    Const cDATE_LOW As String = "01.03.2025" ' Be mindful of date format expected by SAP
    Const cDATE_HIGH As String = "31.03.2025" ' Be mindful of date format expected by SAP
    Const cLAYOUT As String = "AYUSH_TRY"
    Const cDOWNLOAD_PATH As String = "Z:\Demand\Demand Review\2025\03 Mar 25\SAP H2H Report" ' Ensure this path exists
    Const cDOWNLOAD_FILENAME As String = "H2H Usage Report v4.XLSX" ' Ensure extension matches download format

    On Error GoTo GuiScriptError ' Enable error handling for script steps

    ' Check if objSess is valid before proceeding
    If objSess Is Nothing Then
        MsgBox "SAP Session object is not valid. Cannot run GUI script.", vbCritical, "Script Error"
        Exit Sub
    End If

    ' --- SAP GUI Scripting Steps ---
    objSess.FindById("wnd[0]/tbar[0]/okcd").Text = cTRANSACTION
    objSess.FindById("wnd[0]").sendVKey 0 ' 0 = Enter key

    ' Wait briefly if needed for screen to load (optional, adjust time)
    ' Application.Wait Now + TimeValue("00:00:01")

    objSess.FindById("wnd[0]/usr/ctxtWERKS-LOW").Text = cPLANT
    objSess.FindById("wnd[0]/usr/ctxtBUDAT-LOW").Text = cDATE_LOW
    objSess.FindById("wnd[0]/usr/ctxtBUDAT-HIGH").Text = cDATE_HIGH
    objSess.FindById("wnd[0]/usr/radRFLAT_L").Select ' Select 'Flat List' radiobutton
    objSess.FindById("wnd[0]/usr/ctxtALV_DEF").Text = cLAYOUT ' Set Layout

    objSess.FindById("wnd[0]/tbar[1]/btn[8]").press ' 8 = Execute button (F8)

    ' Wait briefly if needed for report to execute (optional, adjust time)
    ' Application.Wait Now + TimeValue("00:00:03") ' May need longer depending on report

    ' --- Export to Excel ---
    ' Ensure the grid/report screen is active (wnd[0])
    objSess.FindById("wnd[0]/usr/cntlGRID1/shellcont/shell").ContextMenu
    objSess.FindById("wnd[0]/usr/cntlGRID1/shellcont/shell").SelectContextMenuItem "&XXL" ' Spreadsheet...

    ' --- Handle Export Dialog (wnd[1]) ---
    ' Wait for dialog window (optional)
    ' Do While objSess.ActiveWindow.Name <> "wnd[1]"
    '     DoEvents
    ' Loop
    ' Application.Wait Now + TimeValue("00:00:01")

    objSess.FindById("wnd[1]/tbar[0]/btn[0]").press ' Continue (Enter) button on format selection (assuming default Table -> Excel)

    ' --- Handle File Save Dialog (wnd[1] again, potentially different instance ID) ---
     ' It's safer to find the active window if IDs change
     ' Dim exportDialog As Object ' GuiModalWindow
     ' Set exportDialog = objSess.ActiveWindow ' Assuming it becomes the active one
     ' exportDialog.FindById("/usr/ctxtDY_PATH").Text = cDOWNLOAD_PATH
     ' exportDialog.FindById("/usr/ctxtDY_FILENAME").Text = cDOWNLOAD_FILENAME
     ' exportDialog.FindById("/tbar[0]/btn[0]").press ' Generate/Save/Replace Button (often btn[0] or btn[11])

     ' Using fixed IDs as per original code (may be less robust if window IDs change)
     objSess.FindById("wnd[1]/usr/ctxtDY_PATH").Text = cDOWNLOAD_PATH
     objSess.FindById("wnd[1]/usr/ctxtDY_FILENAME").Text = cDOWNLOAD_FILENAME
     objSess.FindById("wnd[1]/tbar[0]/btn[0]").press ' Generate/Save button (Check if btn[0] is correct, might be btn[11] for Replace)

    ' Handle potential "File already exists - Replace?" dialog if necessary (usually btn[0] for Yes/Replace)
    ' On Error Resume Next ' Temporarily ignore error if popup doesn't appear
    ' objSess.FindById("wnd[2]/tbar[0]/btn[0]").press ' Press "Yes" on overwrite prompt if it appears as wnd[2]
    ' On Error GoTo GuiScriptError ' Restore error handling

    ' --- Navigate Back ---
    objSess.FindById("wnd[0]/tbar[0]/btn[15]").press ' 15 = Back button (F3)
    objSess.FindById("wnd[0]/tbar[0]/btn[15]").press ' Press Back again

    Exit Sub ' Normal exit

GuiScriptError:
    MsgBox "An error occurred during SAP GUI script execution:" & vbCrLf & vbCrLf & _
           "Error Number: " & Err.Number & vbCrLf & _
           "Description: " & Err.Description & vbCrLf & vbCrLf & _
           "Check SAP screen state and script logic.", _
           vbCritical, "SAP Scripting Error"
    ' Optionally add cleanup here if needed (e.g., try to navigate back safely)
    ' On Error Resume Next ' Prevent error loop
    ' objSess.FindById("wnd[0]/tbar[0]/btn[15]").press
    ' On Error GoTo 0
End Sub
