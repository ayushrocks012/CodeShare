'@Folder("Forecasting")
Option Explicit

' =================================================================================================================
' --- STANDARD MODULE CODE ---
' The code below goes into a standard module.
' =================================================================================================================
' --- MODULE-LEVEL CONSTANTS ---
Private Const MAIN_SHEET As String = "Main"
Private Const STATUS_SHEET As String = "Product Status"
Private Const DEMAND_SHEET As String = "Demand Forecast"
Private Const HISTORY_SHEET As String = "Historical Sales"
Private Const SUMMARY_SHEET As String = "Summary"
Private Const LOG_SHEET As String = "Log"

' --- PRODUCT STATUSES ---
Private Const STATUS_ACTIVE As String = "Active"
Private Const STATUS_PHASE_IN_OUT As String = "PhaseIn-PhaseOut"
Private Const STATUS_DISCONTINUED As String = "Discontinued"
Private Const STATUS_NEW As String = "New"
Private Const STATUS_UNKNOWN As String = "Unknown"


' =================================================================================================================
' Main Procedure: UpdateForeCast_Click
' =================================================================================================================
Public Sub UpdateForeCast_Click() 'NOTE: This is intentionally Public to be called from a button.
    ' --- 1. SETUP & INITIALIZATION ---
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.Calculation = xlCalculationManual
    Application.StatusBar = "Initializing forecast process..."

    Dim TWB As Workbook, NewWB As Workbook
    Dim MainSheet As Worksheet, WS_Summary As Worksheet, WS_ProductStatus As Worksheet
    Dim WS_DemandForecast As Worksheet, WS_HistoricalSales As Worksheet, WS_Log As Worksheet

    Set TWB = ThisWorkbook
    On Error Resume Next
    Set MainSheet = TWB.Sheets(MAIN_SHEET)
    Set WS_ProductStatus = TWB.Sheets(STATUS_SHEET)
    Set WS_DemandForecast = TWB.Sheets(DEMAND_SHEET)
    Set WS_HistoricalSales = TWB.Sheets(HISTORY_SHEET)
    On Error GoTo 0

    If MainSheet Is Nothing Or WS_ProductStatus Is Nothing Or WS_DemandForecast Is Nothing Or WS_HistoricalSales Is Nothing Then
        MsgBox "One of the required worksheets ('" & MAIN_SHEET & "', '" & STATUS_SHEET & "', '" & DEMAND_SHEET & "', '" & HISTORY_SHEET & "') is missing. Aborting.", vbCritical
        GoTo Cleanup
    End If
    
    ' --- Create Summary and Log sheets ---
    On Error Resume Next
    TWB.Sheets(SUMMARY_SHEET).Delete
    TWB.Sheets(LOG_SHEET).Delete
    On Error GoTo 0
    
    Set WS_Summary = TWB.Sheets.Add(After:=TWB.Sheets(TWB.Sheets.Count))
    WS_Summary.Name = SUMMARY_SHEET
    
    Set WS_Log = TWB.Sheets.Add(After:=TWB.Sheets(TWB.Sheets.Count))
    InitializeLogSheet WS_Log

    ' --- 2. CORE PROCESSING (IN-MEMORY) ---
    Application.StatusBar = "Loading data into memory..."
    Dim StatusData As Variant, HistoryData As Variant
    StatusData = LoadDataToArray(WS_ProductStatus)
    HistoryData = LoadDataToArray(WS_HistoricalSales)
    
    Application.StatusBar = "Building product lifecycle map..."
    Dim LifecycleMap As Object
    Set LifecycleMap = BuildLifecycleMap(StatusData, WS_Log)

    Application.StatusBar = "Creating family sheets..."
    CreateFamilySheets TWB, StatusData, WS_DemandForecast, WS_Summary

    Application.StatusBar = "Processing forecast data..."
    ProcessForecastData TWB, StatusData, HistoryData, WS_DemandForecast, WS_Summary, WS_Log, LifecycleMap

    ' --- 3. FINALIZATION ---
    Application.StatusBar = "Creating final report workbook..."
    Set NewWB = CreateOutputWorkbook(TWB, WS_Summary) 'Pass Summary sheet for final formatting
    
    If Not NewWB Is Nothing Then
        Application.StatusBar = "Saving final report..."
        Dim FilePath As String
        FilePath = TWB.Path & "\Demand ForeCast - " & Format$(Now, "DDMMYYYY_HHMMSS") & ".xlsx"
        NewWB.SaveAs FilePath
        NewWB.Close SaveChanges:=False
    End If

' --- 4. CLEANUP ---
Cleanup:
    Application.StatusBar = False
    Application.Calculation = xlCalculationAutomatic
    If Not MainSheet Is Nothing Then MainSheet.Activate
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    MsgBox "Forecast Update Completed.", vbInformation
End Sub

' =================================================================================================================
' Helper Procedure: CreateFamilySheets
' =================================================================================================================
Private Sub CreateFamilySheets(ByVal TWB As Workbook, ByVal StatusData As Variant, ByVal WS_DemandForecast As Worksheet, ByVal WS_Summary As Worksheet)
    Dim DemandForecastLRow As Long, ProductStatusLRow As Long
    Dim CurrFamilyRow As Long, CurrProductRow As Long
    Dim CurrFamily As String, CurrProductFamily As String
    Dim WS_NewFamily As Worksheet

    DemandForecastLRow = WS_DemandForecast.Cells(WS_DemandForecast.Rows.Count, "A").End(xlUp).Row
    ProductStatusLRow = UBound(StatusData, 1)
    
    SetupSummaryHeaders WS_Summary, StatusData

    For CurrFamilyRow = 2 To DemandForecastLRow
        CurrFamily = Trim$(WS_DemandForecast.Range("A" & CurrFamilyRow).Value)
        
        If Len(CurrFamily) > 0 Then
            On Error Resume Next
            TWB.Sheets(CurrFamily).Delete
            On Error GoTo 0
            
            Set WS_NewFamily = TWB.Sheets.Add(After:=TWB.Sheets(TWB.Sheets.Count))
            WS_NewFamily.Name = CurrFamily
            
            ' *** MODIFIED: Set up headers for the new family sheet, including new Sub-Family column ***
            WS_NewFamily.Range("A1:E1").Value = Array(StatusData(1, 1), StatusData(1, 2), StatusData(1, 3), StatusData(1, 4), StatusData(1, 5))
            WS_NewFamily.Range("F1").Value = "Active/Discontinued"
            WS_NewFamily.Range("G1").Value = "Phase Out Month"
            
            Dim NextFreeRow As Long: NextFreeRow = 2
            For CurrProductRow = 2 To ProductStatusLRow
                CurrProductFamily = LCase$(Trim$(StatusData(CurrProductRow, 1)))
                If CurrProductFamily = LCase$(CurrFamily) Then
                    ' *** MODIFIED: Copy 5 columns of product data, including Sub-Family ***
                    WS_NewFamily.Range("A" & NextFreeRow & ":E" & NextFreeRow).Value = Array(StatusData(CurrProductRow, 1), StatusData(CurrProductRow, 2), StatusData(CurrProductRow, 3), StatusData(CurrProductRow, 4), StatusData(CurrProductRow, 5))
                    NextFreeRow = NextFreeRow + 1
                End If
            Next CurrProductRow
        End If
    Next CurrFamilyRow
End Sub

' =================================================================================================================
' Helper Procedure: SetupSummaryHeaders
' =================================================================================================================
Private Sub SetupSummaryHeaders(ByVal WS_Summary As Worksheet, ByVal StatusData As Variant)
    ' *** MODIFIED: Include Sub-Family in header setup ***
    WS_Summary.Range("A1:E1").Value = Array(StatusData(1, 1), StatusData(1, 2), StatusData(1, 3), StatusData(1, 4), StatusData(1, 5))
    WS_Summary.Range("F1").Value = "Active/Discontinued"
    WS_Summary.Range("G1").Value = "Phase Out Month"
End Sub

' =================================================================================================================
' Helper Procedure: ProcessForecastData
' =================================================================================================================
Private Sub ProcessForecastData(ByVal TWB As Workbook, ByVal StatusData As Variant, ByVal HistoryData As Variant, ByVal WS_DemandForecast As Worksheet, ByVal WS_Summary As Worksheet, ByVal WS_Log As Worksheet, ByVal LifecycleMap As Object)
    Dim WS_CurrentFamily As Worksheet, CurrFamily As String, DemandForecastLRow As Long, CurrFamilyRow As Long
    DemandForecastLRow = WS_DemandForecast.Cells(WS_DemandForecast.Rows.Count, "A").End(xlUp).Row

    For CurrFamilyRow = 2 To DemandForecastLRow
        CurrFamily = Trim$(WS_DemandForecast.Range("A" & CurrFamilyRow).Value)
        Application.StatusBar = "Processing family: " & CurrFamily & "..."
        
        If SheetExists(TWB, CurrFamily) Then
            Set WS_CurrentFamily = TWB.Sheets(CurrFamily)
            CalculateAndFormatFamilySheet WS_CurrentFamily, StatusData, HistoryData, WS_DemandForecast, WS_Log, LifecycleMap
            AppendToSummarySheet WS_CurrentFamily, WS_Summary
            Set WS_CurrentFamily = Nothing
        End If
    Next CurrFamilyRow
End Sub

' =================================================================================================================
' Helper Procedure: CalculateAndFormatFamilySheet
' =================================================================================================================
Private Sub CalculateAndFormatFamilySheet(ByVal WS_CurrentFamily As Worksheet, ByVal StatusData As Variant, ByVal HistoryData As Variant, ByVal WS_DemandForecast As Worksheet, ByVal WS_Log As Worksheet, ByVal LifecycleMap As Object)
    Dim FamilyLRow As Long, FamilyLCol As Long, HistLCol As Long
    Dim ProdGroupSum As Double, FamilySum As Double
    Dim MonthCount As Long
    
    FamilyLCol = WS_CurrentFamily.Cells(1, WS_CurrentFamily.Columns.Count).End(xlToLeft).Column
    MonthCount = GetHistoricalMonthCount(WS_DemandForecast, HistoryData)
    
    ' Prepare headers
    Dim DemandForecastLCol As Long, HeaderRow As Variant
    DemandForecastLCol = WS_DemandForecast.Cells(1, WS_DemandForecast.Columns.Count).End(xlToLeft).Column
    HeaderRow = GetCombinedHeaderRow(WS_DemandForecast, HistoryData, MonthCount, DemandForecastLCol)
    
    ' Add new products from status data to the current family sheet
    AddNewProductsToFamilySheet WS_CurrentFamily, StatusData
    FamilyLRow = WS_CurrentFamily.Cells(WS_CurrentFamily.Rows.Count, "A").End(xlUp).Row
    
    ' --- BUILD OUTPUT ARRAY ---
    Dim OutputArray() As Variant
    ReDim OutputArray(1 To FamilyLRow, 1 To UBound(HeaderRow))
    
    ' Populate static columns and headers in the output array
    Dim r As Long, c As Long
    For c = 1 To UBound(HeaderRow): OutputArray(1, c) = HeaderRow(c): Next c
    For r = 2 To FamilyLRow
        ' *** MODIFIED: Populate 5 static columns (A to E) ***
        For c = 1 To 5
            OutputArray(r, c) = WS_CurrentFamily.Cells(r, c).Value
        Next c
    Next r
    
    ' *** MODIFIED: Historical column start is shifted by 1 ***
    HistLCol = 7 + MonthCount
    Dim DemandData As Variant, DemandDataRow As Variant
    
    ' --- MAIN CALCULATION LOOP (IN-MEMORY) ---
    For r = 2 To FamilyLRow
        Dim CurrProduct As String, CurrProductFamily As String, CurrGroupID As String
        CurrProductFamily = OutputArray(r, 1) 'Family is in Col A
        ' *** MODIFIED: Get Group ID directly from the Sub-Family column (Col B) ***
        CurrGroupID = OutputArray(r, 2)
        CurrProduct = OutputArray(r, 5) 'Product ID is now in Col E
        
        Dim CurrentLifecycle As cProductLifecycle
        If LifecycleMap.Exists(CurrProduct) Then Set CurrentLifecycle = LifecycleMap.Item(CurrProduct) Else Set CurrentLifecycle = New cProductLifecycle
        
        OutputArray(r, 6) = CurrentLifecycle.Status 'Status in Col F
        If CurrentLifecycle.PhaseOutDate > 0 Then OutputArray(r, 7) = CurrentLifecycle.PhaseOutDate 'Phase out date in Col G

        Dim HistoricSalesRow As Variant
        ' *** MODIFIED: Pass correct historical column count (+5 for new layout) ***
        HistoricSalesRow = GetHistoricalDataRow(CurrProduct, HistoryData, MonthCount + 5)
        ' *** MODIFIED: Start placing historical data in column H (index 8) ***
        For c = 1 To UBound(HistoricSalesRow): OutputArray(r, c + 7) = HistoricSalesRow(c): Next c
        
        ' *** MODIFIED: Get sum using explicit GroupID. Pass correct historical column count (+5) ***
        ProdGroupSum = GetHistoricalSum(CurrProductFamily, CurrGroupID, HistoryData, MonthCount + 5)
        FamilySum = GetHistoricalFamilySum(CurrProductFamily, HistoryData, LifecycleMap, MonthCount + 5)
        
        DemandDataRow = Application.Match(CurrProductFamily, WS_DemandForecast.Columns(1), 0)
        
        If IsNumeric(DemandDataRow) Then
            DemandData = WS_DemandForecast.Range(WS_DemandForecast.Cells(DemandDataRow, 2), WS_DemandForecast.Cells(DemandDataRow, DemandForecastLCol)).Value
            For c = (HistLCol + 1) To UBound(OutputArray, 2)
                Dim ForecastValue As Double
                ForecastValue = CalculateForecastValue(CurrentLifecycle, OutputArray(1, c), ProdGroupSum, FamilySum, DemandData(1, c - HistLCol))
                OutputArray(r, c) = ForecastValue
            Next c
        End If
    Next r
    
    ' --- WRITE OUTPUT TO SHEET ---
    WS_CurrentFamily.Cells.Clear
    WS_CurrentFamily.Range("A1").Resize(UBound(OutputArray, 1), UBound(OutputArray, 2)).Value = OutputArray
    
    ' --- CALL ENHANCED FORMATTING ---
    FormatEnhancedSheet WS_CurrentFamily
End Sub


' =================================================================================================================
' Helper Function: CalculateForecastValue
' =================================================================================================================
Private Function CalculateForecastValue(ByVal Lifecycle As cProductLifecycle, ByVal ForecastDate As Date, ByVal ProdGroupSum As Double, ByVal FamilySum As Double, ByVal FamilyDemand As Double) As Double
    Dim BaseForecast As Double: BaseForecast = 0
    If FamilySum > 0 Then BaseForecast = (ProdGroupSum * FamilyDemand) / FamilySum

    Dim FinalForecast As Double: FinalForecast = 0

    Select Case Lifecycle.Status
        Case STATUS_ACTIVE, STATUS_NEW
            FinalForecast = BaseForecast
        Case STATUS_PHASE_IN_OUT
            If Lifecycle.PhaseOutDate > 0 And ForecastDate >= Lifecycle.PhaseOutDate Then
                If Month(ForecastDate) = Month(Lifecycle.PhaseOutDate) And Year(ForecastDate) = Year(Lifecycle.PhaseOutDate) Then
                    FinalForecast = BaseForecast * Lifecycle.PhaseOutPercent
                Else
                    FinalForecast = 0
                End If
            Else
                FinalForecast = BaseForecast
            End If
        Case STATUS_DISCONTINUED
             If Lifecycle.PhaseOutDate > 0 And ForecastDate >= Lifecycle.PhaseOutDate Then FinalForecast = 0 Else FinalForecast = BaseForecast
    End Select

    If Lifecycle.IsPhasingIn Then
        If ForecastDate < Lifecycle.PhaseInDate Then
            FinalForecast = 0
        ElseIf Month(ForecastDate) = Month(Lifecycle.PhaseInDate) And Year(ForecastDate) = Year(Lifecycle.PhaseInDate) Then
            FinalForecast = BaseForecast * Lifecycle.PhaseInPercent
        End If
    End If

    CalculateForecastValue = FinalForecast
End Function

' =================================================================================================================
' Helper Procedure: AddNewProductsToFamilySheet
' =================================================================================================================
Private Sub AddNewProductsToFamilySheet(ByVal WS_CurrentFamily As Worksheet, ByVal StatusData As Variant)
    Dim ProductStatusLRow As Long, FamilyLRow As Long, CurrProdRow As Long
    Dim CurrProduct As String, CurrProductFamily As String, ActiveType As String
    ProductStatusLRow = UBound(StatusData, 1)
    
    For CurrProdRow = 2 To ProductStatusLRow
        CurrProductFamily = LCase$(Trim$(StatusData(CurrProdRow, 1)))
        ' *** MODIFIED: Active Type / Status is now in column F (index 6) ***
        ActiveType = Trim$(StatusData(CurrProdRow, 6))
        ' *** MODIFIED: Product ID (I-S-D) is now in column E (index 5) ***
        CurrProduct = Trim$(StatusData(CurrProdRow, 5))
        
        If CurrProductFamily = LCase$(WS_CurrentFamily.Name) And ActiveType = STATUS_NEW Then
            Dim Found As Range
            ' *** MODIFIED: Search for the product in column E instead of D ***
            Set Found = WS_CurrentFamily.Range("E:E").Find(What:=CurrProduct, LookIn:=xlValues, LookAt:=xlWhole)
            If Found Is Nothing Then
                FamilyLRow = WS_CurrentFamily.Cells(WS_CurrentFamily.Rows.Count, "A").End(xlUp).Row + 1
                ' *** MODIFIED: Write 5 columns of data for the new product ***
                WS_CurrentFamily.Range("A" & FamilyLRow & ":E" & FamilyLRow).Value = Array(StatusData(CurrProdRow, 1), StatusData(CurrProdRow, 2), StatusData(CurrProdRow, 3), StatusData(CurrProdRow, 4), StatusData(CurrProdRow, 5))
            End If
        End If
    Next CurrProdRow
End Sub

' =================================================================================================================
' Helper Procedure: FormatEnhancedSheet
' =================================================================================================================
Private Sub FormatEnhancedSheet(ByVal WS As Worksheet)
    If WS.Cells(1, 1).Value = "" Then Exit Sub ' Don't format empty sheets

    Dim LastRow As Long, LastCol As Long, TotalRow As Long
    Dim HistLCol As Long, i As Long, r As Long
    
    LastRow = WS.Cells(WS.Rows.Count, "A").End(xlUp).Row
    LastCol = WS.Cells(1, WS.Columns.Count).End(xlToLeft).Column
    TotalRow = LastRow + 1

    ' --- 1. ADD TOTALS ---
    ' *** MODIFIED: Sum from column H (index 8) onwards ***
    For i = 8 To LastCol
        WS.Cells(TotalRow, i).Value = Application.WorksheetFunction.Sum(WS.Range(WS.Cells(2, i), WS.Cells(LastRow, i)))
    Next i
    WS.Cells(TotalRow, 1).Value = "TOTAL"

    ' --- 2. ENHANCED AESTHETICS ---
    Dim HeaderRange As Range, DataRange As Range, TotalRange As Range, FullRange As Range
    Set HeaderRange = WS.Range(WS.Cells(1, 1), WS.Cells(1, LastCol))
    Set DataRange = WS.Range(WS.Cells(2, 1), WS.Cells(LastRow, LastCol))
    Set TotalRange = WS.Range(WS.Cells(TotalRow, 1), WS.Cells(TotalRow, LastCol))
    Set FullRange = WS.Range(WS.Cells(1, 1), WS.Cells(TotalRow, LastCol))
    
    FullRange.Interior.ColorIndex = xlNone
    FullRange.Borders.LineStyle = xlNone
    FullRange.Font.Bold = False
    
    With HeaderRange
        .Font.Bold = True
        .Font.Color = vbWhite
        .Interior.Color = RGB(47, 85, 151) ' Dark Blue
        .VerticalAlignment = xlCenter
    End With
    
    With TotalRange
        .Font.Bold = True
        .Interior.Color = RGB(221, 235, 247) ' Light Blue
    End With
    
    For r = 2 To LastRow
        If r Mod 2 = 0 Then
            WS.Range(WS.Cells(r, 1), WS.Cells(r, LastCol)).Interior.Color = RGB(242, 242, 242)
        End If
    Next r
    
    HistLCol = GetLastHistoricalColumn(WS)
    ' *** MODIFIED: Historical data now starts before column H (index 8) ***
    If HistLCol > 7 Then
        ' *** MODIFIED: Historical data range starts at column H (index 8) ***
        WS.Range(WS.Cells(2, 8), WS.Cells(LastRow, HistLCol)).Interior.Color = RGB(220, 220, 220)
        With WS.Range(WS.Cells(1, HistLCol), WS.Cells(TotalRow, HistLCol)).Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .Color = RGB(47, 85, 151) ' Dark Blue
            .Weight = xlMedium
        End With
    End If
    
    FullRange.Borders.LineStyle = xlContinuous
    FullRange.Borders.Weight = xlThin
    FullRange.Borders.Color = RGB(210, 210, 210)
    
    ' *** MODIFIED: Number formatting starts at column H (index 8) ***
    WS.Range(WS.Cells(2, 8), WS.Cells(TotalRow, LastCol)).NumberFormat = "_(* #,##0_);_(* (#,##0);_(* ""-""??_);_(@_)"
    WS.Range(WS.Cells(1, 8), WS.Cells(1, LastCol)).NumberFormat = "mmm-yy"
    
    ' --- 3. COLUMN WIDTH AND FREEZE PANES ---
    WS.Cells.EntireColumn.AutoFit
    WS.Activate
    WS.Range("A2").Select
    ActiveWindow.FreezePanes = True
End Sub


' =================================================================================================================
' Helper Procedure: AppendToSummarySheet
' =================================================================================================================
Private Sub AppendToSummarySheet(ByVal WS_Family As Worksheet, ByVal WS_Summary As Worksheet)
    Dim FamilyLRow As Long, FamilyLCol As Long
    Dim SummaryLRow As Long
    
    FamilyLRow = WS_Family.Cells(WS_Family.Rows.Count, "A").End(xlUp).Row - 1 ' Exclude total row
    If FamilyLRow < 2 Then Exit Sub
    
    FamilyLCol = WS_Family.Cells(1, WS_Family.Columns.Count).End(xlToLeft).Column
    SummaryLRow = WS_Summary.Cells(WS_Summary.Rows.Count, "A").End(xlUp).Row
    
    ' *** MODIFIED: Check for headers in column H (index 8) ***
    If IsEmpty(WS_Summary.Range("H1").Value) Then
        WS_Family.Range("H1", WS_Family.Cells(1, FamilyLCol)).Copy WS_Summary.Range("H1")
    End If
    
    Dim FamilyData As Variant
    FamilyData = WS_Family.Range("A2", WS_Family.Cells(FamilyLRow, FamilyLCol)).Value
    WS_Summary.Range("A" & SummaryLRow + 1).Resize(UBound(FamilyData, 1), UBound(FamilyData, 2)).Value = FamilyData
End Sub

' =================================================================================================================
' Lifecycle Mapping Function (In-Memory)
' =================================================================================================================
Private Function BuildLifecycleMap(ByVal StatusData As Variant, ByVal WS_Log As Worksheet) As Object
    Dim r As Long
    Dim ProductID As String
    Dim productKey As Variant
    Dim TempLifecycle As cProductLifecycle
    Dim LifecycleDict As Object: Set LifecycleDict = CreateObject("Scripting.Dictionary")
    
    ' First pass: Create all product objects
    For r = 2 To UBound(StatusData, 1)
        ' *** MODIFIED: Product ID is now in column E (index 5) ***
        ProductID = Trim$(StatusData(r, 5))
        If Len(ProductID) > 0 And Not LifecycleDict.Exists(ProductID) Then
            Set TempLifecycle = New cProductLifecycle
            With TempLifecycle
                .ProductID = ProductID
                ' *** MODIFIED: Read properties from new column indices ***
                .Status = Trim$(StatusData(r, 6)) ' Status is in Col F
                Dim PhaseOutDate As Variant: PhaseOutDate = StatusData(r, 7) ' Phase Out Date is in Col G
                Dim PhaseOutPercent As Variant: PhaseOutPercent = StatusData(r, 8) ' Phase Out % is in Col H
                .SupersededByProductID = Trim$(StatusData(r, 9)) ' Superseded By is in Col I

                If .Status = STATUS_PHASE_IN_OUT Or .Status = STATUS_DISCONTINUED Then
                    .IsPhasingOut = True
                    If IsDate(PhaseOutDate) Then .PhaseOutDate = CDate(PhaseOutDate)
                    If IsNumeric(PhaseOutPercent) Then .PhaseOutPercent = CDbl(PhaseOutPercent)
                End If
            End With
            LifecycleDict.Add ProductID, TempLifecycle
        End If
    Next r

    ' Second pass: Link phasing-in products to their predecessors
    For Each productKey In LifecycleDict.Keys
        Set TempLifecycle = LifecycleDict.Item(productKey)
        If TempLifecycle.IsPhasingOut And Len(TempLifecycle.SupersededByProductID) > 0 Then
            If LifecycleDict.Exists(TempLifecycle.SupersededByProductID) Then
                Dim SuccessorLifecycle As cProductLifecycle
                Set SuccessorLifecycle = LifecycleDict.Item(TempLifecycle.SupersededByProductID)
                With SuccessorLifecycle
                    .IsPhasingIn = True
                    .ReplacesProductID = TempLifecycle.ProductID
                    .PhaseInDate = TempLifecycle.PhaseOutDate
                    .PhaseInPercent = 1 - TempLifecycle.PhaseOutPercent
                End With
            Else
                WriteToLog WS_Log, "Warning", "Product '" & TempLifecycle.ProductID & "' is set to be superseded by '" & TempLifecycle.SupersededByProductID & "', but the successor product was not found in '" & STATUS_SHEET & "'."
            End If
        End If
    Next productKey

    Set BuildLifecycleMap = LifecycleDict
End Function

' =================================================================================================================
' Data Retrieval Helper Functions (In-Memory)
' =================================================================================================================
Private Function GetHistoricalDataRow(ByVal ProductName As String, ByVal HistoryData As Variant, ByVal HistLCol As Long) As Variant
    Dim r As Long, c As Long
    Dim Result() As Variant
    ' *** MODIFIED: Offset is now 5 due to new column layout (A-E are info) ***
    ReDim Result(1 To HistLCol - 5)

    For r = 2 To UBound(HistoryData, 1)
        ' *** MODIFIED: Product Name is in column E (index 5) ***
        If Trim$(HistoryData(r, 5)) = ProductName Then
            ' *** MODIFIED: Historical data starts in column F (index 6) ***
            For c = 6 To HistLCol
                Result(c - 5) = HistoryData(r, c)
            Next c
            GetHistoricalDataRow = Result
            Exit Function
        End If
    Next r
    GetHistoricalDataRow = Result
End Function

Private Function GetHistoricalSum(ByVal FamilyName As String, ByVal GroupID As String, ByVal HistoryData As Variant, ByVal HistLCol As Long) As Double
    Dim TotalSum As Double, i As Long, r As Long
    Dim CurrentGroupID As String, CurrentFamily As String
    TotalSum = 0
    For r = 2 To UBound(HistoryData, 1)
        CurrentFamily = UCase$(Trim$(HistoryData(r, 1)))
        ' *** MODIFIED: Get Group ID directly from Sub-Family column B (index 2) ***
        CurrentGroupID = Trim$(HistoryData(r, 2))
        
        ' *** MODIFIED: Match on explicit GroupID from data, not derived ID ***
        If CurrentGroupID = GroupID And CurrentFamily = UCase$(FamilyName) Then
            ' *** MODIFIED: Historical data now starts in column F (index 6) ***
            For i = 6 To HistLCol
                TotalSum = TotalSum + Val(HistoryData(r, i))
            Next i
        End If
    Next r
    GetHistoricalSum = TotalSum
End Function

Private Function GetHistoricalFamilySum(ByVal FamilyName As String, ByVal HistoryData As Variant, ByVal LifecycleMap As Object, ByVal HistLCol As Long) As Double
    Dim TotalSum As Double, r As Long, c As Long
    Dim HSProduct As String, HSFamily As String
    TotalSum = 0
    For r = 2 To UBound(HistoryData, 1)
        HSFamily = LCase$(Trim$(HistoryData(r, 1)))
        If HSFamily = LCase$(FamilyName) Then
            ' *** MODIFIED: Product ID is now in column E (index 5) ***
            HSProduct = Trim$(HistoryData(r, 5))
            Dim HSLifecycle As cProductLifecycle
            If LifecycleMap.Exists(HSProduct) Then Set HSLifecycle = LifecycleMap.Item(HSProduct)
            
            If Not HSLifecycle Is Nothing Then
                ' *** MODIFIED: Historical data starts in column F (index 6) ***
                For c = 6 To HistLCol
                    Dim IncludeSale As Boolean: IncludeSale = False
                    If HSLifecycle.Status <> STATUS_DISCONTINUED Then
                        IncludeSale = True
                    Else
                        If HSLifecycle.PhaseOutDate > 0 And IsDate(HistoryData(1, c)) Then
                                If CDate(HistoryData(1, c)) < HSLifecycle.PhaseOutDate Then IncludeSale = True
                        Else
                            IncludeSale = True
                        End If
                    End If
                    If IncludeSale Then TotalSum = TotalSum + Val(HistoryData(r, c))
                Next c
            End If
            Set HSLifecycle = Nothing
        End If
    Next r
    GetHistoricalFamilySum = TotalSum
End Function

' =================================================================================================================
' Utility Functions
' =================================================================================================================
Private Function LoadDataToArray(ByVal WS As Worksheet) As Variant
    Dim LRow As Long, LCol As Long
    LRow = WS.Cells(WS.Rows.Count, "A").End(xlUp).Row
    LCol = WS.Cells(1, WS.Columns.Count).End(xlToLeft).Column
    If LRow > 1 And LCol > 1 Then
        LoadDataToArray = WS.Range(WS.Cells(1, 1), WS.Cells(LRow, LCol)).Value
    Else
        Dim TempArray(1 To 1, 1 To 1) As Variant
        TempArray(1, 1) = ""
        LoadDataToArray = TempArray
    End If
End Function

Private Function GetCombinedHeaderRow(ByVal WS_Demand As Worksheet, ByVal HistoryData As Variant, ByVal MonthCount As Long, ByVal DemandLCol As Long) As Variant
    Dim HistHeaders() As Variant, DemandHeaders() As Variant
    Dim r As Long, c As Long
    ReDim HistHeaders(1 To MonthCount)
    ' *** MODIFIED: Historical headers start at column F (index 6) ***
    For c = 1 To MonthCount: HistHeaders(c) = HistoryData(1, c + 5): Next c
    
    DemandHeaders = WS_Demand.Range(WS_Demand.Cells(1, 2), WS_Demand.Cells(1, DemandLCol)).Value
    
    Dim Combined() As Variant
    ' *** MODIFIED: Combined array is now 1 larger for the new column ***
    ReDim Combined(1 To 7 + MonthCount + (DemandLCol - 1))
    ' *** MODIFIED: Shifted header assignments to make room for Sub-Family ***
    Combined(1) = "Family": Combined(2) = "Sub-Family": Combined(3) = "Local Item Nbr": Combined(4) = "Desc": Combined(5) = "I-S-D": Combined(6) = "Active/Discontinued": Combined(7) = "Phase Out Month"
    For c = 1 To UBound(HistHeaders): Combined(c + 7) = HistHeaders(c): Next c
    For c = 1 To UBound(DemandHeaders, 2): Combined(c + 7 + MonthCount) = DemandHeaders(1, c): Next c
    GetCombinedHeaderRow = Combined
End Function

Private Function GetHistoricalMonthCount(ByVal WS_Demand As Worksheet, ByVal HistoryData As Variant) As Long
    Dim HistLCol As Long, CurrCol As Long, Count As Long
    HistLCol = UBound(HistoryData, 2)
    Count = 0
    ' *** MODIFIED: Loop for historical months starts at column F (index 6) ***
    For CurrCol = 6 To HistLCol
        If IsDate(WS_Demand.Cells(1, 2).Value) And IsDate(HistoryData(1, CurrCol)) Then
            If CDate(WS_Demand.Cells(1, 2).Value) > CDate(HistoryData(1, CurrCol)) Then Count = Count + 1 Else Exit For
        End If
    Next CurrCol
    GetHistoricalMonthCount = Count
End Function

Private Function GetLastHistoricalColumn(ByVal WS As Worksheet) As Long
    Dim LastCol As Long, i As Long
    ' *** MODIFIED: Monthly data now starts in column H (index 8) ***
    Dim FirstForecastCol As Long: FirstForecastCol = 8
    
    LastCol = WS.Cells(1, WS.Columns.Count).End(xlToLeft).Column

    ' Find the first column with a date format, which marks the start of historical/forecast data
    Dim FirstDateCol As Long: FirstDateCol = 0
    For i = FirstForecastCol To LastCol
        If IsDate(WS.Cells(1, i).Value) Then
            FirstDateCol = i
            Exit For
        End If
    Next i
    
    ' If no date columns found, return the last column
    If FirstDateCol = 0 Then
        GetLastHistoricalColumn = LastCol
        Exit Function
    End If
    
    ' Determine the start date of the demand forecast from the Demand Forecast sheet
    Dim DemandForecastStartDate As Date
    On Error Resume Next
    DemandForecastStartDate = CDate(ThisWorkbook.Sheets(DEMAND_SHEET).Cells(1, 2).Value)
    On Error GoTo 0

    If Not IsDate(DemandForecastStartDate) Then
       GetLastHistoricalColumn = LastCol
       Exit Function
    End If

    ' *** MODIFIED: Default last historical column is now G (index 7) ***
    GetLastHistoricalColumn = 7
    For i = FirstForecastCol To LastCol
        If IsDate(WS.Cells(1, i).Value) Then
            If CDate(WS.Cells(1, i).Value) < DemandForecastStartDate Then
                 GetLastHistoricalColumn = i
            Else
                 Exit For
            End If
        End If
    Next i
End Function

Private Function SheetExists(ByVal WB As Workbook, ByVal SheetName As String) As Boolean
    Dim WS As Worksheet
    On Error Resume Next
    Set WS = WB.Sheets(SheetName)
    On Error GoTo 0
    SheetExists = Not WS Is Nothing
End Function

Private Function CreateOutputWorkbook(ByVal TWB As Workbook, ByVal WS_Summary As Worksheet) As Workbook
    Dim WB As Workbook, WS As Worksheet
    Dim SheetNames As Object: Set SheetNames = CreateObject("System.Collections.ArrayList")

    Dim SummaryLastRow As Long
    SummaryLastRow = WS_Summary.Cells(WS_Summary.Rows.Count, "A").End(xlUp).Row
    If SummaryLastRow > 1 Then
        Dim SummaryLastCol As Long
        SummaryLastCol = WS_Summary.Cells(1, WS_Summary.Columns.Count).End(xlToLeft).Column
        ' *** MODIFIED: Sort key is now column E (I-S-D) ***
        WS_Summary.Range("A1", WS_Summary.Cells(SummaryLastRow, SummaryLastCol)).Sort Key1:=WS_Summary.Range("E2"), Order1:=xlAscending, Header:=xlYes
        FormatEnhancedSheet WS_Summary
    End If
    
    For Each WS In TWB.Worksheets
        Select Case WS.Name
            Case MAIN_SHEET, STATUS_SHEET, HISTORY_SHEET, DEMAND_SHEET, LOG_SHEET
                ' Do not move these sheets
            Case Else
                SheetNames.Add WS.Name
        End Select
    Next WS
    
    If SheetNames.Count = 0 Then Set CreateOutputWorkbook = Nothing: Exit Function
    
    TWB.Sheets(SheetNames.ToArray).Move
    Set WB = ActiveWorkbook
    
    On Error Resume Next
    WB.Sheets(SUMMARY_SHEET).Activate
    On Error GoTo 0

    Set CreateOutputWorkbook = WB
End Function


Private Sub InitializeLogSheet(ByVal WS As Worksheet)
    WS.Name = LOG_SHEET
    With WS.Range("A1:C1")
        .Value = Array("Timestamp", "Type", "Message")
        .Font.Bold = True
    End With
    WS.Columns("A:C").AutoFit
End Sub

Private Sub WriteToLog(ByVal WS As Worksheet, ByVal LogType As String, ByVal Message As String)
    Dim NextRow As Long
    NextRow = WS.Cells(WS.Rows.Count, "A").End(xlUp).Row + 1
    WS.Cells(NextRow, "A").Value = Now
    WS.Cells(NextRow, "B").Value = LogType
    WS.Cells(NextRow, "C").Value = Message
End Sub
