Option Explicit

' --- Windows API Declaration for Sleep Function ---
' Used for pausing execution briefly to allow SAP GUI to update
#If VBA7 Then
    Public Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As LongPtr)
#Else
    Public Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
#End If

' --- Global Objects required across calls ---
' These hold the connection to the SAP GUI Scripting Engine and the specific session
' *** USING EARLY BINDING - REQUIRES REFERENCE TO "SAP GUI Scripting API" Library ***
Public objGui       As GuiApplication
Public objConn      As GuiConnection
Public objSess      As GuiSession
Public objSBar      As GuiStatusbar ' Optional: To read status bar messages

' //========================================================================
' // Sub: StartExtract
' // Purpose: Main entry point. Handles all SAP connection/session logic.
' //          Calls RunGUIScript to perform the actual MM03 task.
' //========================================================================
Public Sub StartExtract()

    ' --- CONFIGURATION CONSTANTS ---
    ' Adjust these values for your specific SAP system
    Const cTARGET_SYSTEM_ID_CLIENT As String = "PEA100" ' SystemID+Client (e.g., "PRD100")
    Const cTARGET_SYSTEM_DESCRIPTION As String = "9A. Symphony ECC Production" ' EXACT Description from SAP Logon Pad
    Const cSAP_LOGON_PATH As String = "C:\Program Files (x86)\SAP\FrontEnd\SAPgui\saplogon.exe" ' Path to saplogon.exe
    Const cMAX_SESSIONS As Integer = 6 ' Maximum allowed sessions for the system
    Const cLOGON_TIMEOUT_SECONDS As Long = 60 ' Timeout for SSO logon attempt
    Const cSHORT_WAIT_MS As Long = 1000 ' Standard short wait time (ms)
    Const cMEDIUM_WAIT_MS As Long = 3000 ' Wait after potentially slow actions like /o (ms)
    Const cLONG_WAIT_MS As Long = 5000 ' Longer wait if needed (ms)
    Const cSESSION_CHECK_ATTEMPTS As Integer = 20 ' Number of times to check for new session after /o
    Const cSESSION_CHECK_INTERVAL_MS As Long = 1000 ' Wait between session count checks (ms)

    ' --- Local Variables ---
    Dim SapGuiAuto As Object ' Late binding for GetObject("SAPGUI")
    Dim TargetConn As GuiConnection ' Connection object matching target system
    Dim W_conn As GuiConnection ' Loop variable for connections
    Dim W_Sess As GuiSession ' Loop variable for sessions
    Dim FirstFoundSess As GuiSession ' First valid session found on target connection
    Dim NewSess As GuiSession ' Newly created session object (after /o)
    Dim TargetSessSSO As GuiSession ' Session object obtained via SSO
    Dim SessionObtained As Boolean ' Flag: True if a usable session is found/created
    Dim Session_Nr_All_Before As Long ' Store session count before /o attempt
    Dim Session_Nr_All_After As Long  ' Store session count after /o attempt
    Dim i As Long ' Loop counter for connections
    Dim j As Long ' Loop counter for sessions
    Dim highestSessNum As Long ' Highest session number found after /o
    Dim currentSessNum As Long ' Loop variable for session number check
    Dim MsgResult As VbMsgBoxResult ' Result of MsgBox calls
    Dim currentTransaction As String ' T-code of a session being checked
    Dim foundConnection As Boolean ' Flag: True if a connection to the target system exists
    Dim attempts As Integer ' Counter for retry loops (GetObject, session count check)
    Dim startTime As Single ' Timer for timeouts
    Dim popupWnd As GuiModalWindow ' To handle popups during /o
    Dim tempSysName As String, tempClient As String, tempTCode As String ' For checking existing global session
    Dim sessInfoErr As Long ' Error code when checking existing global session
    Dim sysInfoCheck As String ' For checking connection system info
    Dim infoErr As Long ' Error code when checking connection system info
    Dim idleCheckTCode As String ' For checking idle session transaction
    Dim idleErr As Long ' Error code when checking idle session transaction
    Dim getObjectErrNum As Long ' Error code for GetObject("SAPGUI")
    Dim popupErr As Long ' Error code when checking for /o popup
    Dim countErr As Long ' Error code when checking session count after /o
    Dim getObjErrSso As Long ' Error code for GetObject during SSO
    Dim shellResult As Variant ' Result of Shell command
    Dim shellErr As Long ' Error code for Shell command
    Dim shellDesc As String ' Error description for Shell command
    Dim openConnErr As Long ' Error code for OpenConnection
    Dim openConnDesc As String ' Error description for OpenConnection
    Dim sessReadyErr As Long ' Error code when waiting for SSO session ready
    Dim loggedInSys As String ' System info after SSO login
    Dim sysCheckErr As Long ' Error code when verifying system after SSO

    ' --- Mark Start of Execution & Initialize ---
    Debug.Print vbCrLf & "====================================================="
    Debug.Print "   *** NEW RUN START: StartExtract *** (" & Format(Now, "yyyy-mm-dd hh:nn:ss") & ")"
    Debug.Print "====================================================="

    On Error GoTo ErrorHandler ' Set main error handler

    ' --- Prepare Excel Environment ---
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.StatusBar = "Connecting to SAP..." ' Initial status

    ' --- Initialize Flags and Objects ---
    SessionObtained = False
    foundConnection = False
    Set TargetConn = Nothing
    Set FirstFoundSess = Nothing

    ' --- Log Configuration ---
    Debug.Print "Target System (ID+Client for Find): '" & cTARGET_SYSTEM_ID_CLIENT & "'"
    Debug.Print "Target System (Description for SSO Login): '" & cTARGET_SYSTEM_DESCRIPTION & "'"
    Debug.Print "SAP Logon Path: '" & cSAP_LOGON_PATH & "'"
    Debug.Print "Max Sessions: " & cMAX_SESSIONS
    Debug.Print "SSO Logon Timeout: " & cLOGON_TIMEOUT_SECONDS & "s"
    Debug.Print "-----------------------------------------------------"

    ' --- Basic Configuration Check ---
    If Trim$(cTARGET_SYSTEM_ID_CLIENT) = "" Or Trim$(cTARGET_SYSTEM_DESCRIPTION) = "" Then
        MsgBox "Config Error: Target system constants (cTARGET_SYSTEM_ID_CLIENT / cTARGET_SYSTEM_DESCRIPTION) not defined in VBA code.", vbCritical
        GoTo Cleanup ' Abort if configuration is missing
    End If

    ' --- STEP 1: Check Existing Global Session ---
    ' If a valid session object from a previous run exists, reuse it.
    Debug.Print "STEP 1: Checking for existing global session object (objSess)..."
    If Not objSess Is Nothing Then
        Debug.Print "  - Global objSess exists. Checking validity for system '" & cTARGET_SYSTEM_ID_CLIENT & "'..."
        On Error Resume Next ' Temporarily ignore errors while checking session info
        tempSysName = objSess.Info.SystemName
        tempClient = objSess.Info.Client
        tempTCode = objSess.Info.Transaction ' Check if session responds by getting T-code
        sessInfoErr = Err.Number ' Capture potential error
        Err.Clear ' Clear error flag
        On Error GoTo ErrorHandler ' Restore main error handler

        If sessInfoErr = 0 Then ' If no error occurred accessing session info
            If tempSysName & tempClient = cTARGET_SYSTEM_ID_CLIENT Then
                ' Session is valid and for the correct system
                Debug.Print "  - SUCCESS: Global objSess is valid and matches target system."
                ' Ensure other global objects are also set
                If objConn Is Nothing Then Set objConn = objSess.Parent: Debug.Print "  - Set global objConn from objSess.Parent."
                If objSBar Is Nothing Then
                    On Error Resume Next ' Try to get status bar, ignore error if it fails
                    Set objSBar = objSess.FindById("wnd[0]/sbar")
                    On Error GoTo ErrorHandler
                    Debug.Print "  - Set global objSBar from objSess " & IIf(objSBar Is Nothing, "(Failed)", "(Success)") & "."
                End If
                SessionObtained = True
                Debug.Print "  - Proceeding with existing global session #" & objSess.Info.SessionNumber
                GoTo RunMM03Script ' Jump directly to executing the MM03 steps
            Else
                 ' Session is valid but for the WRONG system
                 Debug.Print "  - Global objSess is for wrong system ('" & tempSysName & tempClient & "'). Clearing globals."
                 Set objSess = Nothing: Set objConn = Nothing: Set objSBar = Nothing: Set objGui = Nothing
            End If
        Else
            ' Session object exists but is invalid (e.g., closed)
            Debug.Print "  - Global objSess is invalid/closed (Error accessing Info: " & sessInfoErr & "). Clearing globals."
            Set objSess = Nothing: Set objConn = Nothing: Set objSBar = Nothing: Set objGui = Nothing
        End If
    Else
        ' No existing global session object
        Debug.Print "  - Global objSess is Nothing."
    End If

    ' --- STEP 2: Get SAP GUI Scripting Engine ---
    ' If no valid global session, ensure we have the main SAP GUI Application object
    Debug.Print "-----------------------------------------------------"
    Debug.Print "STEP 2: Getting SAP GUI Scripting Engine..."
    If objGui Is Nothing Then
        Debug.Print "  - Global objGui is Nothing. Attempting GetObject(""SAPGUI"")..."
        On Error Resume Next ' Try to get existing SAP GUI process
        Set SapGuiAuto = GetObject("SAPGUI")
        getObjectErrNum = Err.Number
        Err.Clear
        On Error GoTo ErrorHandler

        If getObjectErrNum = 0 And Not SapGuiAuto Is Nothing Then
            ' Found running SAP GUI, get the scripting engine
            Debug.Print "  - GetObject(""SAPGUI"") successful. Attempting GetScriptingEngine..."
            Set objGui = SapGuiAuto.GetScriptingEngine
            If objGui Is Nothing Then
                MsgBox "Error: Could not get Scripting Engine from SAPGUI object. Is scripting enabled in SAP Logon options and RZ11?", vbCritical
                GoTo Cleanup
            End If
            Debug.Print "  - SUCCESS: Obtained SAP GUI Scripting Engine via GetObject."
        Else
            ' GetObject failed - SAP Logon might not be running
            Debug.Print "  - GetObject(""SAPGUI"") failed (Error: " & getObjectErrNum & "). SAP Logon may not be running."
            ' Proceed to Step 4 (Path B - SSO Login) which will attempt to start SAP Logon
            Set SapGuiAuto = Nothing ' Ensure it's clear
        End If
    Else
        ' Already have a valid global objGui
        Debug.Print "  - Using existing global objGui object."
    End If

    ' --- STEP 3: Find Existing Connection ---
    ' If we have the GUI engine, look for an existing connection to the target system
    Debug.Print "-----------------------------------------------------"
    Debug.Print "STEP 3: Finding existing connection for System/Client '" & cTARGET_SYSTEM_ID_CLIENT & "'..."
    If Not objGui Is Nothing Then
        foundConnection = False
        Debug.Print "  - Looping through " & objGui.Children.Count & " GUI children (connections)..."
        For i = 0 To objGui.Children.Count - 1
            Set W_conn = Nothing ' Ensure clean slate for loop
            On Error Resume Next ' Handle potential errors accessing connection properties
            Set W_conn = objGui.Children(CLng(i))
            If Err.Number <> 0 Then
                Debug.Print "    - Error accessing connection at index " & i & ". Skipping."
                Err.Clear
                GoTo NextConnection ' Use GoTo for clarity in error handling within loop
            End If
            On Error GoTo ErrorHandler ' Restore main handler

            If Not W_conn Is Nothing Then
                 Debug.Print "    - Checking Connection Index " & i & " (Description: '" & W_conn.Description & "')..."
                 If W_conn.Children.Count > 0 Then ' Check if connection has any sessions
                     Set W_Sess = Nothing ' Ensure clean slate
                     On Error Resume Next ' Handle potential errors accessing session properties
                     Set W_Sess = W_conn.Children(0) ' Check the first session of this connection
                     If Err.Number <> 0 Then
                         Debug.Print "      - Error accessing first session of connection " & i & ". Skipping connection."
                         Err.Clear
                         GoTo NextConnection
                     End If
                     On Error GoTo ErrorHandler ' Restore main handler

                     If Not W_Sess Is Nothing Then
                         On Error Resume Next ' Handle potential errors accessing Info properties
                         sysInfoCheck = W_Sess.Info.SystemName & W_Sess.Info.Client
                         infoErr = Err.Number
                         Err.Clear
                         On Error GoTo ErrorHandler

                         If infoErr = 0 Then ' Successfully read session info
                            Debug.Print "      - First session System/Client: '" & sysInfoCheck & "'"
                            If sysInfoCheck = cTARGET_SYSTEM_ID_CLIENT Then
                                 ' Found a connection to the correct system!
                                 Set TargetConn = W_conn ' Store this connection object
                                 foundConnection = True
                                 Debug.Print "      - MATCH FOUND! Storing this connection."
                                 Set W_Sess = Nothing ' Release temp session object
                                 Exit For ' Stop searching for connections
                            End If
                         Else
                            ' Could not read info from the first session (e.g., session closing)
                            Debug.Print "      - Error reading Info for first session (Error: " & infoErr & "). Cannot verify system."
                         End If
                         Set W_Sess = Nothing ' Release temp session object
                     Else
                         ' Should not happen if W_conn.Children.Count > 0, but handle defensively
                         Debug.Print "      - Could not get first session object for connection " & i & "."
                     End If
                 Else
                     ' Connection exists but has no open sessions
                     Debug.Print "    - Connection Index " & i & " has no sessions. Skipping."
                 End If
            Else
                 ' Could not get the connection object itself
                 Debug.Print "    - Could not get connection object at index " & i & "."
            End If
NextConnection: ' Label for GoTo from error handling within loop
             Set W_conn = Nothing ' Release loop connection object
        Next i
        If Not foundConnection Then Debug.Print "  - No existing connection found matching '" & cTARGET_SYSTEM_ID_CLIENT & "'."
    Else
        ' Cannot search if objGui is not valid (e.g., GetObject failed earlier)
        Debug.Print "  - Cannot search for connections because objGui is not valid."
    End If


    ' --- STEP 4: Handle Based on Connection Found Status ---
    ' Decide whether to reuse/create session (Path A) or perform SSO login (Path B)
    Debug.Print "-----------------------------------------------------"
    Debug.Print "STEP 4: Determining session strategy..."

    If foundConnection And Not TargetConn Is Nothing Then
        ' --- PATH A: Connection Found - Try to Find/Create Session ---
        Debug.Print "  - PATH A: Existing connection found. Checking for usable session..."
        Set objConn = TargetConn ' Set global connection object
        Session_Nr_All_Before = objConn.Children.Count ' Get count BEFORE potentially creating new one
        Debug.Print "    - Connection has " & Session_Nr_All_Before & " session(s)."

        ' A1: Check for an IDLE session (main menu)
        Debug.Print "    - Checking for an IDLE session (SESSION_MANAGER, SMEN, S000)..."
        Set FirstFoundSess = Nothing ' Track the first valid session encountered
        SessionObtained = False ' Reset flag
        For j = 0 To objConn.Children.Count - 1 ' Loop through sessions on this connection
            Set W_Sess = Nothing: On Error Resume Next ' Try to get session object
            Set W_Sess = objConn.Children(CLng(j))
            If Err.Number <> 0 Then
                Debug.Print "      - Error accessing session at index " & j & ". Skipping."
                Err.Clear: GoTo NextIdleCheck ' Jump to next iteration
            End If
            On Error GoTo ErrorHandler ' Restore main handler

            If Not W_Sess Is Nothing Then
                Debug.Print "      - Checking Session Index " & j & " (ID: " & W_Sess.Info.SessionNumber & ")"
                If FirstFoundSess Is Nothing Then Set FirstFoundSess = W_Sess ' Store first valid one found, just in case we need it for /o
                On Error Resume Next ' Check transaction code, ignore error if session is busy/closing
                idleCheckTCode = W_Sess.Info.Transaction
                idleErr = Err.Number
                Err.Clear
                On Error GoTo ErrorHandler
                If idleErr = 0 Then
                    Debug.Print "        - Transaction Code: '" & idleCheckTCode & "'"
                    ' Check if session is at the main menu (idle)
                    Select Case UCase(idleCheckTCode)
                        Case "SESSION_MANAGER", "SMEN", "S000"
                            ' Found a suitable idle session!
                            Set objSess = W_Sess ' Set global session object
                            On Error Resume Next ' Try to get status bar
                            Set objSBar = objSess.FindById("wnd[0]/sbar")
                            On Error GoTo ErrorHandler
                            If objSBar Is Nothing Then Debug.Print "        - Warning: Could not get status bar for idle session."
                            SessionObtained = True
                            Debug.Print "        - SUCCESS: Found suitable idle session #" & objSess.Info.SessionNumber
                            GoTo RunMM03Script ' Found one, proceed to run the script
                    End Select
                Else
                    ' Error getting transaction code (session might be busy or closing)
                    Debug.Print "        - Error getting transaction code (Error: " & idleErr & "). Skipping idle check for this session."
                End If
            Else
                 ' Could not get session object (should be rare)
                 Debug.Print "      - Could not get session object at index " & j & "."
            End If
NextIdleCheck: ' Label for GoTo within loop
            Set W_Sess = Nothing ' Release loop variable
        Next j

        ' A2: No idle session found - Try to CREATE a new one using /o
        If Not SessionObtained Then
            Debug.Print "    - No idle session found."
            If FirstFoundSess Is Nothing Then
                ' This should not happen if foundConnection was True and connection had sessions
                MsgBox "Error: No sessions could be accessed on the found connection, even though connection exists.", vbCritical
                GoTo Cleanup
            End If

            ' Check if maximum sessions limit is reached
            If Session_Nr_All_Before < cMAX_SESSIONS Then
                 Debug.Print "    - Session limit not reached (" & Session_Nr_All_Before & "/" & cMAX_SESSIONS & "). Attempting /o in session #" & FirstFoundSess.Info.SessionNumber & "..."
                 On Error GoTo ErrorHandler

                 ' Use the first valid session found earlier to execute /o
                 Set objSess = FirstFoundSess ' Temporarily set objSess to the session where /o will be executed
                 Debug.Print "      - Checking if wnd[0] of session #" & objSess.Info.SessionNumber & " is accessible..."
                 ' If the session isn't at the main screen (wnd[0]), try navigating back first
                 If objSess.ActiveWindow.Name <> "wnd[0]" Then
                     Debug.Print "      - Active window is not wnd[0] (" & objSess.ActiveWindow.Name & "). Attempting /n to go back..."
                     On Error Resume Next
                     objSess.FindById("wnd[0]/tbar[0]/okcd").Text = "/n" ' Navigate back to main menu
                     objSess.FindById("wnd[0]").sendVKey 0
                     Sleep cMEDIUM_WAIT_MS ' Wait after /n
                     If Err.Number <> 0 Then
                        Err.Clear ' Clear the error
                        On Error GoTo ErrorHandler ' Restore handler
                        MsgBox "Error: Could not execute /n in session #" & objSess.Info.SessionNumber & " to return to main menu before /o.", vbExclamation
                        Set objSess = Nothing ' Clear temporary handle
                        GoTo Cleanup ' Abort if navigation failed
                     End If
                     On Error GoTo ErrorHandler ' Restore handler
                     ' Re-check active window after /n
                     If objSess.ActiveWindow.Name <> "wnd[0]" Then
                        MsgBox "Error: Still not in main window (wnd[0]) after attempting /n in session #" & objSess.Info.SessionNumber & ".", vbExclamation
                        Set objSess = Nothing ' Clear temporary handle
                        GoTo Cleanup ' Abort if still not on main screen
                     End If
                     Debug.Print "      - Successfully navigated back using /n."
                 End If

                 ' Now execute /o command
                 Debug.Print "      - Executing /o command in session #" & objSess.Info.SessionNumber & "..."
                 objSess.FindById("wnd[0]/tbar[0]/okcd").Text = "/o"
                 objSess.FindById("wnd[0]").sendVKey 0
                 ' Keep objSess pointing to FirstFoundSess for the popup check below

                 Debug.Print "      - Waiting (" & cMEDIUM_WAIT_MS & "ms) for potential popup (wnd[1]) or session creation..."
                 Sleep cMEDIUM_WAIT_MS

                 ' Handle Potential 'Generate New Session' Popup (wnd[1]) on the originating session
                 Set popupWnd = Nothing ' Reset popup variable
                 On Error Resume Next
                 Set popupWnd = objSess.FindById("wnd[1]", False) ' Check for popup on the session where /o was sent
                 popupErr = Err.Number: Err.Clear
                 On Error GoTo ErrorHandler

                 If popupErr = 0 And Not popupWnd Is Nothing Then
                    ' Popup detected!
                    Debug.Print "      - Popup (wnd[1]) detected on session #" & objSess.Info.SessionNumber & ". Text: '" & popupWnd.Text & "'"
                    ' Check if it's the expected "Generate session" or "Back-End Sessions" popup
                    If InStr(1, popupWnd.Text, "Generate", vbTextCompare) > 0 Or _
                       InStr(1, popupWnd.Text, "session", vbTextCompare) > 0 Or _
                       InStr(1, popupWnd.Text, "Back-End", vbTextCompare) > 0 Then
                        Const GENERATE_BUTTON_ID As String = "wnd[1]/tbar[0]/btn[5]" ' Button ID from user's recording
                        Debug.Print "      - Attempting to press Generate button (" & GENERATE_BUTTON_ID & ") on popup..."
                        On Error Resume Next
                        popupWnd.FindById(GENERATE_BUTTON_ID).press ' Press the "Generate" button
                        If Err.Number <> 0 Then
                            ' Fallback if btn[5] fails
                            Debug.Print "        - Generate button press failed (Error: " & Err.Description & "). Trying Enter (VKey 0)..."
                            Err.Clear
                            popupWnd.sendVKey 0 ' Try sending Enter key
                            If Err.Number <> 0 Then
                                Debug.Print "        - Enter (VKey 0) also failed (Error: " & Err.Description & "). Giving up on popup."
                                Err.Clear
                            Else
                                Debug.Print "        - Enter (VKey 0) sent successfully to popup."
                            End If
                        Else
                            Debug.Print "        - Generate button pressed successfully on popup."
                        End If
                        On Error GoTo ErrorHandler
                        Debug.Print "      - Waiting (" & cLONG_WAIT_MS & "ms) after handling popup for session to fully initialize..."
                        Sleep cLONG_WAIT_MS ' Wait longer after popup interaction
                    Else
                        ' Popup appeared but wasn't the expected one
                        Debug.Print "      - Popup (wnd[1]) detected, but text doesn't match expected 'Generate'/'Back-End' popup. Ignoring."
                        On Error Resume Next ' Try to close it just in case
                        popupWnd.Close
                        On Error GoTo ErrorHandler
                        Sleep cSHORT_WAIT_MS
                    End If
                 Else
                    ' No popup detected within the initial wait time
                    Debug.Print "      - Popup (wnd[1]) not detected on session #" & objSess.Info.SessionNumber & ". Assuming direct session creation or delayed popup."
                    Sleep cSHORT_WAIT_MS ' Short additional wait
                 End If
                 Set popupWnd = Nothing ' Release popup object
                 Set objSess = Nothing ' Release temporary handle used for /o and popup check (will find the new one below)

                 ' Verify session count increase and find the NEW session
                 Debug.Print "      - Verifying session count increase and finding new session (Timeout: " & cSESSION_CHECK_ATTEMPTS * cSESSION_CHECK_INTERVAL_MS & "ms)..."
                 highestSessNum = 0
                 Set NewSess = Nothing ' Reset NewSess object
                 attempts = 0 ' Reset attempt counter
                 Do ' Start loop to check for session count increase
                    attempts = attempts + 1
                    ' Re-evaluate connection children count
                    If objConn Is Nothing Then Err.Raise vbObjectError + 520, "StartExtract", "Connection object lost before finding new session."

                    On Error Resume Next ' Handle potential errors refreshing count (e.g., connection dropped)
                    Session_Nr_All_After = objConn.Children.Count
                    countErr = Err.Number
                    Err.Clear
                    On Error GoTo ErrorHandler
                    If countErr <> 0 Then
                        Debug.Print "        - Attempt " & attempts & ": Error getting session count (" & countErr & "). Retrying..."
                        GoTo NextAttemptWait ' Skip processing this attempt if count failed
                    End If

                    Debug.Print "        - Attempt " & attempts & "/" & cSESSION_CHECK_ATTEMPTS & ": Current session count = " & Session_Nr_All_After

                    ' Check if session count has increased
                    If Session_Nr_All_After > Session_Nr_All_Before Then
                        Debug.Print "        - Session count increased from " & Session_Nr_All_Before & " to " & Session_Nr_All_After & ". Searching for highest session number..."
                        ' Find the session with the highest number (assumed to be the new one)
                        For j = 0 To Session_Nr_All_After - 1
                            Set W_Sess = Nothing: On Error Resume Next
                            Set W_Sess = objConn.Children(CLng(j))
                            If Err.Number <> 0 Then
                                Debug.Print "          - Warning: Error accessing session object at index " & j & ".": Err.Clear
                                GoTo NextFindLoopSess ' Skip this session if error
                            End If
                            On Error GoTo ErrorHandler ' Restore

                            If Not W_Sess Is Nothing Then
                                On Error Resume Next ' Get session number, ignore error if session is closing
                                currentSessNum = W_Sess.Info.SessionNumber
                                If Err.Number = 0 Then
                                    If currentSessNum > highestSessNum Then
                                        highestSessNum = currentSessNum
                                        Set NewSess = W_Sess ' Store the session object with the highest number
                                        Debug.Print "            - Found new highest session: #" & highestSessNum
                                    End If
                                Else
                                    Debug.Print "          - Warning: Error reading session number for index " & j & ".": Err.Clear
                                End If
                                On Error GoTo ErrorHandler ' Restore
                            End If
NextFindLoopSess: ' Label for GoTo within inner loop
                            Set W_Sess = Nothing ' Release loop var
                        Next j

                        If Not NewSess Is Nothing Then
                            Debug.Print "        - Identified session with highest number: #" & NewSess.Info.SessionNumber
                            Exit Do ' Found the new session, exit the wait loop
                        Else
                            ' Should be rare: count increased but couldn't identify highest session
                            Debug.Print "        - Session count increased, but couldn't identify highest session number object yet. Retrying..."
                        End If
                    Else
                        ' Session count hasn't increased yet
                        Debug.Print "        - Session count (" & Session_Nr_All_After & ") has not increased yet from original (" & Session_Nr_All_Before & ")."
                    End If

                    ' Check if timeout reached
                    If attempts >= cSESSION_CHECK_ATTEMPTS Then
                        Err.Raise vbObjectError + 521, "StartExtract", "Timeout (" & cSESSION_CHECK_ATTEMPTS * cSESSION_CHECK_INTERVAL_MS & "ms) waiting for session count to increase after /o command."
                    End If
NextAttemptWait: ' Label for GoTo from error handling within loop
                    Sleep cSESSION_CHECK_INTERVAL_MS ' Wait before next check
                 Loop ' End session count check loop

                 ' Final check after loop exit
                 If NewSess Is Nothing Then
                     ' Should not happen if loop timed out correctly, but check defensively
                     Err.Raise vbObjectError + 522, "StartExtract", "Could not identify new session object after /o, even after session count check loop."
                 End If

                 ' Successfully found the new session
                 Set objSess = NewSess ' Set GLOBAL session to the new one
                 Debug.Print "      - SUCCESS: Identified new session #" & objSess.Info.SessionNumber & " created via /o."
                 On Error Resume Next ' Try to get status bar for the new session
                 Set objSBar = objSess.FindById("wnd[0]/sbar")
                 On Error GoTo ErrorHandler
                 If objSBar Is Nothing Then Debug.Print "      - Warning: Could not get status bar for new session #" & objSess.Info.SessionNumber & "."
                 SessionObtained = True
                 Debug.Print "    - Proceeding with newly created session #" & objSess.Info.SessionNumber & "."
                 GoTo RunMM03Script ' Proceed to run the script

            Else
                 ' Max sessions reached
                 Debug.Print "    - Session limit reached (" & Session_Nr_All_Before & "/" & cMAX_SESSIONS & "). Cannot create new session via /o."
                 MsgResult = MsgBox("Maximum SAP sessions (" & cMAX_SESSIONS & ") reached for this connection." & vbCrLf & _
                                    "No idle session found. Please close an existing SAP session.", vbCritical + vbOKOnly, "SAP Session Limit Reached")
                 GoTo Cleanup ' Abort
            End If
        End If ' End /o logic (if not SessionObtained from idle check)

    Else
        ' --- PATH B: No Connection Found (or objGui was Nothing) - Attempt SSO Logon ---
        Debug.Print "  - PATH B: No existing connection found for target, or SAP GUI object invalid. Attempting SSO login..."
        Debug.Print "    - Using Description: '" & cTARGET_SYSTEM_DESCRIPTION & "'"

        ' --- Start of Integrated EstablishSsoConnection Logic ---
        On Error GoTo SsoLoginErrorHandler ' Use specific handler for SSO errors

        ' Reset global objects for new login attempt
        Set objConn = Nothing: Set objSess = Nothing: Set objSBar = Nothing

        ' Step 1: Get/Ensure SAP GUI Scripting Engine (might need to start SAP Logon)
        If objGui Is Nothing Then
            Debug.Print "    - SSO Step 1: objGui is Nothing. Attempting GetObject/Start Logon..."
            On Error Resume Next
            Set SapGuiAuto = GetObject("SAPGUI")
            getObjErrSso = Err.Number: Err.Clear
            On Error GoTo SsoLoginErrorHandler
            If getObjErrSso <> 0 Or SapGuiAuto Is Nothing Then
                 ' GetObject failed, try starting SAP Logon
                 Debug.Print "      - GetObject failed. Starting SAP Logon: '" & cSAP_LOGON_PATH & "'"
                 On Error Resume Next
                 shellResult = Shell(cSAP_LOGON_PATH, vbNormalFocus) ' Start SAP Logon
                 shellErr = Err.Number: shellDesc = Err.Description: Err.Clear
                 On Error GoTo SsoLoginErrorHandler
                 If shellErr <> 0 Then MsgBox "Shell Error (" & shellErr & ") trying to start SAP Logon: " & shellDesc, vbCritical: GoTo Cleanup
                 Debug.Print "      - Shell executed. Waiting 5s...": Sleep 5000 ' Wait for SAP Logon to start
                 ' Retry GetObject after starting SAP Logon
                 attempts = 0
                 Do
                     attempts = attempts + 1: Debug.Print "      - GetObject attempt " & attempts & "..."
                     On Error Resume Next: Set SapGuiAuto = GetObject("SAPGUI"): If Err.Number = 0 And Not SapGuiAuto Is Nothing Then Exit Do: Err.Clear: Sleep 2000
                 Loop While attempts < 5
                 If SapGuiAuto Is Nothing Then MsgBox "GetObject still failed after starting SAP Logon.", vbCritical: GoTo Cleanup
                 Debug.Print "      - GetObject successful after starting Logon."
            Else
                 Debug.Print "      - GetObject successful."
            End If
            ' Get Scripting Engine from the obtained SAPGUI object
            Set objGui = SapGuiAuto.GetScriptingEngine
            If objGui Is Nothing Then MsgBox "Could not get Scripting Engine after GetObject/Start Logon.", vbCritical: GoTo Cleanup
            Debug.Print "      - Scripting Engine obtained."
        Else
             Debug.Print "    - SSO Step 1: Using existing objGui."
        End If

        ' Step 2: Open Connection using the Description
        Debug.Print "    - SSO Step 2: Opening Connection '" & cTARGET_SYSTEM_DESCRIPTION & "'..."
        On Error Resume Next
        Set TargetConn = objGui.OpenConnection(cTARGET_SYSTEM_DESCRIPTION, True) ' True for asynchronous connection
        openConnErr = Err.Number: openConnDesc = Err.Description: Err.Clear
        On Error GoTo SsoLoginErrorHandler
        If openConnErr <> 0 Or TargetConn Is Nothing Then MsgBox "OpenConnection Error (" & openConnErr & "): " & openConnDesc & vbCrLf & "Ensure description '" & cTARGET_SYSTEM_DESCRIPTION & "' exactly matches SAP Logon Pad entry.", vbCritical: GoTo Cleanup
        Set objConn = TargetConn ' Set global connection object
        Debug.Print "      - OpenConnection successful. Connection: '" & objConn.Description & "'"

        ' Step 3: Get Session object from the new connection
        Debug.Print "    - SSO Step 3: Waiting for session object..."
        startTime = Timer
        Do ' Wait for the connection to produce a session
            If objConn.Children.Count > 0 Then Exit Do
            Sleep cSHORT_WAIT_MS: DoEvents
            If Timer - startTime > 15 Then MsgBox "Timeout waiting for session object after OpenConnection.", vbCritical: GoTo Cleanup
        Loop
        Set TargetSessSSO = objConn.Children(0) ' Get the first (and likely only) session
        If TargetSessSSO Is Nothing Then MsgBox "Could not get session object from new connection.", vbCritical: GoTo Cleanup
        Set objSess = TargetSessSSO ' Set global session object
        Debug.Print "      - Session object obtained (ID: " & objSess.Info.SessionNumber & ")."

        ' Step 4: Wait for Session to be Ready (i.e., past initial logon screens)
        Debug.Print "    - SSO Step 4: Waiting for session ready (Timeout: " & cLOGON_TIMEOUT_SECONDS & "s)..."
        startTime = Timer
        Do
            On Error Resume Next ' Check transaction, ignore errors if session not fully ready
            currentTransaction = objSess.Info.Transaction
            sessReadyErr = Err.Number: Err.Clear
            On Error GoTo SsoLoginErrorHandler
            If sessReadyErr = 0 Then
                ' Session is ready if transaction code is not empty or the initial system screen
                If currentTransaction <> "" And UCase(currentTransaction) <> "SAPMSYST" Then
                    Debug.Print "      - Session active. TCode: '" & currentTransaction & "'"
                    Exit Do ' Session is ready
                End If
            Else
                ' Error reading transaction code, likely still logging in
                Debug.Print "      - Waiting session ready (Info error: " & sessReadyErr & ")"
            End If
            Sleep cSHORT_WAIT_MS: DoEvents
            ' Check timeout
            If Timer - startTime > cLOGON_TIMEOUT_SECONDS Then MsgBox "Timeout waiting for SAP main menu after SSO login.", vbCritical: GoTo Cleanup
        Loop

        ' Step 5: Get Status Bar for the new session
        Debug.Print "    - SSO Step 5: Getting status bar..."
        On Error Resume Next
        Set objSBar = objSess.FindById("wnd[0]/sbar")
        On Error GoTo ErrorHandler ' Restore MAIN error handler
        If objSBar Is Nothing Then Debug.Print "      - Warning: Could not get status bar." Else Debug.Print "      - Status bar obtained."

        ' Step 6: SSO Success
        SessionObtained = True
        Debug.Print "    - SSO Step 6: SSO login process successful."

        ' Optional: Verify system match after login
        If Not objSess Is Nothing Then
           On Error Resume Next
           loggedInSys = objSess.Info.SystemName & objSess.Info.Client
           sysCheckErr = Err.Number: Err.Clear
           On Error GoTo ErrorHandler
           If sysCheckErr = 0 Then
               If loggedInSys <> cTARGET_SYSTEM_ID_CLIENT Then
                    MsgBox "Warning: SSO login successful but connected to wrong system/client!" & vbCrLf & _
                           "Expected: '" & cTARGET_SYSTEM_ID_CLIENT & "'" & vbCrLf & _
                           "Connected: '" & loggedInSys & "'", vbExclamation
               Else
                   Debug.Print "      - System match verified ('" & loggedInSys & "')."
               End If
           Else
               Debug.Print "      - Warning: Could not verify system match after SSO login (Error: " & sysCheckErr & ")."
           End If
        End If

        ' --- End of Integrated SSO Logic ---
        If SessionObtained Then GoTo RunMM03Script Else GoTo Cleanup ' Should always be true here unless error occurred

    End If ' End Path A vs Path B Check


    ' --- Fallback Check ---
    ' If code reaches here, something went wrong, and no session was obtained.
    If Not SessionObtained Then
        Debug.Print "ERROR: Fallback reached - session not obtained after all attempts."
        MsgBox "Could not get a usable SAP session after all attempts (existing, /o, SSO).", vbCritical
        GoTo Cleanup
    End If


RunMM03Script:
    ' --- Call the MM03 Scripting Logic ---
    ' Proceed only if a session was successfully obtained
    If SessionObtained And Not objSess Is Nothing Then
        ' *** ROBUSTNESS CHECK: Final check on session validity before calling RunGUIScript ***
        On Error Resume Next
        tempTCode = objSess.Info.Transaction ' Try accessing a property
        sessInfoErr = Err.Number
        Err.Clear
        On Error GoTo ErrorHandler
        If sessInfoErr <> 0 Then
            Debug.Print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
            Debug.Print "ERROR: Session object became invalid just before calling RunGUIScript (Error: " & sessInfoErr & ")."
            Debug.Print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
            MsgBox "Error: The obtained SAP session became invalid before the script could run.", vbCritical
            GoTo Cleanup
        End If
        ' *** End Robustness Check ***

        Debug.Print "-----------------------------------------------------"
        Debug.Print "STEP 5: Session ready. Calling RunGUIScript..."
        Debug.Print "  - Session ID: " & objSess.Info.SessionNumber
        Debug.Print "  - System/Client: " & objSess.Info.SystemName & "/" & objSess.Info.Client
        Debug.Print "  - User: " & objSess.Info.User
        Debug.Print "-----------------------------------------------------"
        RunGUIScript ' <<<<<< CALL THE MM03 SPECIFIC SUBROUTINE >>>>>>
    Else
        ' Should not happen if logic above is correct
        Debug.Print "INTERNAL ERROR: Reached RunMM03Script label but SessionObtained=" & SessionObtained & " or objSess is Nothing."
        MsgBox "Internal Error: Could not proceed to run GUI script.", vbCritical
        GoTo Cleanup ' Go to cleanup even on internal error
    End If

Cleanup:
    ' --- Cleanup Section ---
    ' Restore Excel settings, release object variables
    Debug.Print "-----------------------------------------------------"
    Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Running Cleanup for StartExtract..."

    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    Application.StatusBar = False ' *** Reset status bar on exit ***

    ' Release local object variables
    Set TargetConn = Nothing: Debug.Print "  - Released TargetConn"
    Set W_conn = Nothing: Debug.Print "  - Released W_conn"
    Set W_Sess = Nothing: Debug.Print "  - Released W_Sess"
    Set FirstFoundSess = Nothing: Debug.Print "  - Released FirstFoundSess"
    Set NewSess = Nothing: Debug.Print "  - Released NewSess"
    Set SapGuiAuto = Nothing: Debug.Print "  - Released SapGuiAuto"
    Set TargetSessSSO = Nothing: Debug.Print "  - Released TargetSessSSO"
    Set popupWnd = Nothing: Debug.Print "  - Released popupWnd"

    ' Explicitly release GLOBAL SAP objects (if they were set)
    ' Best practice to release globals here if the intention is that this sub manages the full lifecycle.
    ' If you intend to keep the session open for subsequent calls, comment out the release lines below.
     Debug.Print "  - Releasing global SAP objects..."
     On Error Resume Next ' Ignore errors if objects were never set or already Nothing
     Set objSBar = Nothing: Debug.Print "    - Released objSBar"
     Set objSess = Nothing: Debug.Print "    - Released objSess"
     Set objConn = Nothing: Debug.Print "    - Released objConn"
     Set objGui = Nothing: Debug.Print "    - Released objGui"
     On Error GoTo 0 ' Restore default error handling
     Debug.Print "  - Global SAP objects released."

    Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - StartExtract finished."
    Debug.Print "=====================================================" & vbCrLf
    Exit Sub ' End of the Sub

' --- Error Handlers ---
ErrorHandler: ' General error handler
    Dim errNum As Long: errNum = Err.Number
    Dim errDesc As String: errDesc = Err.Description
    Dim errSource As String: errSource = Err.Source
    Debug.Print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - ERROR ENCOUNTERED in StartExtract (General Handler)!"
    Debug.Print "    Error #: " & errNum: Debug.Print "    Source:  " & errSource: Debug.Print "    Desc:    " & errDesc
    Debug.Print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    MsgBox "Error during SAP session setup/creation:" & vbCrLf & vbCrLf & _
           "Err #: " & errNum & vbCrLf & "Desc: " & errDesc, vbCritical, "SAP Connection Error"
    Application.StatusBar = False ' *** Reset status bar on error ***
    Resume Cleanup ' Go to cleanup on error

SsoLoginErrorHandler: ' Specific handler for SSO login errors
    Dim ssoErrNum As Long: ssoErrNum = Err.Number
    Dim ssoErrDesc As String: ssoErrDesc = Err.Description
    Dim ssoErrSource As String: ssoErrSource = Err.Source
    Debug.Print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - ERROR ENCOUNTERED during SSO Login Attempt!"
    Debug.Print "    Error #: " & ssoErrNum: Debug.Print "    Source:  " & ssoErrSource: Debug.Print "    Desc:    " & ssoErrDesc
    Debug.Print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
     MsgBox "Error during SAP SSO Logon attempt:" & vbCrLf & vbCrLf & _
           "Err #: " & ssoErrNum & vbCrLf & "Desc: " & ssoErrDesc, vbCritical, "SSO Login Error"
     SessionObtained = False ' Ensure flag is false
     Application.StatusBar = False ' *** Reset status bar on error ***
     Resume Cleanup ' Go to main cleanup

End Sub


' //========================================================================
' // Sub: RunGUIScript
' // Purpose: Executes MM03 steps to extract material data.
' //          Called only by StartExtract. Declared Private.
' //========================================================================
Private Sub RunGUIScript()

    ' --- Constants specific to MM03 Execution ---
    Const cTRANSACTION As String = "mm03" ' Transaction code
    ' Excel Columns (Adjust if your sheet layout is different)
    Const cMATERIAL_COL As String = "A" ' Column with Material numbers to read
    Const cSTATUS_MSG_COL As String = "C" ' Column to write Status/Error messages
    Const cPROD_HIER_COL As String = "D" ' Column for Product Hierarchy
    Const cOLD_MAT_COL As String = "E" ' Column for Old Material Number
    Const cCREATED_BY_COL As String = "F" ' Column for Full "Created by" text
    Const cLAST_CHANGED_COL As String = "G" ' Column for Full "Last changed by" text
    Const cSTART_ROW As Long = 2 ' Starting row for data in Excel (assumes header in row 1)
    Const cSAP_SHORT_WAIT_MS As Long = 250 ' Short wait after simple actions (ms)
    Const cSAP_MEDIUM_WAIT_MS As Long = 750 ' Medium wait after navigation/popups (ms)
    Const cBUSY_WAIT_MS As Long = 100 ' Short wait when session is busy
    Const cMAX_BUSY_CHECKS As Integer = 50 ' Max times to check if session is busy (total 5 sec)

    ' --- SAP GUI Element IDs (Verify with Scripting Tracker if errors occur) ---
    Const cMATNR_FIELD_ID As String = "wnd[0]/usr/ctxtRMMG1-MATNR" ' Material Number input field
    Const cVIEWS_POPUP_ID As String = "wnd[1]" ' Select View(s) popup window
    Const cVIEWS_SELECT_ALL_BTN_ID As String = "wnd[1]/tbar[0]/btn[20]" ' Select All button on Views popup
    Const cVIEWS_CONTINUE_BTN_ID As String = "wnd[1]/tbar[0]/btn[0]" ' OK/Continue button on Views popup
    Const cERROR_POPUP_ID As String = "wnd[2]" ' Potential second-level popup (e.g., for errors)
    Const cPROD_HIER_FIELD_ID As String = "wnd[0]/usr/tabsTABSPR1/tabpSP01/ssubTABFRA1:SAPLMGMM:2004/subSUB2:SAPLMGD1:2001/ctxtMARA-PRDHA" ' Product Hierarchy field
    Const cOLD_MAT_FIELD_ID As String = "wnd[0]/usr/tabsTABSPR1/tabpSP01/ssubTABFRA1:SAPLMGMM:2004/subSUB2:SAPLMGD1:2001/txtMARA-BISMT" ' Old Material Number field
    Const cINFO_BTN_ID As String = "wnd[0]/usr/tabsTABSPR1/tabpSP01/ssubTABFRA1:SAPLMGMM:2004/subSUB1:SAPLMGD1:1002/btnINFO" ' Info button for creation details
    Const cINFO_POPUP_ID As String = "wnd[1]" ' Info popup window (same ID as Views, different context)
    Const cINFO_POPUP_USER_AREA_ID As String = "wnd[1]/usr" ' User area within the info popup
    Const cINFO_POPUP_BACK_BTN_ID As String = "wnd[1]/tbar[0]/btn[3]" ' Back button on Info popup
    Const cMAIN_BACK_BTN_ID As String = "wnd[0]/tbar[0]/btn[3]" ' Back button on main MM03 screen
    Const cMAIN_EXIT_BTN_ID As String = "wnd[0]/tbar[0]/btn[15]" ' Exit button on main screen

    ' --- Local Variables ---
    Dim ws As Worksheet ' Excel worksheet object
    Dim lastRow As Long ' Last row with data in Excel
    Dim i As Long ' Loop counter for input/output arrays
    Dim materialNumber As String ' Material number being processed
    Dim statusMessage As String ' Status/Error message from SAP or script
    Dim prodHier As String ' Extracted Product Hierarchy
    Dim oldMatNum As String ' Extracted Old Material Number
    Dim createdByText As String ' Full "Created by..." text
    Dim lastChangedByText As String ' Full "Last changed by..." text
    Dim labelText As String ' Temp variable for label text in info popup
    Dim child As Object ' Loop variable for popup children (GuiLabel)
    Dim mm03FieldCheck As Object ' To verify navigation
    Dim selectViewsPopup As GuiModalWindow ' Object for Select View(s) popup
    Dim infoPopup As GuiModalWindow ' Object for Info popup
    Dim errorPopup As GuiModalWindow ' Object for potential error popup
    Dim userArea As Object ' User area within the info popup (GuiUserArea)
    Dim objExcelApp As Object ' Excel Application object
    Dim dataOutputArray() As Variant ' Array to hold results for faster writing
    Dim materialInputArray() As Variant ' *** NEW: Array to hold input materials ***
    Dim outputRow As Long ' Row index for the output array (same as input array index)
    Dim totalMaterials As Long ' Total number of materials to process
    Dim currentMaterialNum As Long ' Counter for status bar
    Dim inputDataRange As Range ' Range containing input materials
    Dim outputRange As Range ' Range for writing output array
    Dim errNumRun As Long, errDescRun As String, errSourceRun As String ' For error handler
    Dim viewsPopupErr As Long ' Error code when checking for Views popup
    Dim infoBtnErr As Long ' Error code when pressing Info button
    Dim infoPopupErr As Long ' Error code when checking for Info popup
    Dim infoAreaErr As Long ' Error code when accessing Info popup user area
    Dim dataFieldErr As Long ' Error code when reading data fields
    Dim busyChecks As Integer ' Counter for busy check loop

    On Error GoTo MM03ErrorHandler ' Set error handler for this subroutine

    ' --- Pre-checks ---
    Debug.Print "Entering RunGUIScript..."
    If objSess Is Nothing Then Err.Raise vbObjectError + 510, "RunGUIScript", "objSess is not valid."
    ' Try to get status bar if not already set
    If objSBar Is Nothing Then
        On Error Resume Next
        Set objSBar = objSess.FindById("wnd[0]/sbar")
        If Err.Number <> 0 Then
            Debug.Print "  - Warning: objSBar could not be obtained for session #" & objSess.Info.SessionNumber & " (Error: " & Err.Description & ")."
            Err.Clear
        End If
        On Error GoTo MM03ErrorHandler ' Restore handler
    End If
    Debug.Print "  - Session #" & objSess.Info.SessionNumber & " and Status Bar objects checked (Status Bar " & IIf(objSBar Is Nothing, "Not ", "") & "obtained)."

    ' --- Get Excel Worksheet ---
    On Error Resume Next ' Handle case where Excel isn't open or sheet doesn't exist
    Set objExcelApp = GetObject(, "Excel.Application")
    If Err.Number <> 0 Then
        MsgBox "Error: Could not connect to running Excel application.", vbCritical, "Excel Connection Error"
        GoTo MM03Cleanup ' Exit if Excel not found
    End If
    Set ws = objExcelApp.Worksheets("Sheet1") ' *** CHANGE "Sheet1" if your sheet name is different ***
    If ws Is Nothing Then
        MsgBox "Error: Could not find worksheet named 'Sheet1' in the active Excel workbook.", vbCritical, "Excel Worksheet Error"
        Set objExcelApp = Nothing
        GoTo MM03Cleanup ' Exit if sheet not found
    End If
    On Error GoTo MM03ErrorHandler ' Restore main error handler
    Debug.Print "  - Connected to Excel Worksheet: '" & ws.Name & "'"

    ' --- *** SPEED OPTIMIZATION: Read Input Data into Array *** ---
    lastRow = ws.Cells(ws.Rows.Count, cMATERIAL_COL).End(xlUp).row
    If lastRow < cSTART_ROW Then
        MsgBox "No data found in Excel sheet '" & ws.Name & "' starting from row " & cSTART_ROW & ", column " & cMATERIAL_COL & ".", vbInformation, "No Input Data"
        GoTo MM03Cleanup ' Exit if no data
    End If
    totalMaterials = lastRow - cSTART_ROW + 1
    Debug.Print "  - Last row with data in column " & cMATERIAL_COL & ": " & lastRow & " (Total: " & totalMaterials & ")"

    Set inputDataRange = ws.Range(cMATERIAL_COL & cSTART_ROW & ":" & cMATERIAL_COL & lastRow)
    If totalMaterials = 1 Then
        ' Handle single cell case for reading into array
        ReDim materialInputArray(1 To 1, 1 To 1)
        materialInputArray(1, 1) = inputDataRange.value
    Else
        materialInputArray = inputDataRange.value ' Read all materials at once
    End If
    Set inputDataRange = Nothing ' Release range object
    Debug.Print "  - Read " & totalMaterials & " material numbers into memory."

    ' --- *** OPTIMIZATION: Size the output array *** ---
    ' Array columns: Status, ProdHier, OldMat, CreatedBy, LastChangedBy
    ReDim dataOutputArray(1 To totalMaterials, 1 To 5)

    ' --- Navigate to MM03 ---
    Debug.Print "  - Navigating to transaction '" & cTRANSACTION & "'..."
    Application.StatusBar = "Navigating to MM03..." ' Update status

    ' Check if session is busy before interacting
    If WaitForSessionReady(objSess, cMAX_BUSY_CHECKS, cBUSY_WAIT_MS) = False Then GoTo MM03Cleanup

    If objSess.Info.Transaction <> UCase(cTRANSACTION) Then
        objSess.FindById("wnd[0]/tbar[0]/okcd").Text = "/n" & cTRANSACTION
        objSess.FindById("wnd[0]").sendVKey 0
        Sleep cSAP_MEDIUM_WAIT_MS * 2 ' Longer wait after transaction change
    Else
        ' If already in MM03, press Back to ensure we are at the initial screen
        Debug.Print "  - Already in MM03, pressing Back to reset..."
        On Error Resume Next ' Ignore error if Back button isn't active
        objSess.FindById(cMAIN_BACK_BTN_ID).press
        If Err.Number <> 0 Then Debug.Print "    - Info: Could not press Back button (already at initial screen?).": Err.Clear
        On Error GoTo MM03ErrorHandler
        Sleep cSAP_MEDIUM_WAIT_MS
    End If

    ' --- Verify Navigation to MM03 Initial Screen ---
    If WaitForSessionReady(objSess, cMAX_BUSY_CHECKS, cBUSY_WAIT_MS) = False Then GoTo MM03Cleanup
    On Error Resume Next
    Set mm03FieldCheck = objSess.FindById(cMATNR_FIELD_ID)
    If Err.Number <> 0 Or mm03FieldCheck Is Nothing Then
        Err.Clear
        On Error GoTo MM03ErrorHandler
        Err.Raise vbObjectError + 511, "RunGUIScript", "Failed to navigate to " & cTRANSACTION & " initial screen. Expected field '" & cMATNR_FIELD_ID & "' not found."
    Else
        Debug.Print "  - Successfully navigated to MM03 initial screen."
    End If
    Set mm03FieldCheck = Nothing ' Release check object
    On Error GoTo MM03ErrorHandler ' Ensure main handler is active

    ' --- Loop through each material in the input array ---
    For i = 1 To totalMaterials ' Loop from 1 to UBound(materialInputArray, 1)
        outputRow = i ' Use the same index for input and output arrays
        currentMaterialNum = i ' Counter for status bar

        Debug.Print "-----------------------------------------------------"
        Debug.Print "Processing item: " & i & "/" & totalMaterials

        ' --- Reset variables for this material ---
        materialNumber = ""
        statusMessage = ""
        prodHier = ""
        oldMatNum = ""
        createdByText = "" ' Reset full text variables
        lastChangedByText = ""
        Set selectViewsPopup = Nothing
        Set infoPopup = Nothing
        Set errorPopup = Nothing
        Set userArea = Nothing
        Set child = Nothing

        ' --- Step 1: Get Material Number from Array ---
        materialNumber = Trim$(CStr(materialInputArray(i, 1)))

        ' --- Update Status Bar ---
        Application.StatusBar = "Processing " & currentMaterialNum & " of " & totalMaterials & ": '" & materialNumber & "'..."

        If materialNumber = "" Then
            Debug.Print "  - WARNING: Skipping item " & i & " due to missing Material Number in input array."
            statusMessage = "Skipped - Missing Material"
            ' Store status in array and skip SAP interaction
            dataOutputArray(outputRow, 1) = statusMessage ' Corresponds to STATUS_MSG_COL
            dataOutputArray(outputRow, 2) = "" ' Prod Hier
            dataOutputArray(outputRow, 3) = "" ' Old Mat
            dataOutputArray(outputRow, 4) = "" ' Created By
            dataOutputArray(outputRow, 5) = "" ' Last Changed
            GoTo NextIteration ' Skip to the next material
        End If
        Debug.Print "  - Material Number from Array: '" & materialNumber & "'"

        ' --- Step 2: Enter Material and Press Enter ---
        Debug.Print "  - Entering Material Number and pressing Enter..."
        If WaitForSessionReady(objSess, cMAX_BUSY_CHECKS, cBUSY_WAIT_MS) = False Then GoTo MM03Cleanup
        objSess.FindById(cMATNR_FIELD_ID).Text = materialNumber
        objSess.FindById("wnd[0]").sendVKey 0
        Sleep cSAP_MEDIUM_WAIT_MS ' Wait for potential popup or status message

        ' --- Step 3: Check for Status Bar Message (e.g., Material Not Found) ---
        If WaitForSessionReady(objSess, cMAX_BUSY_CHECKS, cBUSY_WAIT_MS) = False Then GoTo MM03Cleanup
        If Not objSBar Is Nothing Then
            statusMessage = Trim$(objSBar.Text)
            If statusMessage <> "" Then
                 Debug.Print "  - Status Bar Message: '" & statusMessage & "'"
                 ' Check if it's an error/warning message indicating material doesn't exist or view selection needed
                 If InStr(1, statusMessage, "does not exist", vbTextCompare) > 0 Or _
                    InStr(1, statusMessage, "Material locked", vbTextCompare) > 0 Or _
                    InStr(1, statusMessage, "No data", vbTextCompare) > 0 Or _
                    InStr(1, statusMessage, "not maintained", vbTextCompare) > 0 Then
                    ' Store status message in array and skip to next material
                    Debug.Print "  - Skipping data extraction for this material due to status message."
                    dataOutputArray(outputRow, 1) = statusMessage ' Status
                    dataOutputArray(outputRow, 2) = "" ' Prod Hier
                    dataOutputArray(outputRow, 3) = "" ' Old Mat
                    dataOutputArray(outputRow, 4) = "" ' Created By
                    dataOutputArray(outputRow, 5) = "" ' Last Changed
                    GoTo NextIteration
                 End If
                 ' Clear status message if it wasn't a blocking error
                 statusMessage = "OK" ' Default to OK if status bar had non-blocking message
            Else
                 statusMessage = "OK" ' Default to OK if status bar is empty
            End If
        Else
             Debug.Print "  - Status Bar object not available to check messages."
             statusMessage = "OK (No SBar)" ' Indicate status bar wasn't checked
        End If

        ' --- Step 4: Handle "Select View(s)" Popup (wnd[1]) ---
        Set selectViewsPopup = Nothing ' Reset variable
        On Error Resume Next ' Check if the popup exists without stopping execution
        Set selectViewsPopup = objSess.FindById(cVIEWS_POPUP_ID, False) ' False = don't raise error if not found
        viewsPopupErr = Err.Number ' Capture error number
        Err.Clear ' Clear error immediately
        On Error GoTo MM03ErrorHandler ' Restore main error handler

        If viewsPopupErr = 0 And Not selectViewsPopup Is Nothing Then
            Debug.Print "  - 'Select View(s)' popup (wnd[1]) detected. Text: '" & selectViewsPopup.Text & "'"
            ' Select All Views and Continue
            On Error Resume Next ' Handle errors during popup interaction specifically
            Debug.Print "    - Pressing Select All (" & cVIEWS_SELECT_ALL_BTN_ID & ")..."
            selectViewsPopup.FindById(cVIEWS_SELECT_ALL_BTN_ID).press
            Sleep cSAP_SHORT_WAIT_MS
            Debug.Print "    - Pressing Continue (" & cVIEWS_CONTINUE_BTN_ID & ")..."
            selectViewsPopup.FindById(cVIEWS_CONTINUE_BTN_ID).press
            Sleep cSAP_SHORT_WAIT_MS
            ' Sometimes requires a second press if organizational levels popup appears
            Debug.Print "    - Pressing Continue (" & cVIEWS_CONTINUE_BTN_ID & ") again..."
            selectViewsPopup.FindById(cVIEWS_CONTINUE_BTN_ID).press

            If Err.Number <> 0 Then
                ' Error occurred during popup interaction
                Debug.Print "    - Error interacting with Select Views popup: " & Err.Description
                statusMessage = "Error handling Select Views popup: " & Err.Description
                Err.Clear ' Clear the error
                ' Try to close the popup gracefully and go back
                On Error Resume Next ' Ignore errors during cleanup attempt
                selectViewsPopup.Close
                objSess.FindById(cMAIN_BACK_BTN_ID).press
                On Error GoTo MM03ErrorHandler ' Restore main handler
                ' Store error and skip rest of processing for this material
                dataOutputArray(outputRow, 1) = statusMessage
                GoTo NextIteration
            End If
            On Error GoTo MM03ErrorHandler ' Restore main error handler
            Sleep cSAP_MEDIUM_WAIT_MS ' Wait after handling popup
        ElseIf viewsPopupErr <> 0 Then
            ' Error occurred trying to FindById for the popup (other than not found)
             Debug.Print "  - Error (" & viewsPopupErr & ") checking for 'Select View(s)' popup. Proceeding cautiously."
             statusMessage = "Warn: Error checking views popup (" & viewsPopupErr & ")" ' Log a warning status
        Else
            ' Popup was not found (viewsPopupErr = 0 and selectViewsPopup Is Nothing)
            Debug.Print "  - 'Select View(s)' popup (wnd[1]) not detected. Proceeding..."
        End If
        Set selectViewsPopup = Nothing ' Release popup object

        ' --- Step 4a: Check for potential secondary error popup (wnd[2]) ---
        Set errorPopup = Nothing
        On Error Resume Next ' Check for wnd[2]
        Set errorPopup = objSess.FindById(cERROR_POPUP_ID, False)
        If Err.Number = 0 And Not errorPopup Is Nothing Then
             statusMessage = Trim$(errorPopup.Text) ' Capture text from wnd[2]
             Debug.Print "  - Secondary Popup (wnd[2]) detected. Text: '" & statusMessage & "'"
             errorPopup.FindById("tbar[0]/btn[0]").press ' Press OK/Continue
             Set errorPopup = Nothing
             Sleep cSAP_SHORT_WAIT_MS
             ' Assume this error prevents further processing for this material
             Debug.Print "  - Skipping data extraction due to secondary popup."
             objSess.FindById(cMAIN_BACK_BTN_ID).press ' Go back to initial screen
             Sleep cSAP_MEDIUM_WAIT_MS
             ' Store error and skip
             dataOutputArray(outputRow, 1) = statusMessage
             GoTo NextIteration
        End If
        Err.Clear ' Clear potential error from FindById
        On Error GoTo MM03ErrorHandler ' Restore main handler

        ' --- Step 5: Extract Data from Basic Data 1 View ---
        Debug.Print "  - Attempting to extract data from Basic Data 1 view..."
        If WaitForSessionReady(objSess, cMAX_BUSY_CHECKS, cBUSY_WAIT_MS) = False Then GoTo MM03Cleanup

        ' Extract Product Hierarchy
        On Error Resume Next ' Handle error specifically for this field
        prodHier = objSess.FindById(cPROD_HIER_FIELD_ID).Text
        dataFieldErr = Err.Number: Err.Clear
        On Error GoTo MM03ErrorHandler ' Restore handler
        If dataFieldErr <> 0 Then
            Debug.Print "    - Warning: Error getting Product Hierarchy (" & cPROD_HIER_FIELD_ID & "): #" & dataFieldErr
            prodHier = "Error reading field"
        End If

        ' Extract Old Material Number
        On Error Resume Next ' Handle error specifically for this field
        oldMatNum = objSess.FindById(cOLD_MAT_FIELD_ID).Text
        dataFieldErr = Err.Number: Err.Clear
        On Error GoTo MM03ErrorHandler ' Restore handler
        If dataFieldErr <> 0 Then
            Debug.Print "    - Warning: Error getting Old Material Number (" & cOLD_MAT_FIELD_ID & "): #" & dataFieldErr
            oldMatNum = "Error reading field"
        End If

        Debug.Print "    - Product Hierarchy: '" & prodHier & "'"
        Debug.Print "    - Old Material Num: '" & oldMatNum & "'"

        ' --- Step 6: Extract Creation / Last Changed Info ---
        Debug.Print "  - Attempting to extract creation/change info..."
        Set infoPopup = Nothing ' Reset variable
        createdByText = "Not Found" ' Initialize default values
        lastChangedByText = "Not Found"

        On Error Resume Next ' Handle error if Info button doesn't exist or press fails
        objSess.FindById(cINFO_BTN_ID).press ' Press the Info button
        infoBtnErr = Err.Number: Err.Clear
        On Error GoTo MM03ErrorHandler ' Restore handler

        If infoBtnErr <> 0 Then
            Debug.Print "    - Warning: Could not press Info button (" & cINFO_BTN_ID & "): Error #" & infoBtnErr
            createdByText = "Info Btn Error" ' Indicate button error
            lastChangedByText = "Info Btn Error"
            GoTo StoreDataInArray ' Skip info extraction if button fails
        End If

        Sleep cSAP_MEDIUM_WAIT_MS ' Wait for Info popup

        ' Check if Info popup appeared
        On Error Resume Next
        Set infoPopup = objSess.FindById(cINFO_POPUP_ID, False)
        infoPopupErr = Err.Number: Err.Clear
        On Error GoTo MM03ErrorHandler

        If infoPopupErr = 0 And Not infoPopup Is Nothing Then
            Debug.Print "  - Info popup (wnd[1]) detected. Iterating labels..."
            ' Iterate through labels and capture full text
            Set userArea = Nothing ' Reset user area object
            On Error Resume Next ' Handle error finding user area
            Set userArea = infoPopup.FindById(cINFO_POPUP_USER_AREA_ID) ' Get the user area container
            infoAreaErr = Err.Number: Err.Clear
            On Error GoTo MM03ErrorHandler

            If infoAreaErr = 0 And Not userArea Is Nothing Then
                Const createdByKey As String = "Created by"
                Const changedByKey As String = "Last changed by" ' Keyword for last changed

                On Error Resume Next ' Ignore errors iterating children (e.g., unexpected object type)
                For Each child In userArea.Children
                    If TypeName(child) = "GuiLabel" Then ' Check if it's a label (more robust than .Type)
                        labelText = Trim$(child.Text)
                        ' Debug.Print "    - Checking Label: '" & labelText & "'" ' Uncomment for detailed debugging

                        ' Check for "Created by" - Only capture the first time
                        If InStr(1, labelText, createdByKey, vbTextCompare) > 0 And createdByText = "Not Found" Then
                            createdByText = labelText ' Store the entire label text
                            Debug.Print "      - Found Created By Text: '" & createdByText & "'"
                        End If

                        ' Check for "Last changed by" - Only capture the first time
                        If InStr(1, labelText, changedByKey, vbTextCompare) > 0 And lastChangedByText = "Not Found" Then
                           lastChangedByText = labelText ' Store the entire label text
                           Debug.Print "      - Found Last Changed By Text: '" & lastChangedByText & "'"
                        End If
                    End If
                    ' Optional optimization: Exit loop if both found
                    If createdByText <> "Not Found" And lastChangedByText <> "Not Found" Then Exit For
                Next child ' End loop through children
                If Err.Number <> 0 Then Debug.Print "      - Warning: Error during label iteration: " & Err.Description: Err.Clear
                On Error GoTo MM03ErrorHandler ' Restore handler
            Else
                 Debug.Print "    - Warning: Could not find user area (" & cINFO_POPUP_USER_AREA_ID & ") in Info popup: Error #" & infoAreaErr
                 createdByText = "Info Area Error"
                 lastChangedByText = "Info Area Error"
            End If
            Set userArea = Nothing ' Release user area object

            ' Close the Info popup
            On Error Resume Next ' Handle error pressing back button
            infoPopup.FindById(cINFO_POPUP_BACK_BTN_ID).press ' Press Back button
            If Err.Number <> 0 Then Debug.Print "    - Warning: Could not press Back button on Info popup.": Err.Clear
            On Error GoTo MM03ErrorHandler
            Sleep cSAP_SHORT_WAIT_MS
        Else
            Debug.Print "  - Info popup (wnd[1]) did not appear or error occurred (" & infoPopupErr & "). Skipping creation/change info."
            createdByText = "Info Popup Error"
            lastChangedByText = "Info Popup Error"
        End If
        Set infoPopup = Nothing ' Release object

StoreDataInArray:
        ' --- Step 7: Store Extracted Data in Array ---
        Debug.Print "  - Storing data in array for item " & i & "..."
        dataOutputArray(outputRow, 1) = statusMessage ' Col C
        dataOutputArray(outputRow, 2) = prodHier      ' Col D
        dataOutputArray(outputRow, 3) = oldMatNum     ' Col E
        dataOutputArray(outputRow, 4) = createdByText ' Col F
        dataOutputArray(outputRow, 5) = lastChangedByText ' Col G

        ' --- Step 8: Navigate Back for Next Material ---
        Debug.Print "  - Pressing Back to return to initial MM03 screen..."
        If WaitForSessionReady(objSess, cMAX_BUSY_CHECKS, cBUSY_WAIT_MS) = False Then GoTo MM03Cleanup
        On Error Resume Next ' Ignore error if already back or button not found
        objSess.FindById(cMAIN_BACK_BTN_ID).press
        If Err.Number <> 0 Then Debug.Print "    - Info: Could not press main Back button (already back?).": Err.Clear
        On Error GoTo MM03ErrorHandler
        Sleep cSAP_MEDIUM_WAIT_MS ' Wait before processing next material

NextIteration: ' Label to jump to for skipping a material
        DoEvents ' Allow Excel to process events, prevents "Not Responding" for long loops
    Next i ' End of the main For loop processing materials

    Debug.Print "-----------------------------------------------------"
    Debug.Print "STEP 9: Finished processing all materials."
    Application.StatusBar = "Writing data to Excel..." ' Update status

    ' --- *** OPTIMIZATION: Write the entire array to Excel *** ---
    If totalMaterials > 0 Then ' Only write if there was data to process
        ' Define the top-left cell of the output range (Status column, starting row)
        Set outputRange = ws.Range(cSTATUS_MSG_COL & cSTART_ROW)
        ' Resize the range to match the array dimensions and write the data
        outputRange.Resize(UBound(dataOutputArray, 1), UBound(dataOutputArray, 2)).value = dataOutputArray
        Debug.Print "  - Data array written to worksheet starting at cell " & outputRange.Address & "."
        Set outputRange = Nothing
    Else
        Debug.Print "  - No data processed, skipping write to Excel."
    End If

    ' --- Final Navigation Back (Optional) ---
    ' Go back one more time from the initial MM03 screen if desired
    Debug.Print "  - Pressing Back one last time from MM03 initial screen..."
    If WaitForSessionReady(objSess, cMAX_BUSY_CHECKS, cBUSY_WAIT_MS) = False Then GoTo MM03Cleanup
    On Error Resume Next ' Ignore error if already back at main menu
    objSess.FindById(cMAIN_BACK_BTN_ID).press
    If Err.Number <> 0 Then Debug.Print "    - Info: Could not press final Back button (already back?).": Err.Clear
    On Error GoTo MM03ErrorHandler
    Sleep cSAP_SHORT_WAIT_MS

MM03Cleanup:
    ' --- Cleanup for this Subroutine ---
    Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Running Cleanup for RunGUIScript..."
    Application.StatusBar = False ' *** Reset status bar on exit ***
    ' Release local objects
    Set ws = Nothing
    Set objExcelApp = Nothing
    Set mm03FieldCheck = Nothing
    Set selectViewsPopup = Nothing
    Set infoPopup = Nothing
    Set errorPopup = Nothing
    Set userArea = Nothing
    Set child = Nothing
    Set inputDataRange = Nothing
    Set outputRange = Nothing
    If totalMaterials > 0 Then ' Only erase arrays if they were dimensioned
        Erase dataOutputArray ' Clear the array memory
        Erase materialInputArray
    End If
    Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Exiting RunGUIScript."
    Exit Sub ' Normal exit

MM03ErrorHandler:
    ' --- Error Handler for this Subroutine ---
    errNumRun = Err.Number
    errDescRun = Err.Description
    errSourceRun = Err.Source
    Debug.Print "!!!!!!!!!!!!!!!!!!! ERROR in RunGUIScript !!!!!!!!!!!!!!!!!!!"
    Debug.Print "  Err #: " & errNumRun: Debug.Print "  Source: " & errSourceRun: Debug.Print "  Desc: " & errDescRun
    If i > 0 And i <= totalMaterials Then Debug.Print "  Processing Item: " & i & ", Material: '" & materialNumber & "'" ' Add context
    Debug.Print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"

    ' Write error message to current row in output array if possible
    If totalMaterials > 0 And outputRow > 0 And outputRow <= UBound(dataOutputArray, 1) Then
        On Error Resume Next ' Avoid error loop if writing to array fails
        dataOutputArray(outputRow, 1) = "Error: " & errDescRun ' Status column
        On Error GoTo 0 ' Turn off Resume Next
    End If

    MsgBox "Error during MM03 script execution:" & vbCrLf & _
           "Item: " & i & " (Material: " & materialNumber & ")" & vbCrLf & _
           "Err #: " & errNumRun & vbCrLf & _
           "Desc: " & errDescRun, vbCritical, "MM03 Script Error"

    ' Attempt basic SAP cleanup after error
    On Error Resume Next ' Ignore errors during cleanup
    If Not objSess Is Nothing Then
        Debug.Print "Attempting SAP cleanup after error..."
        If objSess.Busy Then Sleep 500
        ' Try to close popups first
        objSess.FindById(cERROR_POPUP_ID, False).Close: Sleep cSAP_SHORT_WAIT_MS
        objSess.FindById(cVIEWS_POPUP_ID, False).Close: Sleep cSAP_SHORT_WAIT_MS ' Close views/info popup too
        ' Try to get back to main screen or exit
        If objSess.ActiveWindow.Name = "wnd[0]" Then objSess.FindById(cMAIN_EXIT_BTN_ID).press: Sleep cSAP_SHORT_WAIT_MS ' Exit button
        Debug.Print "SAP cleanup attempt finished."
    End If
    On Error GoTo 0 ' Restore default error handling

    Resume MM03Cleanup ' Go to cleanup section after handling error

End Sub


' //========================================================================
' // Function: WaitForSessionReady (Helper Function - Private to this Module)
' // Purpose: Waits briefly if the SAP session is busy.
' // Returns: True if session became ready, False if timeout reached.
' //========================================================================
Private Function WaitForSessionReady(ByVal session As GuiSession, ByVal MaxChecks As Integer, ByVal WaitMs As Long) As Boolean
    Dim checks As Integer
    WaitForSessionReady = True ' Assume ready initially
    On Error Resume Next ' Ignore error if session object is invalid

    Do While session.Busy
        checks = checks + 1
        If checks > MaxChecks Then
            Debug.Print "  - TIMEOUT: Session remained busy after " & MaxChecks * WaitMs & "ms."
            MsgBox "SAP session remained busy. Please check the SAP GUI.", vbExclamation
            WaitForSessionReady = False ' Indicate timeout
            Exit Do
        End If
        Sleep WaitMs
        DoEvents ' Allow other processes
    Loop

    If Err.Number <> 0 Then
         Debug.Print "  - ERROR: Error checking session busy status (Err: " & Err.Number & "). Assuming not ready."
         WaitForSessionReady = False ' Indicate error
         Err.Clear
    End If
    On Error GoTo 0 ' Restore default error handling

End Function
