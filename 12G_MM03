Option Explicit

' --- Windows API Declaration for OLE Message Filter ---
' Included from Code1_MB51 for potential future use or robustness, though not strictly required by MM03 logic shown
Private Declare PtrSafe Function CoRegisterMessageFilter Lib "OLE32.DLL" _
    (ByVal lpMessageFilter As LongPtr, ByRef lplpMessageFilter As LongPtr) As Long ' HRESULT return

' --- Windows API Declaration for Sleep Function ---
#If VBA7 Then
    Public Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As LongPtr) ' Sleep API for 64-bit VBA
#Else
    Public Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long) ' Sleep API for 32-bit VBA
#End If

' --- Global Objects required across calls ---
' *** USING EARLY BINDING - REQUIRES REFERENCE TO "SAP GUI Scripting API" Library ***
Public objGui       As GuiApplication ' SAP GUI Application object
Public objConn      As GuiConnection ' SAP Connection object
Public objSess      As GuiSession ' SAP Session object
Public objSBar      As GuiStatusbar ' SAP Status Bar object

' //========================================================================
' // Sub: StartExtract
' // Purpose: Main entry point. Handles all connection/session logic.
' // Adapted from Code1_MB51.txt
' //========================================================================
Public Sub StartExtract() ' Main Sub to start the process

    ' --- CONFIGURATION CONSTANTS (ADJUST AS NEEDED) ---
    Const cTARGET_SYSTEM_ID_CLIENT As String = "PEA100" ' <<< From Code2_MM03 / Code1_MB51 - Verify SystemID+Client
    Const cTARGET_SYSTEM_DESCRIPTION As String = "9A. Symphony ECC Production" ' <<< From Code1_MB51 - ADJUST: EXACT Description for SSO LOGIN if needed
    Const cSAP_LOGON_PATH As String = "C:\Program Files (x86)\SAP\FrontEnd\SAPgui\saplogon.exe" ' <<< From Code1_MB51 - VERIFY/ADJUST Path if SSO needed
    Const cMAX_SESSIONS As Integer = 6 ' From Code2_MM03 / Code1_MB51
    Const cLOGON_TIMEOUT_SECONDS As Long = 60 ' Timeout for SSO login attempt
    Const cSHORT_WAIT_MS As Long = 1000 ' Standard short wait time (milliseconds)
    Const cMEDIUM_WAIT_MS As Long = 3000 ' Wait after potentially slow actions like /o or /n
    Const cLONG_WAIT_MS As Long = 5000 ' Longer wait if needed (e.g., after popup handling)
    Const cSESSION_CHECK_ATTEMPTS As Integer = 20 ' Number of times to check for new session after /o
    Const cSESSION_CHECK_INTERVAL_MS As Long = 1000 ' Wait between session count checks (milliseconds)


    ' --- Local Variables (Copied from Code1_MB51 StartExtract) ---
    Dim SapGuiAuto As Object ' Late binding object for GetObject("SAPGUI")
    Dim TargetConn As GuiConnection ' Connection object matching target system
    Dim W_conn As GuiConnection ' Loop variable for connections
    Dim W_Sess As GuiSession ' Loop variable for sessions
    Dim FirstFoundSess As GuiSession ' First usable session found on existing connection
    Dim NewSess As GuiSession ' Newly created session object
    Dim TargetSessSSO As GuiSession ' Session object created via SSO
    Dim SessionObtained As Boolean ' Flag indicating if a usable session was found/created
    Dim Session_Nr_All_Before As Long ' Session count before attempting /o
    Dim Session_Nr_All_After As Long  ' Session count after attempting /o
    Dim i As Long ' Loop counter for connections
    Dim j As Long ' Loop counter for sessions
    Dim highestSessNum As Long ' Highest session number found (used for identifying new session)
    Dim currentSessNum As Long ' Current session number in loop
    Dim MsgResult As VbMsgBoxResult ' Result from MsgBox calls
    Dim currentTransaction As String ' Transaction code of a session
    Dim foundConnection As Boolean ' Flag indicating if a connection to the target system was found
    Dim attempts As Integer ' Counter for retry loops (e.g., GetObject, session check)
    Dim startTime As Single ' Timer start value for timeouts
    Dim popupWnd As GuiModalWindow ' Object for handling popups (like Generate Session)

    ' --- Mark Start of Execution & Initialize ---
    Debug.Print vbCrLf & "====================================================="
    Debug.Print "   *** NEW RUN START: StartExtract (MM03) *** (" & Format(Now, "yyyy-mm-dd hh:nn:ss") & ")" ' Log start time
    Debug.Print "====================================================="

    On Error GoTo ErrorHandler ' Set main error handler for this sub

    Application.ScreenUpdating = False ' Disable screen updates for performance
    Application.Calculation = xlCalculationManual ' Set calculation to manual for performance

    SessionObtained = False ' Initialize flag
    foundConnection = False ' Initialize flag
    Set TargetConn = Nothing ' Initialize object variable
    Set FirstFoundSess = Nothing ' Initialize object variable

    ' Log configuration values
    Debug.Print "Target System (ID+Client for Find): '" & cTARGET_SYSTEM_ID_CLIENT & "'" '
    Debug.Print "Target System (Description for SSO Login): '" & cTARGET_SYSTEM_DESCRIPTION & "'" '
    Debug.Print "SAP Logon Path: '" & cSAP_LOGON_PATH & "'" '
    Debug.Print "Max Sessions: " & cMAX_SESSIONS '
    Debug.Print "SSO Logon Timeout: " & cLOGON_TIMEOUT_SECONDS & "s" '
    Debug.Print "-----------------------------------------------------" '

    ' Basic check: Target System ID must be defined
    If Trim$(cTARGET_SYSTEM_ID_CLIENT) = "" Then '
        MsgBox "Config Error: Target system ID+Client constant (cTARGET_SYSTEM_ID_CLIENT) not defined.", vbCritical '
        GoTo Cleanup ' Exit if configuration is missing
    End If

    ' --- STEP 1: Check Existing Global Session ---
    Debug.Print "STEP 1: Checking for existing global session object (objSess)..." '
    If Not objSess Is Nothing Then ' Check if the global variable holds an object
        Debug.Print "  - Global objSess exists. Checking validity for system '" & cTARGET_SYSTEM_ID_CLIENT & "'..." '
        On Error Resume Next ' Temporarily ignore errors during check
        Dim tempSysName As String, tempClient As String, tempTCode As String ' Temp variables for session info
        tempSysName = objSess.Info.SystemName ' Attempt to read session info
        tempClient = objSess.Info.Client '
        tempTCode = objSess.Info.TRANSACTION ' Check if session responds '
        Dim sessInfoErr As Long: sessInfoErr = Err.Number ' Store potential error number
        Err.Clear ' Clear error object
        On Error GoTo ErrorHandler ' Restore main error handler

        If sessInfoErr = 0 Then ' If reading session info was successful
            If tempSysName & tempClient = cTARGET_SYSTEM_ID_CLIENT Then ' Check if it's the correct system
                ' Session is valid and for the correct system
                Debug.Print "  - SUCCESS: Global objSess is valid and matches target system." '
                If objConn Is Nothing Then Set objConn = objSess.Parent: Debug.Print "  - Set global objConn from objSess.Parent." ' Set global connection if needed
                If objSBar Is Nothing Then Set objSBar = objSess.FindById("wnd[0]/sbar"): Debug.Print "  - Set global objSBar from objSess." ' Set global status bar if needed
                SessionObtained = True ' Mark session as obtained
                Debug.Print "  - Proceeding with existing global session #" & objSess.Info.SessionNumber ' Log session number
                GoTo RunReportScript ' Jump directly to running the script
            Else
                 Debug.Print "  - Global objSess is for wrong system ('" & tempSysName & tempClient & "'). Clearing globals." ' Log mismatch
                 Set objSess = Nothing: Set objConn = Nothing: Set objSBar = Nothing: Set objGui = Nothing ' Clear global objects as they are invalid for this run
            End If
        Else
            Debug.Print "  - Global objSess is invalid/closed (Error accessing Info: " & sessInfoErr & "). Clearing globals." ' Log invalid session
            Set objSess = Nothing: Set objConn = Nothing: Set objSBar = Nothing: Set objGui = Nothing ' Clear global objects
        End If
    Else
        Debug.Print "  - Global objSess is Nothing." ' Log that no global session exists initially
    End If

    ' --- STEP 2: Get SAP GUI Scripting Engine ---
    Debug.Print "-----------------------------------------------------" '
    Debug.Print "STEP 2: Getting SAP GUI Scripting Engine..." '
    If objGui Is Nothing Then ' Check if global GUI object exists
        Debug.Print "  - Global objGui is Nothing. Attempting GetObject(""SAPGUI"")..." '
        On Error Resume Next ' Temporarily ignore errors
        Set SapGuiAuto = GetObject("SAPGUI") ' Try to get running SAP GUI application
        Dim getObjectErrNum As Long: getObjectErrNum = Err.Number ' Store potential error
        Err.Clear ' Clear error object
        On Error GoTo ErrorHandler ' Restore main error handler

        If getObjectErrNum = 0 And Not SapGuiAuto Is Nothing Then ' If GetObject was successful
            Debug.Print "  - GetObject(""SAPGUI"") successful. Attempting GetScriptingEngine..." '
            Set objGui = SapGuiAuto.GetScriptingEngine ' Get the scripting engine from the SAP GUI object
            If objGui Is Nothing Then ' Check if scripting engine was obtained
                MsgBox "Error: Could not get Scripting Engine from SAPGUI object. Ensure SAP GUI Scripting is enabled.", vbCritical ' Inform user
                GoTo Cleanup ' Exit
            End If
            Debug.Print "  - SUCCESS: Obtained SAP GUI Scripting Engine via GetObject." ' Log success
        Else
            Debug.Print "  - GetObject(""SAPGUI"") failed (Error: " & getObjectErrNum & "). SAP Logon may not be running or scripting might be disabled." ' Log failure
            Set SapGuiAuto = Nothing ' Ensure it's clear '
            ' Note: Path B (SSO Login) will attempt to start SAP Logon if GetObject fails.
        End If
    Else
        Debug.Print "  - Using existing global objGui object." ' Log use of existing object
    End If

    ' --- STEP 3: Find Existing Connection ---
    Debug.Print "-----------------------------------------------------" '
    Debug.Print "STEP 3: Finding existing connection for System/Client '" & cTARGET_SYSTEM_ID_CLIENT & "'..." '
    If Not objGui Is Nothing Then ' Proceed only if we have a valid GUI object
         foundConnection = False ' Reset flag for this search
        Debug.Print "  - Looping through " & objGui.Children.Count & " GUI children (connections)..." ' Log number of connections
        For i = 0 To objGui.Children.Count - 1 ' Loop through each connection
            Set W_conn = Nothing ' Ensure clean slate for loop '
            On Error Resume Next ' Handle potential errors accessing connection properties '
            Set W_conn = objGui.Children(CLng(i)) ' Get connection object by index
            If Err.Number <> 0 Then ' If error accessing connection
                Debug.Print "    - Error accessing connection at index " & i & ". Skipping." ' Log error
                Err.Clear ' Clear error
                GoTo NextConnection ' Skip to next connection '
            End If
            On Error GoTo ErrorHandler ' Restore main handler '

            If Not W_conn Is Nothing Then ' If connection object was retrieved successfully
                 Debug.Print "    - Checking Connection Index " & i & " (Description: '" & W_conn.Description & "')..." ' Log connection description
                 If W_conn.Children.Count > 0 Then ' Check if the connection has any sessions
                     Set W_Sess = Nothing ' Ensure clean slate '
                     On Error Resume Next ' Handle potential errors accessing session properties '
                     Set W_Sess = W_conn.Children(0) ' Check the first session of this connection
                     If Err.Number <> 0 Then ' If error accessing session
                         Debug.Print "      - Error accessing first session of connection " & i & ". Skipping connection." ' Log error
                         Err.Clear ' Clear error
                         GoTo NextConnection ' Skip to next connection
                     End If
                     On Error GoTo ErrorHandler ' Restore main handler '

                     If Not W_Sess Is Nothing Then ' If first session object was retrieved
                         On Error Resume Next ' Handle potential errors accessing Info properties '
                         Dim sysInfoCheck As String: sysInfoCheck = W_Sess.Info.SystemName & W_Sess.Info.Client ' Get system/client info
                         Dim infoErr As Long: infoErr = Err.Number ' Store potential error
                         Err.Clear ' Clear error
                         On Error GoTo ErrorHandler ' Restore handler

                         If infoErr = 0 Then ' If reading info was successful
                            Debug.Print "      - First session System/Client: '" & sysInfoCheck & "'" ' Log system/client
                            If sysInfoCheck = cTARGET_SYSTEM_ID_CLIENT Then ' Check if it matches the target
                                Set TargetConn = W_conn ' Found the connection, store it
                                 foundConnection = True ' Set flag
                                 Debug.Print "      - MATCH FOUND! Storing this connection." ' Log match
                                 Set W_Sess = Nothing ' Release temp session object
                                 Exit For ' Exit the connection loop, we found what we need
                            End If '
                         Else
                            Debug.Print "      - Error reading Info for first session (Error: " & infoErr & "). Cannot verify system." ' Log info reading error
                         End If
                         Set W_Sess = Nothing ' Release temp session object
                     Else
                         Debug.Print "      - Could not get first session object for connection " & i & "." ' Log failure to get session object
                     End If
                 Else
                     Debug.Print "    - Connection Index " & i & " has no sessions. Skipping." ' Log connection with no sessions
                 End If
            Else
                 Debug.Print "    - Could not get connection object at index " & i & "." ' Log failure to get connection object
            End If
NextConnection: ' Label to jump to next iteration of connection loop
             Set W_conn = Nothing ' Release loop connection object '
        Next i ' Next connection
        If Not foundConnection Then Debug.Print "  - No existing connection found matching '" & cTARGET_SYSTEM_ID_CLIENT & "'." ' Log if no match found
    Else
        Debug.Print "  - Cannot search for connections because objGui is not valid." ' Log if GUI object is missing
    End If


    ' --- STEP 4: Handle Based on Connection Found Status ---
    Debug.Print "-----------------------------------------------------" '
    Debug.Print "STEP 4: Determining session strategy..." '

    If foundConnection And Not TargetConn Is Nothing Then ' PATH A: Use existing connection
        ' --- PATH A: Connection Found ---
        Debug.Print "  - PATH A: Existing connection found. Checking for usable session..." '
        Set objConn = TargetConn ' Set global connection object
        Session_Nr_All_Before = objConn.Children.Count ' Get session count BEFORE potentially creating new one '
        Debug.Print "    - Connection has " & Session_Nr_All_Before & " session(s)." ' Log session count

        ' Check for an IDLE session (main menu or session manager)
        Debug.Print "    - Checking for an IDLE session (SESSION_MANAGER, SMEN, S000)..." '
        Set FirstFoundSess = Nothing ' Reset variable
        SessionObtained = False ' Reset flag
        For j = 0 To objConn.Children.Count - 1 ' Loop through sessions on this connection
            Set W_Sess = Nothing: On Error Resume Next ' Reset and prepare for potential error
            Set W_Sess = objConn.Children(CLng(j)) ' Get session object
            If Err.Number <> 0 Then ' Handle error getting session object
                Debug.Print "      - Error accessing session at index " & j & ". Skipping." ' Log error
                Err.Clear: GoTo NextIdleCheck ' Skip to next session
            End If
            On Error GoTo ErrorHandler ' Restore main handler '

            If Not W_Sess Is Nothing Then ' If session object obtained
                Debug.Print "      - Checking Session Index " & j & " (ID: " & W_Sess.Info.SessionNumber & ")" ' Log session number
                If FirstFoundSess Is Nothing Then Set FirstFoundSess = W_Sess ' Store the first valid session found, needed if we have to create a new one later
                On Error Resume Next ' Prepare for potential error reading transaction code
                Dim idleCheckTCode As String: idleCheckTCode = W_Sess.Info.TRANSACTION ' Get transaction code
                Dim idleErr As Long: idleErr = Err.Number ' Store potential error
                 Err.Clear ' Clear error
                On Error GoTo ErrorHandler ' Restore handler
                If idleErr = 0 Then ' If transaction code read successfully
                    Debug.Print "        - Transaction Code: '" & idleCheckTCode & "'" ' Log transaction code
                    Select Case UCase(idleCheckTCode) ' Check if it's an idle transaction
                        Case "SESSION_MANAGER", "SMEN", "S000" ' List of idle transaction codes
                            Set objSess = W_Sess ' Found an idle session, set it as the global session
                            On Error Resume Next ' Attempt to get status bar
                            Set objSBar = objSess.FindById("wnd[0]/sbar") '
                            On Error GoTo ErrorHandler ' Restore handler
                            If objSBar Is Nothing Then Debug.Print "        - Warning: Could not get status bar for idle session." ' Log if status bar fails
                            SessionObtained = True ' Mark session as obtained
                            Debug.Print "        - SUCCESS: Found suitable idle session #" & objSess.Info.SessionNumber ' Log success
                            GoTo RunReportScript ' Found one, exit loop and proceed to run script '
                    End Select '
                Else
                    Debug.Print "        - Error getting transaction code (Error: " & idleErr & "). Skipping idle check." ' Log error reading transaction code
                End If
            Else
                 Debug.Print "      - Could not get session object at index " & j & "." ' Log failure to get session object
            End If
NextIdleCheck: ' Label to jump to next iteration of session loop
            Set W_Sess = Nothing ' Release loop variable '
        Next j ' Next session

        ' No idle session found, try to CREATE a new one using /o command
        If Not SessionObtained Then ' If loop finished without finding an idle session
            Debug.Print "    - No idle session found." ' Log status
            If FirstFoundSess Is Nothing Then ' Check if we even found *any* valid session on the connection
                MsgBox "Error: No sessions could be accessed on the found connection '" & objConn.Description & "'. Cannot create new session.", vbCritical ' Inform user
                GoTo Cleanup ' Exit
            End If

            If Session_Nr_All_Before < cMAX_SESSIONS Then ' Check if session limit allows creating a new one
                 Debug.Print "    - Session limit not reached (" & Session_Nr_All_Before & "/" & cMAX_SESSIONS & "). Attempting /o in session #" & FirstFoundSess.Info.SessionNumber & "..." ' Log attempt
                 On Error GoTo ErrorHandler ' Ensure main handler is active

                 ' Use the first valid session found to execute the /o command
                 Set objSess = FirstFoundSess ' Temporarily set objSess to the session where /o will be executed '
                 Debug.Print "      - Checking if wnd[0] of session #" & objSess.Info.SessionNumber & " is accessible..." '
                 If objSess.ActiveWindow.Name <> "wnd[0]" Then ' Check if the session is at the main window
                     ' *** Try navigating back to main menu first if not already there ***
                     Debug.Print "      - Active window is not wnd[0] (" & objSess.ActiveWindow.Name & "). Attempting /n to go back..." ' Log navigation attempt
                     On Error Resume Next ' Prepare for potential error during /n
                     objSess.FindById("wnd[0]/tbar[0]/okcd").Text = "/n" ' Enter /n in OK code field
                     objSess.FindById("wnd[0]").sendVKey 0 ' Press Enter
                     Sleep cMEDIUM_WAIT_MS ' Wait after /n '
                     If Err.Number <> 0 Then ' Check for error during /n
                        Err.Clear ' Clear the error '
                        On Error GoTo ErrorHandler ' Restore handler '
                        MsgBox "Error: Could not execute /n in session #" & objSess.Info.SessionNumber & " to return to main menu before attempting /o.", vbExclamation ' Inform user
                        Set objSess = Nothing ' Clear temporary session object
                        GoTo Cleanup ' Exit
                     End If '
                     On Error GoTo ErrorHandler ' Restore handler '
                     ' Re-check active window after /n attempt
                     If objSess.ActiveWindow.Name <> "wnd[0]" Then '
                         MsgBox "Error: Still not in main window (wnd[0]) after attempting /n in session #" & objSess.Info.SessionNumber & ". Cannot execute /o reliably.", vbExclamation ' Inform user
                        Set objSess = Nothing ' Clear temporary session object
                        GoTo Cleanup ' Exit
                     End If
                     Debug.Print "      - Successfully navigated back using /n." ' Log success
                 End If

                 Debug.Print "      - Executing /o command in session #" & objSess.Info.SessionNumber & "..." ' Log /o command
                 objSess.FindById("wnd[0]/tbar[0]/okcd").Text = "/o" ' Enter /o in OK code field
                 objSess.FindById("wnd[0]").sendVKey 0 ' Press Enter
                 ' Keep objSess pointing to FirstFoundSess for potential popup check on this originating session

                 Debug.Print "      - Waiting (" & cMEDIUM_WAIT_MS & "ms) for potential popup (wnd[1]) or session creation..." ' Log wait
                 Sleep cMEDIUM_WAIT_MS ' Wait for SAP to react

                 ' --- Handle Potential 'Generate New Session' Popup (wnd[1]) on the originating session ---
                 Set popupWnd = Nothing ' Reset popup variable '
                 On Error Resume Next ' Prepare for potential error finding popup
                 ' *** Try to find the popup on the SESSION where /o was executed ***
                 Set popupWnd = objSess.FindById("wnd[1]", False) ' False = Don't raise error if not found '
                 Dim popupErr As Long: popupErr = Err.Number: Err.Clear ' Store error, clear it
                 On Error GoTo ErrorHandler ' Restore handler

                 If popupErr = 0 And Not popupWnd Is Nothing Then ' If popup window object was found
                    Debug.Print "      - Popup (wnd[1]) detected on session #" & objSess.Info.SessionNumber & ". Text: '" & popupWnd.Text & "'" ' Log popup detection
                    ' Check if it's the expected "Generate session" popup (text might vary slightly by version/language)
                    If InStr(1, popupWnd.Text, "Generate", vbTextCompare) > 0 Or _
                       InStr(1, popupWnd.Text, "session", vbTextCompare) > 0 Or _
                       InStr(1, popupWnd.Text, "Back-End", vbTextCompare) > 0 Then ' Check for keywords
                        Const GENERATE_BUTTON_ID As String = "wnd[1]/tbar[0]/btn[5]" ' <<< CHECK THIS ID WITH SCRIPTING TRACKER IF NEEDED
                        Debug.Print "      - Attempting to press Generate button (" & GENERATE_BUTTON_ID & ") on popup..." ' Log button press attempt
                        On Error Resume Next ' Prepare for potential error pressing button
                        popupWnd.FindById(GENERATE_BUTTON_ID).press ' Press the generate button
                        If Err.Number <> 0 Then ' If button press failed
                             Debug.Print "        - Generate button press failed (Error: " & Err.Description & "). Trying Enter (VKey 0)..." ' Log failure, try Enter key
                            Err.Clear ' Clear error
                            popupWnd.sendVKey 0 ' Send Enter key
                            If Err.Number <> 0 Then ' If Enter key also failed
                                Debug.Print "        - Enter (VKey 0) also failed (Error: " & Err.Description & "). Giving up on popup." ' Log failure
                                Err.Clear ' Clear error
                            Else
                                Debug.Print "        - Enter (VKey 0) sent successfully to popup." ' Log success with Enter
                            End If
                        Else
                            Debug.Print "        - Generate button pressed successfully on popup." ' Log success with button
                        End If
                        On Error GoTo ErrorHandler ' Restore handler
                        Debug.Print "      - Waiting (" & cLONG_WAIT_MS & "ms) after handling popup for session to fully initialize..." ' Log longer wait
                        Sleep cLONG_WAIT_MS ' Wait longer after popup interaction '
                    Else
                        Debug.Print "      - Popup (wnd[1]) detected, but text doesn't match expected 'Generate'/'Back-End' popup. Ignoring." ' Log unexpected popup
                        ' Optional: Add code here to handle unexpected popups if necessary
                        ' Close the unexpected popup?
                        On Error Resume Next ' Attempt to close it
                         popupWnd.Close '
                        On Error GoTo ErrorHandler ' Restore handler
                        Sleep cSHORT_WAIT_MS ' Short wait after closing
                    End If
                 Else ' If no popup was detected
                    Debug.Print "      - Popup (wnd[1]) not detected on session #" & objSess.Info.SessionNumber & ". Assuming direct session creation or delayed popup." ' Log status
                    Sleep cSHORT_WAIT_MS ' Short additional wait '
                 End If
                 Set popupWnd = Nothing ' Release popup object '
                 Set objSess = Nothing ' Release temporary handle used for /o and popup check '

                 ' --- Robust Session Finding Logic with Timeout ---
                 Debug.Print "      - Verifying session count increase and finding new session (Timeout: " & cSESSION_CHECK_ATTEMPTS * cSESSION_CHECK_INTERVAL_MS & "ms)..." ' Log verification start
                 highestSessNum = 0 ' Reset highest session number found
                 Set NewSess = Nothing ' Reset new session object
                 attempts = 0 ' Reset attempt counter
                 Do ' Start loop to wait for new session
                    attempts = attempts + 1 ' Increment counter
                    ' Re-evaluate connection children count as it should have changed
                    If objConn Is Nothing Then Err.Raise vbObjectError + 520, "StartExtract", "Connection object lost before finding new session." ' Critical error check

                    ' Refresh session count
                    On Error Resume Next ' Handle potential errors refreshing count '
                    Session_Nr_All_After = objConn.Children.Count ' Get current session count
                    Dim countErr As Long: countErr = Err.Number ' Store potential error
                    Err.Clear ' Clear error
                    On Error GoTo ErrorHandler ' Restore handler
                    If countErr <> 0 Then ' If error getting count
                        Debug.Print "        - Attempt " & attempts & ": Error getting session count (" & countErr & "). Retrying..." ' Log error
                        GoTo NextAttemptWait ' Skip processing this attempt if count failed '
                    End If

                    Debug.Print "        - Attempt " & attempts & "/" & cSESSION_CHECK_ATTEMPTS & ": Current session count = " & Session_Nr_All_After ' Log attempt and count

                    If Session_Nr_All_After > Session_Nr_All_Before Then ' Check if session count has increased
                        Debug.Print "        - Session count increased from " & Session_Nr_All_Before & " to " & Session_Nr_All_After & ". Searching for highest session number..." ' Log increase
                        For j = 0 To Session_Nr_All_After - 1 ' Loop through all current sessions
                            Set W_Sess = Nothing: On Error Resume Next ' Reset and prepare for error
                            Set W_Sess = objConn.Children(CLng(j)) ' Get session object
                            If Err.Number <> 0 Then ' Handle error getting session object
                                Debug.Print "          - Warning: Error accessing session object at index " & j & ".": Err.Clear ' Log warning
                                GoTo NextFindLoopSess ' Skip to next session
                            End If
                            On Error GoTo ErrorHandler ' Restore '

                             If Not W_Sess Is Nothing Then ' If session object obtained
                                On Error Resume Next ' Prepare for error reading session number
                                currentSessNum = W_Sess.Info.SessionNumber ' Get session number
                                 If Err.Number = 0 Then ' If session number read successfully
                                    'Debug.Print "            - Checking session #" & currentSessNum ' Verbose logging if needed
                                     If currentSessNum > highestSessNum Then ' Check if this is the highest number found so far
                                        highestSessNum = currentSessNum ' Update highest number
                                        Set NewSess = W_Sess ' Store the session object with the highest number (likely the new one)
                                        Debug.Print "            - Found new highest session: #" & highestSessNum ' Log new highest
                                     End If '
                                Else
                                    Debug.Print "          - Warning: Error reading session number for index " & j & ".": Err.Clear ' Log warning if session number read fails
                                End If
                                On Error GoTo ErrorHandler ' Restore '
                            End If '
NextFindLoopSess: ' Label to jump to next iteration of session finding loop
                            Set W_Sess = Nothing ' Release loop var '
                        Next j ' Next session in find loop

                        If Not NewSess Is Nothing Then ' Check if we identified the highest session number object
                            Debug.Print "        - Identified session with highest number: #" & NewSess.Info.SessionNumber ' Log success
                            Exit Do ' Found the new session, exit the wait loop '
                        Else
                            ' This case should be rare if count increased but no session object found
                            Debug.Print "        - Session count increased, but couldn't identify highest session number object yet. Retrying..." ' Log retry condition
                        End If
                    Else
                        Debug.Print "        - Session count (" & Session_Nr_All_After & ") has not increased yet from original (" & Session_Nr_All_Before & ")." ' Log count not increased yet
                    End If '

                    If attempts >= cSESSION_CHECK_ATTEMPTS Then ' Check if timeout reached
                        Err.Raise vbObjectError + 521, "StartExtract", "Timeout (" & cSESSION_CHECK_ATTEMPTS * cSESSION_CHECK_INTERVAL_MS & "ms) waiting for session count to increase after /o command." ' Raise timeout error
                    End If '
NextAttemptWait: ' Label to jump to wait period
                    Sleep cSESSION_CHECK_INTERVAL_MS ' Wait before next check '
                 Loop ' End of wait loop

                 ' --- Final Check and Assignment ---
                 If NewSess Is Nothing Then ' If loop finished/exited without finding the new session object
                     ' This should ideally not be reached if the loop timed out correctly via Err.Raise
                     Err.Raise vbObjectError + 522, "StartExtract", "Could not identify new session object after /o, even after session count check loop." ' Raise error
                 End If

                 Set objSess = NewSess ' Set GLOBAL session to the new one found
                 Debug.Print "      - SUCCESS: Identified new session #" & objSess.Info.SessionNumber & " created via /o." ' Log success
                 On Error Resume Next ' Attempt to get status bar for new session
                 Set objSBar = objSess.FindById("wnd[0]/sbar") '
                 On Error GoTo ErrorHandler ' Restore handler
                 If objSBar Is Nothing Then Debug.Print "      - Warning: Could not get status bar for new session #" & objSess.Info.SessionNumber & "." ' Log warning if status bar fails
                 SessionObtained = True ' Mark session as obtained
                 Debug.Print "    - Proceeding with newly created session #" & objSess.Info.SessionNumber & "." ' Log proceeding
                 GoTo RunReportScript ' Jump to run the script

            Else ' If session limit was reached
                 Debug.Print "    - Session limit reached (" & Session_Nr_All_Before & "/" & cMAX_SESSIONS & "). Cannot create new session via /o." ' Log limit reached
                 MsgResult = MsgBox("Maximum SAP sessions (" & cMAX_SESSIONS & ") reached for connection '" & objConn.Description & "'. No idle session found. Cannot create new session.", vbCritical + vbOKOnly) ' Inform user
                 GoTo Cleanup ' Exit
            End If
        End If ' End /o logic '

    Else ' PATH B: No existing connection found, or objGui was invalid initially
        ' --- PATH B: No Connection Found (or objGui was Nothing) - Attempt SSO Logon ---
        Debug.Print "  - PATH B: No existing connection found for target or objGui invalid. Attempting SSO login..." ' Log path B start
        ' --- Check if SSO Description is set (required for this path) ---
        If Trim$(cTARGET_SYSTEM_DESCRIPTION) = "" Then '
            MsgBox "Error: No existing SAP session found for '" & cTARGET_SYSTEM_ID_CLIENT & "' and SSO System Description (Constant: cTARGET_SYSTEM_DESCRIPTION) is empty. Cannot create new session via SSO.", vbCritical
            GoTo Cleanup
        End If
        If Trim$(cSAP_LOGON_PATH) = "" Or Dir(cSAP_LOGON_PATH) = "" Then ' Check if SAP Logon path is valid
             MsgBox "Error: SAP Logon path (Constant: cSAP_LOGON_PATH) is empty or invalid. Cannot start SAP Logon for SSO.", vbCritical
             GoTo Cleanup
        End If

        Debug.Print "    - Using Description: '" & cTARGET_SYSTEM_DESCRIPTION & "'" ' Log description being used

        ' --- Start of Integrated EstablishSsoConnection Logic ---
        On Error GoTo SsoLoginErrorHandler ' Use specific error handler for SSO process

        Set objConn = Nothing: Set objSess = Nothing: Set objSBar = Nothing ' Reset globals for new login attempt

        ' Step 1: Get/Ensure SAP GUI Scripting Engine (might involve starting SAP Logon)
        If objGui Is Nothing Then ' If we don't have a GUI object yet
            Debug.Print "    - SSO Step 1: objGui is Nothing. Attempting GetObject/Start Logon..." '
            On Error Resume Next ' Prepare for GetObject error
            Set SapGuiAuto = GetObject("SAPGUI") ' Try to get running SAP GUI
            Dim getObjErrSso As Long: getObjErrSso = Err.Number: Err.Clear ' Store error, clear it
            On Error GoTo SsoLoginErrorHandler ' Restore SSO handler
            If getObjErrSso <> 0 Or SapGuiAuto Is Nothing Then ' If GetObject failed
                 Debug.Print "      - GetObject failed. Starting SAP Logon: '" & cSAP_LOGON_PATH & "'" ' Log starting SAP Logon
                 Dim shellResult As Variant: On Error Resume Next ' Prepare for Shell error
                 shellResult = Shell(cSAP_LOGON_PATH, vbNormalFocus) ' Execute SAP Logon
                 Dim shellErr As Long: shellErr = Err.Number: Dim shellDesc As String: shellDesc = Err.Description: Err.Clear ' Store error, clear it
                 On Error GoTo SsoLoginErrorHandler ' Restore SSO handler
                 If shellErr <> 0 Then MsgBox "Shell Error (" & shellErr & ") trying to start SAP Logon: " & shellDesc, vbCritical: GoTo Cleanup ' Handle Shell error
                 Debug.Print "      - Shell executed. Waiting 5s...": Sleep 5000 ' Wait for SAP Logon to start
                 attempts = 0 ' Reset attempt counter
                 Do ' Loop to wait for SAP Logon process and retry GetObject
                     attempts = attempts + 1: Debug.Print "      - GetObject attempt " & attempts & " after starting Logon..." ' Log attempt
                     On Error Resume Next: Set SapGuiAuto = GetObject("SAPGUI"): If Err.Number = 0 And Not SapGuiAuto Is Nothing Then Exit Do: Err.Clear: Sleep 2000 ' Try GetObject, exit loop if successful
                 Loop While attempts < 5 ' Limit attempts
                 If SapGuiAuto Is Nothing Then MsgBox "GetObject still failed after starting SAP Logon. Ensure SAP Logon is running and scripting is enabled.", vbCritical: GoTo Cleanup ' Handle failure after starting
                 Debug.Print "      - GetObject successful after starting Logon." ' Log success
            Else
                 Debug.Print "      - GetObject successful (SAP Logon was already running)." ' Log success if already running
            End If
            Set objGui = SapGuiAuto.GetScriptingEngine ' Get scripting engine
            If objGui Is Nothing Then MsgBox "Could not get Scripting Engine after GetObject/Start Logon.", vbCritical: GoTo Cleanup ' Handle failure to get engine
             Debug.Print "      - Scripting Engine obtained." ' Log success
        Else
             Debug.Print "    - SSO Step 1: Using existing objGui." ' Log use of existing GUI object
        End If

        ' Step 2: Open Connection using System Description
        Debug.Print "    - SSO Step 2: Opening Connection using Description '" & cTARGET_SYSTEM_DESCRIPTION & "'..." ' Log connection attempt
        On Error Resume Next ' Prepare for OpenConnection error
        Set TargetConn = objGui.OpenConnection(cTARGET_SYSTEM_DESCRIPTION, True) ' True for asynchronous opening
        Dim openConnErr As Long: openConnErr = Err.Number: Dim openConnDesc As String: openConnDesc = Err.Description: Err.Clear ' Store error, clear it
        On Error GoTo SsoLoginErrorHandler ' Restore SSO handler
        If openConnErr <> 0 Or TargetConn Is Nothing Then MsgBox "SAP GUI Error during OpenConnection for '" & cTARGET_SYSTEM_DESCRIPTION & "' (Error " & openConnErr & "): " & openConnDesc & vbCrLf & vbCrLf & "Ensure the description is EXACTLY as in SAP Logon and SSO is configured.", vbCritical: GoTo Cleanup ' Handle OpenConnection error
        Set objConn = TargetConn ' Set global connection object
         Debug.Print "      - OpenConnection successful. Connection Object: '" & objConn.Description & "'" ' Log success

        ' Step 3: Get Session object from the new connection
        Debug.Print "    - SSO Step 3: Waiting for session object on new connection..." ' Log wait for session
        startTime = Timer ' Start timeout timer
        Do ' Loop waiting for session object to appear
            If objConn.Children.Count > 0 Then Exit Do ' Exit loop if session exists
            Sleep cSHORT_WAIT_MS: DoEvents ' Wait and allow other events
            If Timer - startTime > 15 Then MsgBox "Timeout (15s) waiting for session object to appear after OpenConnection.", vbCritical: GoTo Cleanup ' Handle timeout
        Loop '
        Set TargetSessSSO = objConn.Children(0) ' Get the first (and likely only) session
        If TargetSessSSO Is Nothing Then MsgBox "Could not get session object from newly opened connection.", vbCritical: GoTo Cleanup ' Handle failure to get session object
        Set objSess = TargetSessSSO ' Set global session object
        Debug.Print "      - Session object obtained (ID: " & objSess.Info.SessionNumber & ")." ' Log success

        ' Step 4: Wait for Session to be Ready (i.e., past splash screen/login)
        Debug.Print "    - SSO Step 4: Waiting for session to become ready (Timeout: " & cLOGON_TIMEOUT_SECONDS & "s)..." ' Log wait for ready state
        startTime = Timer ' Reset timeout timer
        Do ' Loop waiting for session to report a transaction code
            On Error Resume Next ' Prepare for error reading Info.Transaction
            currentTransaction = objSess.Info.TRANSACTION ' Attempt to read transaction code
            Dim sessReadyErr As Long: sessReadyErr = Err.Number: Err.Clear ' Store error, clear it
            On Error GoTo SsoLoginErrorHandler ' Restore SSO handler
            If sessReadyErr = 0 Then ' If read successful
                ' Check if transaction code is not empty and not the initial system screen code
                If currentTransaction <> "" And UCase(currentTransaction) <> "SAPMSYST" Then Debug.Print "      - Session active. TCode: '" & currentTransaction & "'": Exit Do ' Exit loop if ready
            Else
                Debug.Print "      - Waiting session ready (Info error: " & sessReadyErr & ")" ' Log if Info read fails during wait
            End If
            Sleep cSHORT_WAIT_MS: DoEvents ' Wait and allow events
            If Timer - startTime > cLOGON_TIMEOUT_SECONDS Then MsgBox "Timeout (" & cLOGON_TIMEOUT_SECONDS & "s) waiting for SAP main menu after SSO login.", vbCritical: GoTo Cleanup ' Handle timeout
        Loop '

        ' Step 5: Get Status Bar
        Debug.Print "    - SSO Step 5: Getting status bar..." ' Log status bar attempt
        On Error Resume Next ' Prepare for error getting status bar
        Set objSBar = objSess.FindById("wnd[0]/sbar") ' Get status bar object
        On Error GoTo ErrorHandler ' Restore MAIN error handler after SSO sequence
        If objSBar Is Nothing Then Debug.Print "      - Warning: Could not get status bar after SSO login." Else Debug.Print "      - Status bar obtained." ' Log result

        ' Step 6: SSO Success
        SessionObtained = True ' Mark session as obtained
        Debug.Print "    - SSO Step 6: SSO login process successful." ' Log SSO success

        ' Optional: Verify system match after SSO login
        If Not objSess Is Nothing Then '
           On Error Resume Next ' Prepare for error reading info
           Dim loggedInSys As String: loggedInSys = objSess.Info.SystemName & objSess.Info.Client ' Get system/client from logged-in session
           Dim sysCheckErr As Long: sysCheckErr = Err.Number: Err.Clear ' Store error, clear it
           On Error GoTo ErrorHandler ' Restore main handler
           If sysCheckErr = 0 Then ' If info read successful
               If loggedInSys <> cTARGET_SYSTEM_ID_CLIENT Then ' Compare with target
                    MsgBox "Warning: SSO login successful but connected system/client ('" & loggedInSys & "') does not match the target ('" & cTARGET_SYSTEM_ID_CLIENT & "').", vbExclamation ' Warn user of mismatch
               Else
                   Debug.Print "      - System match verified ('" & loggedInSys & "')." ' Log successful verification
               End If
           Else
               Debug.Print "      - Warning: Could not verify system match after SSO login (Error reading Info: " & sysCheckErr & ")." ' Log verification failure
           End If
        End If

        ' --- End of Integrated SSO Logic ---
        If SessionObtained Then GoTo RunReportScript Else GoTo Cleanup ' Proceed if successful, otherwise cleanup

     End If ' End Path A vs Path B logic


    ' --- Fallback Check ---
    If Not SessionObtained Then ' If neither Path A nor Path B resulted in a session
        Debug.Print "ERROR: Fallback reached - session not obtained after all attempts." ' Log failure
        MsgBox "Could not get a usable SAP session after all attempts (existing check, /o, SSO).", vbCritical ' Inform user
        GoTo Cleanup ' Exit
    End If


RunReportScript: ' Label to jump to when session is ready
    ' Proceed only if a session was successfully obtained
    If SessionObtained And Not objSess Is Nothing Then ' Double-check session object validity
         Debug.Print "-----------------------------------------------------" '
        Debug.Print "STEP 5: Session ready. Calling RunGUIScript..." ' Log call to script sub
        Debug.Print "  - Session ID: " & objSess.Info.SessionNumber ' Log session details
        Debug.Print "  - System/Client: " & objSess.Info.SystemName & "/" & objSess.Info.Client '
        Debug.Print "  - User: " & objSess.Info.User '
        Debug.Print "-----------------------------------------------------" '
        RunGUIScript ' Call the Private sub containing the MM03 steps '
    Else
        Debug.Print "INTERNAL ERROR: Reached RunReportScript label but SessionObtained=" & SessionObtained & " or objSess is Nothing." ' Log internal error state
        MsgBox "Internal Error: Should run GUI script, but session flag or object is invalid.", vbCritical ' Inform user
        GoTo Cleanup ' Go to cleanup even on internal error '
    End If

Cleanup: ' Label for cleanup actions
    Debug.Print "-----------------------------------------------------" '
    Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Running Cleanup for StartExtract..." ' Log cleanup start

    Application.Calculation = xlCalculationAutomatic ' Restore Excel calculation setting
    Application.ScreenUpdating = True ' Restore Excel screen updating

    ' Release local object variables used in this sub
    Set TargetConn = Nothing: Debug.Print "  - Released TargetConn" '
    Set W_conn = Nothing: Debug.Print "  - Released W_conn" '
    Set W_Sess = Nothing: Debug.Print "  - Released W_Sess" '
    Set FirstFoundSess = Nothing: Debug.Print "  - Released FirstFoundSess" '
    Set NewSess = Nothing: Debug.Print "  - Released NewSess" '
    Set SapGuiAuto = Nothing: Debug.Print "  - Released SapGuiAuto" '
    Set TargetSessSSO = Nothing: Debug.Print "  - Released TargetSessSSO" '
    Set popupWnd = Nothing: Debug.Print "  - Released popupWnd" '

    ' Explicitly release GLOBAL SAP objects (if they were set during this run)
    ' This prevents holding onto objects if the macro is run multiple times without closing Excel
     Debug.Print "  - Releasing global SAP objects..." '
     On Error Resume Next ' Ignore errors if objects were never set or already Nothing '
     Set objSBar = Nothing: Debug.Print "    - Released objSBar" '
     Set objSess = Nothing: Debug.Print "    - Released objSess" '
     Set objConn = Nothing: Debug.Print "    - Released objConn" '
     Set objGui = Nothing: Debug.Print "    - Released objGui" '
     On Error GoTo 0 ' Restore default error handling '
     Debug.Print "  - Global SAP objects released." '

    Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - StartExtract finished." ' Log end time
    Debug.Print "=====================================================" & vbCrLf '
    Exit Sub ' End the sub execution

' --- Error Handlers ---
ErrorHandler: ' General error handler for StartExtract
    Dim errNum As Long: errNum = Err.Number ' Get error details
    Dim errDesc As String: errDesc = Err.Description '
    Dim errSource As String: errSource = Err.Source '
    Debug.Print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" ' Log error start
    Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - ERROR ENCOUNTERED in StartExtract (General Handler)!" '
     Debug.Print "    Error #: " & errNum: Debug.Print "    Source:  " & errSource: Debug.Print "    Desc:    " & errDesc ' Log error details
    Debug.Print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" ' Log error end
    MsgBox "Error during SAP session setup/creation:" & vbCrLf & vbCrLf & _
           "Err #: " & errNum & vbCrLf & "Desc: " & errDesc, vbCritical ' Inform user
    Resume Cleanup ' Go to cleanup section on error

SsoLoginErrorHandler: ' Specific error handler for SSO login steps
    Dim ssoErrNum As Long: ssoErrNum = Err.Number ' Get error details
     Dim ssoErrDesc As String: ssoErrDesc = Err.Description '
    Dim ssoErrSource As String: ssoErrSource = Err.Source '
    Debug.Print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" ' Log error start
    Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - ERROR ENCOUNTERED during SSO Login Attempt!" '
    Debug.Print "    Error #: " & ssoErrNum: Debug.Print "    Source:  " & ssoErrSource: Debug.Print "    Desc:    " & ssoErrDesc ' Log error details
    Debug.Print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" ' Log error end
     MsgBox "Error during SAP SSO Logon attempt:" & vbCrLf & vbCrLf & _
           "Err #: " & ssoErrNum & vbCrLf & "Desc: " & ssoErrDesc, vbCritical ' Inform user
     SessionObtained = False ' Ensure session obtained flag is false
     Resume Cleanup ' Go to main cleanup section

End Sub


' //========================================================================
' // Sub: RunGUIScript (MM03 Extraction Logic)
' // Purpose: Executes MM03 steps. Called only by StartExtract. Declared Private.
' // Integrates logic from Code2_MM03.txt into the modular structure.
' //========================================================================
Private Sub RunGUIScript() ' Sub containing the actual MM03 interaction logic

    ' --- Constants specific to MM03 Execution ---
    Const cTRANSACTION As String = "mm03" ' Transaction code
    Const cMATERIAL_COLUMN As String = "A" ' Column for Material in Excel (Based on Code2)
    Const cOUTPUT_START_COLUMN As String = "C" ' First column to write output in Excel (Based on Code2)
    Const cSTART_ROW As Long = 2 ' Starting row for data in Excel (assumes header in row 1)
    Const cWAIT_TIME_SHORT_MS As Long = 500  ' General wait after actions (milliseconds)
    Const cWAIT_TIME_MEDIUM_MS As Long = 1000 ' Wait after potentially slower actions like view selection (milliseconds)

    ' --- Local Variables ---
    Dim ws As Worksheet ' Excel worksheet object
    Dim lastRow As Long, i As Long ' Loop control variables
    Dim infoText As String ' Variable to hold text from info labels
    Dim dataArr() As Variant ' *** MODIFIED: Declared as DYNAMIC array ***
                                    ' It will be dimensioned inside the loop using ReDim.
                                    ' Column 1: Status/Warning Text
                                    ' Column 2: Product Hierarchy (MARA-PRDHA)
                                    ' Column 3: Old Material Number (MARA-BISMT)
                                    ' Column 4: Created/Changed By User
                                    ' Column 5: Created/Changed On Date/Time
    Dim materialNumber As String ' Material number read from Excel
    Dim wnd1Exists As Boolean ' Flag to check if wnd[1] exists
    Dim testControl As Object ' Generic object for safe existence checks (e.g., FindById(..., False))
    Dim warningText As String ' To store potential warning popup text
    Dim objExcelApp As Object ' Excel Application object (added for robustness)
    Dim mm03FieldCheck As Object ' Object for checking if navigation to MM03 was successful

    On Error GoTo ErrorHandler_RunScript ' Set error handler for this sub

    ' --- Initialize ---
    Debug.Print "Entering RunGUIScript (MM03)..." ' Log entry
    If objSess Is Nothing Then Err.Raise vbObjectError + 510, "RunGUIScript", "objSess is not valid at the start of RunGUIScript." ' Critical check
    If objSBar Is Nothing Then ' Attempt to get status bar if not already set globally
        On Error Resume Next: Set objSBar = objSess.FindById("wnd[0]/sbar"): On Error GoTo ErrorHandler_RunScript ' Try getting status bar
        If objSBar Is Nothing Then Debug.Print "  - Warning: objSBar could not be obtained for session #" & objSess.Info.SessionNumber & "." ' Log warning if failed
    End If
    Debug.Print "  - Session #" & objSess.Info.SessionNumber & " checked." ' Log session check

    ' --- Get the Excel worksheet (Added for robustness like in Code1_MB51) ---
    On Error Resume Next ' Prepare for error getting Excel objects
    Set objExcelApp = GetObject(, "Excel.Application") ' Get running Excel instance
    If Err.Number <> 0 Then ' Handle error if Excel not running
        MsgBox "Error: Could not connect to running Excel application. Please ensure the workbook is open.", vbCritical ' Inform user
        GoTo Cleanup_RunScript ' Exit script sub
    End If
    ' *** IMPORTANT: CHANGE "Sheet1" if your sheet has a different name ***
    Set ws = objExcelApp.Worksheets("Sheet1") ' Get the specific worksheet
    If ws Is Nothing Then ' Handle error if sheet not found
         MsgBox "Error: Could not find worksheet named 'Sheet1' in the active Excel workbook. Please check the sheet name.", vbCritical ' Inform user
        Set objExcelApp = Nothing ' Release Excel App object
        GoTo Cleanup_RunScript ' Exit script sub
    End If
    On Error GoTo ErrorHandler_RunScript ' Restore main error handler for this sub
    Debug.Print "  - Connected to Excel Worksheet: '" & ws.Name & "'" ' Log success

    ' --- Get the last row with data in the Material column ---
    lastRow = ws.Cells(ws.Rows.Count, cMATERIAL_COLUMN).End(xlUp).row ' Find last used row
    If lastRow < cSTART_ROW Then ' Check if there is any data to process
         MsgBox "No data found in Excel sheet '" & ws.Name & "' starting from row " & cSTART_ROW & ", column " & cMATERIAL_COLUMN & ".", vbInformation ' Inform user
        GoTo Cleanup_RunScript ' Exit script sub
    End If
    Debug.Print "  - Last row with data: " & lastRow ' Log last row

    ' --- Navigate to MM03 Transaction if not already there ---
    Debug.Print "  - Navigating to transaction '" & cTRANSACTION & "'..." ' Log navigation start
    Dim needsNavigation As Boolean: needsNavigation = True ' Assume navigation is needed
    On Error Resume Next ' Prepare for error checking current screen
    ' Check for a field specific to the initial MM03 screen (Material Number input)
    Set mm03FieldCheck = objSess.FindById("wnd[0]/usr/ctxtRMMG1-MATNR") '
    If Err.Number = 0 And Not mm03FieldCheck Is Nothing Then ' If field exists
        ' Double-check the transaction code for certainty
        If objSess.Info.Transaction = UCase(cTRANSACTION) Then '
            Debug.Print "  - Already in transaction " & cTRANSACTION & "." ' Log already there
            needsNavigation = False ' No navigation needed
        End If
    End If
    Err.Clear ' Clear potential error from FindById check
    On Error GoTo ErrorHandler_RunScript ' Restore main handler

    If needsNavigation Then ' If not already in MM03
        Debug.Print "  - Executing /n" & cTRANSACTION & "..." ' Log command
        objSess.FindById("wnd[0]/tbar[0]/okcd").Text = "/n" & cTRANSACTION ' Enter TCode
        objSess.FindById("wnd[0]").sendVKey 0 ' Press Enter
        Sleep cWAIT_TIME_MEDIUM_MS ' Wait after TCode change

        ' Verify Navigation by checking for the material field again
        Debug.Print "  - Navigation presumably complete. Checking presence of material field..." '
        On Error Resume Next ' Prepare for error during check
        Set mm03FieldCheck = Nothing ' Reset check object
        Set mm03FieldCheck = objSess.FindById("wnd[0]/usr/ctxtRMMG1-MATNR") ' Try to find field
        If Err.Number <> 0 Or mm03FieldCheck Is Nothing Then ' If check fails
            Err.Clear ' Clear error
            On Error GoTo ErrorHandler_RunScript ' Restore handler before raising new error
            Err.Raise vbObjectError + 511, "RunGUIScript", "Failed to navigate to " & cTRANSACTION & ". Expected field 'RMMG1-MATNR' not found after /n command." ' Raise specific error
        Else
            Debug.Print "  - SUCCESS: Navigation confirmed." ' Log success
        End If
        Set mm03FieldCheck = Nothing ' Release check object
        On Error GoTo ErrorHandler_RunScript ' Ensure main handler is active
    End If

    ' --- Loop through each row in Excel ---
    For i = cSTART_ROW To lastRow ' Start loop from specified row to last row
        Debug.Print "-----------------------------------------------------"
        Debug.Print "Processing row: " & i & "/" & lastRow ' Log progress

        ' Clear and Re-Dimension the dynamic array for the new row
        Erase dataArr ' Clear previous row's data from the dynamic array
        ReDim dataArr(1 To 5) ' Dimension the dynamic array for this iteration (1 to 5 elements)
        warningText = "" ' Reset warning text variable

        ' --- Step 1: Read Material Number from Excel row ---
        materialNumber = Trim$(CStr(ws.Cells(i, cMATERIAL_COLUMN).value)) ' Read and trim value

        If materialNumber = "" Then ' Check if material number is empty
            Debug.Print "  - WARNING: Skipping row " & i & " due to missing Material Number." ' Log skip
            ws.Cells(i, cOUTPUT_START_COLUMN).value = "Skipped - Missing Material" ' Write skip reason to Excel
            GoTo NextIteration ' Skip to next loop iteration
        End If
        Debug.Print "  - Material from Excel: '" & materialNumber & "'" ' Log material number

        ' --- Step 2: Enter Material and Initial Navigation (Press Enter) ---
        Debug.Print "  - Entering Material Number '" & materialNumber & "' and pressing Enter..." ' Log action
        On Error GoTo ErrorHandler_RunScript ' Ensure main handler is active
        objSess.FindById("wnd[0]/usr/ctxtRMMG1-MATNR").Text = materialNumber ' Set material field
        objSess.FindById("wnd[0]").sendVKey 0 ' Press Enter
        Sleep cWAIT_TIME_SHORT_MS ' Wait briefly

        ' --- Step 3: Handle "Select View(s)" Popup (wnd[1]) or Error on Main Screen ---
        ' Check if wnd[1] (Select View(s) popup) exists safely without raising an error
        wnd1Exists = False ' Reset flag
        On Error Resume Next ' Prepare for non-existent object check
        Set testControl = Nothing ' Reset test control object
        Set testControl = objSess.FindById("wnd[1]", False) ' Try to get wnd[1], False prevents error if not found
        If Err.Number = 0 And Not testControl Is Nothing Then ' Check if object was found without error
            wnd1Exists = True ' Set flag if found
        End If
        Err.Clear ' Clear potential (expected) 'object not found' error
        On Error GoTo ErrorHandler_RunScript ' Restore main error handler '

        ' --- Scenario A: wnd[1] does NOT exist (Likely an error message on main screen status bar) ---
        If Not wnd1Exists Then '
            Debug.Print "  - 'Select View(s)' window (wnd[1]) not found. Reading status bar..." ' Log scenario
            If Not objSBar Is Nothing Then ' Check if status bar object exists
                dataArr(1) = Trim$(objSBar.Text) ' Store status bar text in first column of array
                Debug.Print "  - Status Bar Text: '" & dataArr(1) & "'" ' Log the text
            Else
                dataArr(1) = "Status bar object not available." ' Fallback message
                Debug.Print "  - " & dataArr(1) ' Log fallback
            End If
            ' Write the status/error message to the first output column in Excel
            ws.Range(ws.Cells(i, cOUTPUT_START_COLUMN), ws.Cells(i, cOUTPUT_START_COLUMN + UBound(dataArr) - 1)).value = dataArr ' Write array (only first element has value)
            ' No need to navigate back here, already on main screen potentially
            ' Reset the material field for the next iteration (optional, but good practice)
             On Error Resume Next ' Ignore error if field not found
             objSess.FindById("wnd[0]/usr/ctxtRMMG1-MATNR").Text = "" ' Clear material field
             On Error GoTo ErrorHandler_RunScript ' Restore handler
            GoTo NextIteration ' Skip the rest of the processing for this material
        End If

        ' --- Scenario B: wnd[1] exists (Proceed with view selection) ---
        Debug.Print "  - 'Select View(s)' window (wnd[1]) found. Selecting all and continuing..." ' Log scenario
        On Error GoTo ErrorHandler_RunScript ' Ensure main handler active
        ' Press "Select All Views" Button (usually btn[20], but check existence first)
        Set testControl = Nothing: On Error Resume Next ' Reset and prepare for check
        Set testControl = objSess.FindById("wnd[1]/tbar[0]/btn[20]", False) ' Check if button exists
        On Error GoTo ErrorHandler_RunScript ' Restore handler
        If Not testControl Is Nothing Then ' If button exists
             objSess.FindById("wnd[1]/tbar[0]/btn[20]").press ' Press Select All Views
             Sleep cWAIT_TIME_SHORT_MS ' Wait briefly
             Debug.Print "    - Pressed 'Select All Views' (btn[20])." ' Log action
        Else
             Debug.Print "  - Warning: 'Select All Views' button (btn[20]) not found on wnd[1]. Proceeding without pressing it." ' Log warning if button missing
        End If

        ' Press Continue (Green Check) from Select Views popup
        objSess.FindById("wnd[1]/tbar[0]/btn[0]").press '
        Debug.Print "    - Pressed 'Continue' (btn[0]) on Select Views." ' Log action
        Sleep cWAIT_TIME_SHORT_MS ' Wait briefly

        ' --- Step 4: Handle "Organizational Levels" Popup (also wnd[1]) ---
         Debug.Print "  - Handling 'Organizational Levels' window (wnd[1])..." ' Log step
         On Error Resume Next ' This window might not always appear if defaults are sufficient
         objSess.FindById("wnd[1]/tbar[0]/btn[0]").press ' Press Continue (Green Check) again
         If Err.Number <> 0 Then ' If error (likely window didn't appear)
             Debug.Print "    - 'Organizational Levels' window or Continue button not found/needed (Error: " & Err.Description & "). Proceeding..." ' Log skip/error
             Err.Clear ' Clear the expected error
         Else
             Debug.Print "    - Pressed 'Continue' on 'Organizational Levels'." ' Log success
         End If
         On Error GoTo ErrorHandler_RunScript ' Restore main handler
         Sleep cWAIT_TIME_MEDIUM_MS ' Wait longer after this step as data loading might occur

        ' --- Step 5: Handle Potential "Warning" Popup (wnd[2]) ---
        ' Specifically checks for the "Deletion flag set at client level" warning as requested
         Debug.Print "  - Checking for Warning popup (wnd[2])..." ' Log check
         Set testControl = Nothing ' Reset test control object
         On Error Resume Next ' Check existence of the OK button safely
         Set testControl = objSess.FindById("wnd[2]/tbar[0]/btn[0]", False) ' Check if OK button exists on wnd[2]
         If Err.Number = 0 And Not testControl Is Nothing Then ' If button object was found without error
            ' Button exists, now try to get the window itself to read the text
            Set testControl = Nothing ' Reset test control
            Set testControl = objSess.FindById("wnd[2]", False) ' Get the window object itself
            If Not testControl Is Nothing Then ' If window object obtained
                warningText = Trim$(testControl.PopupDialogText) ' Get the text
                dataArr(1) = warningText ' Store warning in the first data column
                Debug.Print "    - Warning Popup Detected. Text: '" & warningText & "'" ' Log detection and text
                objSess.FindById("wnd[2]/tbar[0]/btn[0]").press ' Press Continue/OK on the warning popup
                Sleep cWAIT_TIME_SHORT_MS ' Wait briefly after pressing
            Else
                ' This case is less likely: button found but window object couldn't be retrieved
                Debug.Print "    - Warning: Found button on wnd[2], but could not get window object to read text. Pressing button anyway." ' Log anomaly
                objSess.FindById("wnd[2]/tbar[0]/btn[0]").press ' Press button even if text couldn't be read
                Sleep cWAIT_TIME_SHORT_MS ' Wait briefly
            End If
         Else
             Debug.Print "  - No Warning popup (wnd[2]) detected or its OK button not found." ' Log normal case (no popup)
         End If
         Err.Clear ' Clear any 'object not found' error from the check
         On Error GoTo ErrorHandler_RunScript ' Restore main error handler

        ' --- Step 6: Extract Data from Basic Data 1 View ---
        ' Assumes the view displayed after popups is Basic Data 1
        Debug.Print "  - Extracting data from Basic Data 1 view..." ' Log step
        On Error GoTo ErrorHandler_RunScript ' Ensure main handler active
        ' Add error handling for each FindById in case the view/fields aren't as expected
        On Error Resume Next ' Use Resume Next for individual field reads
        dataArr(2) = objSess.FindById("wnd[0]/usr/tabsTABSPR1/tabpSP01/ssubTABFRA1:SAPLMGMM:2004/subSUB2:SAPLMGD1:2001/ctxtMARA-PRDHA").DisplayedText ' Product hierarchy
        If Err.Number <> 0 Then Debug.Print "    - Error reading Product Hierarchy (MARA-PRDHA): " & Err.Description: Err.Clear ' Log specific field error
        dataArr(3) = objSess.FindById("wnd[0]/usr/tabsTABSPR1/tabpSP01/ssubTABFRA1:SAPLMGMM:2004/subSUB2:SAPLMGD1:2001/txtMARA-BISMT").DisplayedText ' Old material number
        If Err.Number <> 0 Then Debug.Print "    - Error reading Old Material Number (MARA-BISMT): " & Err.Description: Err.Clear ' Log specific field error
        On Error GoTo ErrorHandler_RunScript ' Restore main handler

        Debug.Print "    - Product Hierarchy: '" & dataArr(2) & "'" ' Log extracted data
        Debug.Print "    - Old Material Number: '" & dataArr(3) & "'" ' Log extracted data

        ' --- Step 7: Extract Creation/Change Info via Information Button ---
        Debug.Print "  - Extracting creation/change information..." ' Log step
        On Error Resume Next ' Use Resume Next for this sequence
        objSess.FindById("wnd[0]/usr/tabsTABSPR1/tabpSP01/ssubTABFRA1:SAPLMGMM:2004/subSUB1:SAPLMGD1:1002/btnINFO").press ' Press the 'Information' button
        Sleep cWAIT_TIME_SHORT_MS ' Wait for info popup (wnd[1]) to appear
        If Err.Number <> 0 Then ' Check if button press failed
             Debug.Print "    - Warning: Could not press Information button (btnINFO) (Error: " & Err.Description & "). Skipping creation/change info." ' Log failure
             Err.Clear ' Clear error
             GoTo WriteData ' Skip the label reading if button failed
        End If

        ' Check if the info popup (wnd[1]) actually appeared before trying to read labels
        Set testControl = Nothing ' Reset test control
        Set testControl = objSess.FindById("wnd[1]", False) ' Check for wnd[1]
        If testControl Is Nothing Then ' If popup didn't appear
            Debug.Print "    - Warning: Information popup (wnd[1]) did not appear after pressing button. Skipping creation/change info." ' Log failure
            GoTo WriteData ' Skip label reading
        End If
        Debug.Print "    - Information popup (wnd[1]) found." ' Log popup found

        ' Read info text using the conditional logic provided
        infoText = "" ' Reset infoText variable
        ' Attempt to read the primary label first ([1,7])
        infoText = objSess.FindById("wnd[1]/usr/lbl[1,7]").DisplayedText ' Read text from label
        If Err.Number <> 0 Then ' Handle error reading primary label
            Debug.Print "    - Warning: Could not read primary label at [1,7] (Error: " & Err.Description & "). Subsequent reads might fail." ' Log warning
            Err.Clear ' Clear error
        End If

        ' --- Conditional Logic based on label text ---
        If Left(infoText, 7) <> "Created" Then ' Check if text at [1,7] starts with "Created"
            ' Scenario: Text likely "Changed by..." or similar. Read [1,6] and [1,7].
             Debug.Print "    - Reading 'Changed By' info (Labels [1,6], [1,7])." ' Log scenario
             dataArr(4) = objSess.FindById("wnd[1]/usr/lbl[1,6]").DisplayedText ' Changed By User
             If Err.Number <> 0 Then Debug.Print "      - Error reading label [1,6]: " & Err.Description: Err.Clear ' Log specific error
             dataArr(5) = objSess.FindById("wnd[1]/usr/lbl[1,7]").DisplayedText ' Changed On Date/Time (already read into infoText, but read again for consistency)
             If Err.Number <> 0 Then Debug.Print "      - Error reading label [1,7] (Changed Case): " & Err.Description: Err.Clear ' Log specific error
             Debug.Print "      - Changed By: '" & dataArr(4) & "', On: '" & dataArr(5) & "'" ' Log extracted data
        Else
            ' Scenario: Text likely "Created by...". Read [1,7] and [1,8].
             Debug.Print "    - Reading 'Created By' info (Labels [1,7], [1,8])." ' Log scenario
             dataArr(4) = objSess.FindById("wnd[1]/usr/lbl[1,7]").DisplayedText ' Created By User (already read into infoText)
             If Err.Number <> 0 Then Debug.Print "      - Error reading label [1,7] (Created Case): " & Err.Description: Err.Clear ' Log specific error
             dataArr(5) = objSess.FindById("wnd[1]/usr/lbl[1,8]").DisplayedText ' Created On Date/Time
             If Err.Number <> 0 Then Debug.Print "      - Error reading label [1,8]: " & Err.Description: Err.Clear ' Log specific error
             Debug.Print "      - Created By: '" & dataArr(4) & "', On: '" & dataArr(5) & "'" ' Log extracted data
        End If
        On Error GoTo ErrorHandler_RunScript ' Restore main handler after Resume Next block

        ' Close the Information popup (wnd[1])
        Debug.Print "    - Closing Information popup (wnd[1])..." ' Log action
        On Error Resume Next ' Use Resume Next for closing attempts
        objSess.FindById("wnd[1]/tbar[0]/btn[3]").press ' Press 'Close' or 'Back' button (usually btn[3])
        If Err.Number <> 0 Then ' If button press fails
             Debug.Print "      - Warning: Could not press Close/Back (btn[3]) on info popup (Error: " & Err.Description & "). Attempting window close." ' Log failure
             Err.Clear ' Clear error
             objSess.FindById("wnd[1]").Close ' Try closing window directly as fallback
             If Err.Number <> 0 Then ' If direct close also fails
                 Debug.Print "      - Warning: Direct window close also failed. May cause issues on next iteration." ' Log critical warning
                 Err.Clear ' Clear error
             End If
        End If
        On Error GoTo ErrorHandler_RunScript ' Restore main handler
        Sleep cWAIT_TIME_SHORT_MS ' Wait briefly after closing popup

WriteData: ' Label to jump to if info button/popup fails
        ' --- Step 8: Write Extracted Data to Excel ---
        Debug.Print "  - Writing data to Excel row " & i & " starting column " & cOUTPUT_START_COLUMN & "..." ' Log write action
        On Error GoTo ErrorHandler_RunScript ' Ensure main handler active
        ' Write the entire dataArr (5 elements) to the corresponding columns in the Excel row
        ws.Range(ws.Cells(i, cOUTPUT_START_COLUMN), ws.Cells(i, cOUTPUT_START_COLUMN + UBound(dataArr) - 1)).value = dataArr '
        Debug.Print "  - Data written successfully." ' Log success

        ' --- Step 9: Navigate Back to Material Selection Screen for Next Iteration ---
        Debug.Print "  - Navigating back to Material selection screen..." ' Log navigation
        On Error Resume Next ' Use Back button first (preferred)
        objSess.FindById("wnd[0]/tbar[0]/btn[3]").press ' Press Back (F3)
        Sleep cWAIT_TIME_SHORT_MS ' Wait briefly
        ' Check if Back worked correctly (still in MM03)
        If Err.Number <> 0 Or objSess.Info.Transaction <> UCase(cTRANSACTION) Then ' If Back failed or exited MM03
            ' If Back failed, try navigating directly using /nMM03 as a more robust fallback
            Debug.Print "    - Back button failed or left transaction. Re-navigating using /n" & cTRANSACTION & "..." ' Log fallback
            Err.Clear ' Clear the error from the failed Back attempt
            On Error GoTo ErrorHandler_RunScript ' Restore main handler before next action
            objSess.FindById("wnd[0]/tbar[0]/okcd").Text = "/n" & cTRANSACTION ' Enter TCode
            objSess.FindById("wnd[0]").sendVKey 0 ' Press Enter
            Sleep cWAIT_TIME_MEDIUM_MS ' Wait after TCode change
            ' Verify return to MM03 initial screen
            On Error Resume Next ' Prepare for verification check error
            Set mm03FieldCheck = Nothing ' Reset check object
            Set mm03FieldCheck = objSess.FindById("wnd[0]/usr/ctxtRMMG1-MATNR") ' Check for material field
            If Err.Number <> 0 Or mm03FieldCheck Is Nothing Then ' If verification fails
                Err.Clear ' Clear error
                On Error GoTo ErrorHandler_RunScript ' Restore handler before raising new error
                Err.Raise vbObjectError + 519, "RunGUIScript", "Failed to return to " & cTRANSACTION & " selection screen using /n for next iteration." ' Raise specific error
            Else
                Debug.Print "    - Successfully returned to " & cTRANSACTION & " selection screen via /n." ' Log success
            End If
             Set mm03FieldCheck = Nothing ' Release check object
             On Error GoTo ErrorHandler_RunScript ' Restore main handler
        Else
             Debug.Print "    - Back button pressed successfully." ' Log successful Back press
        End If
        On Error GoTo ErrorHandler_RunScript ' Ensure main handler is active

NextIteration: ' Label to jump to for skipping a row or after handling status bar error
    Next i ' End of the main loop processing each row

    Debug.Print "Finished processing all rows." ' Log completion of loop

    ' Final navigation back (optional, depends if you want to leave MM03 open at the end)
    Debug.Print "Navigating back from transaction..." ' Log final navigation
    On Error Resume Next ' Attempt final Back/Exit gracefully
    If objSess.Info.Transaction = UCase(cTRANSACTION) Then ' Check if still on MM03 initial screen
         objSess.FindById("wnd[0]/tbar[0]/btn[3]").press ' Press Back from initial MM03 screen
         Sleep cWAIT_TIME_SHORT_MS ' Wait briefly
         Debug.Print "  - Pressed Back from initial MM03 screen." ' Log action
    Else
         ' Maybe already at main menu due to previous navigation, try Exit
         objSess.FindById("wnd[0]/tbar[0]/btn[15]").press ' Press Exit (Shift+F3)
         Sleep cWAIT_TIME_SHORT_MS ' Wait briefly
         Debug.Print "  - Pressed Exit (not in MM03)." ' Log action
    End If
    On Error GoTo ErrorHandler_RunScript ' Restore main handler

    GoTo Cleanup_RunScript ' Jump to cleanup section for normal exit

ErrorHandler_RunScript: ' Error handler for the RunGUIScript sub
    Dim errNumRun As Long: errNumRun = Err.Number ' Get error details
    Dim errDescRun As String: errDescRun = Err.Description '
    Dim errSourceRun As String: errSourceRun = Err.Source '
    Debug.Print "!!!!!!!!!!!!!!!!!!! ERROR in RunGUIScript (MM03) !!!!!!!!!!!!!!!!!!!" ' Log error start
    Debug.Print "  Err #: " & errNumRun: Debug.Print "  Source: " & errSourceRun: Debug.Print "  Desc: " & errDescRun ' Log details
    Debug.Print "  Processing Row: " & i ' Add context: which row failed
    Debug.Print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" ' Log error end
    MsgBox "Error during MM03 script processing row " & i & ":" & vbCrLf & "Err #: " & errNumRun & vbCrLf & "Desc: " & errDescRun, vbCritical ' Inform user
    ' Attempt cleanup within SAP session if possible after an error
    On Error Resume Next ' Attempt cleanup gracefully, ignore further errors here
    If Not objSess Is Nothing Then ' Check if session object exists
        Debug.Print "Attempting SAP cleanup after error..." ' Log cleanup attempt
        If objSess.Busy Then Sleep 500 ' Wait if busy
        ' Try to close known popups first (wnd[2] then wnd[1])
        Dim popupWin As Object ' Temporary object for popups
        Set popupWin = objSess.FindById("wnd[2]", False): If Not popupWin Is Nothing Then popupWin.Close: Sleep 250 ' Close wnd[2] if exists
        Set popupWin = objSess.FindById("wnd[1]", False): If Not popupWin Is Nothing Then popupWin.Close: Sleep 250 ' Close wnd[1] if exists
        ' Try to get back to main screen or exit gracefully
        If objSess.ActiveWindow.Name = "wnd[0]" Then ' Check if on main window
            If objSess.Info.Transaction = UCase(cTRANSACTION) Then ' Check if still in MM03
                 objSess.FindById("wnd[0]/tbar[0]/btn[3]").press ' Try Back first
                 Sleep cWAIT_TIME_SHORT_MS ' Wait
            End If
             objSess.FindById("wnd[0]/tbar[0]/btn[15]").press: Sleep 250 ' Try Exit (Shift+F3)
        End If
        Debug.Print "SAP cleanup attempt finished." ' Log cleanup finished
    End If
    ' Note: It does NOT release global SAP objects here; that happens in StartExtract's cleanup.
    ' It proceeds to the local cleanup for this sub.

Cleanup_RunScript: ' Cleanup section for RunGUIScript
    ' Release local Excel objects if they were set
    If Not ws Is Nothing Then Set ws = Nothing: Debug.Print "  - Released ws (Worksheet object)" ' Release worksheet
    If Not objExcelApp Is Nothing Then Set objExcelApp = Nothing: Debug.Print "  - Released objExcelApp (Excel Application object)" ' Release Excel App
    ' Screen updating/calculation are handled in StartExtract's main cleanup
    On Error GoTo 0 ' Ensure default error handling is restored before exiting sub
    Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Exiting RunGUIScript (MM03)." ' Log exit from this sub

End Sub
