Option Explicit

' --- Windows API Declaration for Sleep Function ---
' Used for brief pauses, primarily within wait loops
#If VBA7 Then
    Public Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As LongPtr)
#Else
    Public Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
#End If

'//========================================================================
'// --- GLOBAL DECLARATIONS ---
'// Purpose: Declare objects and constants needed across different runs or subroutines.
'// Modularity: Keeping these global allows session reuse if StartExtract is called multiple times
'//             without closing Excel or explicitly clearing these variables.
'//========================================================================

' --- Global Objects required across calls ---
' *** USING EARLY BINDING - REQUIRES REFERENCE TO "SAP GUI Scripting API" Library ***
Public objGui       As GuiApplication   ' Represents the SAP GUI application itself
Public objConn      As GuiConnection    ' Represents the connection to a specific SAP system
Public objSess      As GuiSession       ' Represents a specific session (window) within a connection
Public objSBar      As GuiStatusbar     ' Represents the status bar of a session (optional, for messages)

' --- Global Constants ---
' Constants used for waiting logic, applicable in both subs
Const cDEFAULT_TIMEOUT_SEC As Long = 10 ' Default timeout for wait loops (seconds)
Const cSHORT_WAIT_MS As Long = 200     ' Short sleep interval within wait loops (ms)


'//========================================================================
'// Sub: StartExtract
'// Purpose: Main public entry point. Handles all SAP connection/session logic:
'//          - Checks for existing valid sessions.
'//          - Connects to SAP GUI Scripting Engine.
'//          - Finds or opens connections to the target system.
'//          - Finds an idle session or creates a new one (via /o or SSO).
'//          - Calls RunGUIScript once a valid session is ready.
'//          - Handles cleanup of connection-related objects.
'// Modularity: All logic related to establishing the SAP environment happens here.
'//========================================================================
Public Sub StartExtract()

    ' --- LOCAL CONFIGURATION CONSTANTS for StartExtract ---
    ' These settings define the target system and connection behavior
    Const cTARGET_SYSTEM_ID_CLIENT As String = "PEA100" ' SystemID+Client (e.g., "PRD100")
    Const cTARGET_SYSTEM_DESCRIPTION As String = "9A. Symphony ECC Production" ' EXACT Description from SAP Logon Pad
    Const cSAP_LOGON_PATH As String = "C:\Program Files (x86)\SAP\FrontEnd\SAPgui\saplogon.exe" ' Path to saplogon.exe
    Const cMAX_SESSIONS As Integer = 6 ' Maximum allowed sessions for the system
    Const cLOGON_TIMEOUT_SECONDS As Long = 60 ' Timeout for SSO logon attempt
    Const cSESSION_CHECK_ATTEMPTS As Integer = 20 ' Number of times to check for new session after /o
    Const cSESSION_CHECK_INTERVAL_MS As Long = 1000 ' Wait between session count checks (ms)

    ' --- LOCAL Variables for StartExtract ---
    Dim SapGuiAuto As Object        ' Late binding for GetObject("SAPGUI")
    Dim TargetConn As GuiConnection ' Connection object matching target system
    Dim W_conn As GuiConnection     ' Loop variable for connections
    Dim W_Sess As GuiSession        ' Loop variable for sessions
    Dim FirstFoundSess As GuiSession ' First valid session found on target connection
    Dim NewSess As GuiSession       ' Newly created session object (after /o)
    Dim TargetSessSSO As GuiSession ' Session object obtained via SSO
    Dim SessionObtained As Boolean  ' Flag: True if a usable session is found/created
    Dim Session_Nr_All_Before As Long ' Store session count before /o attempt
    Dim Session_Nr_All_After As Long  ' Store session count after /o attempt
    Dim i As Long                   ' Loop counter for connections
    Dim j As Long                   ' Loop counter for sessions
    Dim highestSessNum As Long      ' Highest session number found after /o
    Dim currentSessNum As Long      ' Loop variable for session number check
    Dim MsgResult As VbMsgBoxResult ' Result of MsgBox calls
    Dim currentTransaction As String ' T-code of a session being checked
    Dim foundConnection As Boolean  ' Flag: True if a connection to the target system exists
    Dim attempts As Integer         ' Counter for retry loops (GetObject, session count check)
    Dim startTime As Single         ' Timer for timeouts
    Dim popupWnd As GuiModalWindow  ' To handle popups during /o
    Dim objToCheck As Object        ' Reusable variable for inline object checks
    Dim objName As String           ' Reusable variable for inline object check messages
    Dim raiseErrorFlag As Boolean   ' Reusable flag for inline object check error raising
    Dim waitTimeout As Long         ' Reusable variable for wait loop timeouts
    Dim waitStartTime As Single     ' Reusable variable for wait loop start times
    Dim waitReady As Boolean        ' Reusable flag for wait loop status
    Dim checkTCodeFlag As Boolean   ' Reusable flag for TCode check in wait loops

    ' --- Mark Start of Execution & Initialize ---
    Debug.Print vbCrLf & "====================================================="
    Debug.Print "   *** NEW RUN START: StartExtract (Enhanced v6 - Two Subs) *** (" & Format(Now, "yyyy-mm-dd hh:nn:ss") & ")"
    Debug.Print "====================================================="

    On Error GoTo ErrorHandler ' Set main error handler

    ' --- Prepare Excel Environment ---
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    ' Update Status Bar (Inline)
    On Error Resume Next ' Ignore errors if Excel is not available
    If Not Application Is Nothing Then Application.StatusBar = "Connecting to SAP..."
    On Error GoTo ErrorHandler ' Restore error handler

    ' --- Initialize Flags and Objects ---
    SessionObtained = False
    foundConnection = False
    Set TargetConn = Nothing
    Set FirstFoundSess = Nothing

    ' --- Log Configuration ---
    Debug.Print "Target System (ID+Client for Find): '" & cTARGET_SYSTEM_ID_CLIENT & "'"
    Debug.Print "Target System (Description for SSO Login): '" & cTARGET_SYSTEM_DESCRIPTION & "'"
    Debug.Print "SAP Logon Path: '" & cSAP_LOGON_PATH & "'"
    Debug.Print "Max Sessions: " & cMAX_SESSIONS
    Debug.Print "SSO Logon Timeout: " & cLOGON_TIMEOUT_SECONDS & "s"
    Debug.Print "-----------------------------------------------------"

    ' --- Basic Configuration Check ---
    If Trim$(cTARGET_SYSTEM_ID_CLIENT) = "" Or Trim$(cTARGET_SYSTEM_DESCRIPTION) = "" Then
        MsgBox "Config Error: Target system constants (cTARGET_SYSTEM_ID_CLIENT / cTARGET_SYSTEM_DESCRIPTION) not defined in VBA code.", vbCritical
        GoTo Cleanup ' Abort if configuration is missing
    End If

    ' --- STEP 1: Check Existing Global Session ---
    Debug.Print "STEP 1: Checking for existing global session object (objSess)..."
    ' Inline CheckObject (objSess, "Global objSess", False)
    Set objToCheck = objSess: objName = "Global objSess": raiseErrorFlag = False
    If objToCheck Is Nothing Then
        Debug.Print "CheckObject WARNING: Object '" & objName & "' is Nothing."
        ' No error raised as raiseErrorFlag is False
        Debug.Print "  - Global objSess is Nothing." ' Original message if Nothing
    Else
        ' Object is valid, proceed with checks
        Debug.Print "  - Global objSess exists. Checking validity for system '" & cTARGET_SYSTEM_ID_CLIENT & "'..."
        On Error Resume Next ' Temporarily ignore errors while checking session info
        Dim tempSysName As String, tempClient As String, tempTCode As String
        tempSysName = objSess.Info.SystemName
        tempClient = objSess.Info.Client
        tempTCode = objSess.Info.Transaction ' Check if session responds
        Dim sessInfoErr As Long: sessInfoErr = Err.Number: Err.Clear
        On Error GoTo ErrorHandler ' Restore main error handler

        If sessInfoErr = 0 Then
            If tempSysName & tempClient = cTARGET_SYSTEM_ID_CLIENT Then
                Debug.Print "  - SUCCESS: Global objSess is valid and matches target system."
                If objConn Is Nothing Then Set objConn = objSess.Parent: Debug.Print "  - Set global objConn from objSess.Parent."
                If objSBar Is Nothing Then
                    On Error Resume Next
                    Set objSBar = objSess.FindById("wnd[0]/sbar")
                    On Error GoTo ErrorHandler
                    Debug.Print "  - Set global objSBar from objSess " & IIf(objSBar Is Nothing, "(Failed)", "(Success)") & "."
                End If
                SessionObtained = True
                Debug.Print "  - Proceeding with existing global session #" & objSess.Info.SessionNumber
                GoTo RunMM03Script
            Else
                 Debug.Print "  - Global objSess is for wrong system ('" & tempSysName & tempClient & "'). Clearing globals."
                 Set objSess = Nothing: Set objConn = Nothing: Set objSBar = Nothing: Set objGui = Nothing
            End If
        Else
            Debug.Print "  - Global objSess is invalid/closed (Error accessing Info: " & sessInfoErr & "). Clearing globals."
            Set objSess = Nothing: Set objConn = Nothing: Set objSBar = Nothing: Set objGui = Nothing
        End If
    End If
    Set objToCheck = Nothing ' Clear reusable variable

    ' --- STEP 2: Get SAP GUI Scripting Engine ---
    Debug.Print "-----------------------------------------------------"
    Debug.Print "STEP 2: Getting SAP GUI Scripting Engine..."
    ' Inline CheckObject (objGui, "Global objGui", False)
    Set objToCheck = objGui: objName = "Global objGui": raiseErrorFlag = False
    If objToCheck Is Nothing Then
        Debug.Print "CheckObject WARNING: Object '" & objName & "' is Nothing."
        ' Proceed to get object
        Debug.Print "  - Global objGui is Nothing. Attempting GetObject(""SAPGUI"")..."
        On Error Resume Next
        Set SapGuiAuto = GetObject("SAPGUI")
        Dim getObjectErrNum As Long: getObjectErrNum = Err.Number: Err.Clear
        On Error GoTo ErrorHandler

        If getObjectErrNum = 0 And Not SapGuiAuto Is Nothing Then
            Debug.Print "  - GetObject(""SAPGUI"") successful. Attempting GetScriptingEngine..."
            Set objGui = SapGuiAuto.GetScriptingEngine
            ' Inline CheckObject (objGui, "Scripting Engine from GetObject", True)
            Set objToCheck = objGui: objName = "Scripting Engine from GetObject": raiseErrorFlag = True
            If objToCheck Is Nothing Then
                Debug.Print "CheckObject WARNING: Object '" & objName & "' is Nothing."
                If raiseErrorFlag Then Err.Raise vbObjectError + 999, "CheckObject", "Required object '" & objName & "' was not found or is invalid."
                GoTo Cleanup ' Abort if required object not obtained
            End If
            ' End Inline CheckObject
            Debug.Print "  - SUCCESS: Obtained SAP GUI Scripting Engine via GetObject."
        Else
            Debug.Print "  - GetObject(""SAPGUI"") failed (Error: " & getObjectErrNum & "). SAP Logon may not be running."
            Set SapGuiAuto = Nothing
        End If
    Else
        Debug.Print "  - Using existing global objGui object."
    End If
    Set objToCheck = Nothing ' Clear reusable variable

    ' --- STEP 3: Find Existing Connection ---
    Debug.Print "-----------------------------------------------------"
    Debug.Print "STEP 3: Finding existing connection for System/Client '" & cTARGET_SYSTEM_ID_CLIENT & "'..."
    ' Inline CheckObject (objGui, "Global objGui for connection search", False)
    Set objToCheck = objGui: objName = "Global objGui for connection search": raiseErrorFlag = False
    If objToCheck Is Nothing Then
        Debug.Print "CheckObject WARNING: Object '" & objName & "' is Nothing."
        Debug.Print "  - Cannot search for connections because objGui is not valid."
    Else
        ' objGui is valid, proceed
        foundConnection = False
        Debug.Print "  - Looping through " & objGui.Children.Count & " GUI children (connections)..."
        For i = 0 To objGui.Children.Count - 1
            Set W_conn = Nothing: On Error Resume Next
            Set W_conn = objGui.Children(CLng(i))
            If Err.Number <> 0 Then
                Debug.Print "    - Error accessing connection at index " & i & ". Skipping.": Err.Clear
                GoTo NextConnection
            End If
            On Error GoTo ErrorHandler

            ' Inline CheckObject (W_conn, "Connection Index " & i, False)
            Set objToCheck = W_conn: objName = "Connection Index " & i: raiseErrorFlag = False
            If objToCheck Is Nothing Then
                Debug.Print "CheckObject WARNING: Object '" & objName & "' is Nothing."
                Debug.Print "    - Could not get connection object at index " & i & "."
            Else
                ' W_conn is valid
                 Debug.Print "    - Checking Connection Index " & i & " (Description: '" & W_conn.Description & "')..."
                 If W_conn.Children.Count > 0 Then
                     Set W_Sess = Nothing: On Error Resume Next
                     Set W_Sess = W_conn.Children(0)
                     If Err.Number <> 0 Then
                         Debug.Print "      - Error accessing first session of connection " & i & ". Skipping connection.": Err.Clear
                         GoTo NextConnection
                     End If
                     On Error GoTo ErrorHandler

                     ' Inline CheckObject (W_Sess, "First Session of Conn " & i, False)
                     Set objToCheck = W_Sess: objName = "First Session of Conn " & i: raiseErrorFlag = False
                     If objToCheck Is Nothing Then
                         Debug.Print "CheckObject WARNING: Object '" & objName & "' is Nothing."
                         Debug.Print "      - Could not get first session object for connection " & i & "."
                     Else
                        ' W_Sess is valid
                         On Error Resume Next
                         Dim sysInfoCheck As String: sysInfoCheck = W_Sess.Info.SystemName & W_Sess.Info.Client
                         Dim infoErr As Long: infoErr = Err.Number: Err.Clear
                         On Error GoTo ErrorHandler

                         If infoErr = 0 Then
                            Debug.Print "      - First session System/Client: '" & sysInfoCheck & "'"
                            If sysInfoCheck = cTARGET_SYSTEM_ID_CLIENT Then
                                 Set TargetConn = W_conn ' Store this connection object
                                 foundConnection = True
                                 Debug.Print "      - MATCH FOUND! Storing this connection."
                                 Set W_Sess = Nothing
                                 Exit For
                            End If
                         Else
                            Debug.Print "      - Error reading Info for first session (Error: " & infoErr & "). Cannot verify system."
                         End If
                         Set W_Sess = Nothing ' Release loop session object
                     End If
                     ' End Inline CheckObject for W_Sess
                 Else
                     Debug.Print "    - Connection Index " & i & " has no sessions. Skipping."
                 End If
            End If
            ' End Inline CheckObject for W_conn
NextConnection:
             Set W_conn = Nothing ' Release loop connection object
        Next i
        If Not foundConnection Then Debug.Print "  - No existing connection found matching '" & cTARGET_SYSTEM_ID_CLIENT & "'."
    End If
    Set objToCheck = Nothing ' Clear reusable variable

    ' --- STEP 4: Handle Based on Connection Found Status ---
    Debug.Print "-----------------------------------------------------"
    Debug.Print "STEP 4: Determining session strategy..."

    ' Inline CheckObject (TargetConn, "Found Target Connection", True) - combined with foundConnection check
    Set objToCheck = TargetConn: objName = "Found Target Connection": raiseErrorFlag = True
    If foundConnection And Not (objToCheck Is Nothing) Then
        ' --- PATH A: Connection Found ---
        Debug.Print "  - PATH A: Existing connection found. Checking for usable session..."
        Set objConn = TargetConn ' Set global connection object
        Session_Nr_All_Before = objConn.Children.Count
        Debug.Print "    - Connection has " & Session_Nr_All_Before & " session(s)."

        ' A1: Check for an IDLE session
        Debug.Print "    - Checking for an IDLE session (SESSION_MANAGER, SMEN, S000)..."
        Set FirstFoundSess = Nothing
        SessionObtained = False
        For j = 0 To objConn.Children.Count - 1
            Set W_Sess = Nothing: On Error Resume Next
            Set W_Sess = objConn.Children(CLng(j))
            If Err.Number <> 0 Then
                Debug.Print "      - Error accessing session at index " & j & ". Skipping.": Err.Clear
                GoTo NextIdleCheck
            End If
            On Error GoTo ErrorHandler

            ' Inline CheckObject (W_Sess, "Session Index " & j & " for idle check", False)
            Set objToCheck = W_Sess: objName = "Session Index " & j & " for idle check": raiseErrorFlag = False
            If objToCheck Is Nothing Then
                Debug.Print "CheckObject WARNING: Object '" & objName & "' is Nothing."
                 Debug.Print "      - Could not get session object at index " & j & "."
            Else
                ' W_Sess is valid
                Debug.Print "      - Checking Session Index " & j & " (ID: " & W_Sess.Info.SessionNumber & ")"
                If FirstFoundSess Is Nothing Then Set FirstFoundSess = W_Sess
                On Error Resume Next
                Dim idleCheckTCode As String: idleCheckTCode = W_Sess.Info.Transaction
                Dim idleErr As Long: idleErr = Err.Number: Err.Clear
                On Error GoTo ErrorHandler
                If idleErr = 0 Then
                    Debug.Print "        - Transaction Code: '" & idleCheckTCode & "'"
                    Select Case UCase(idleCheckTCode)
                        Case "SESSION_MANAGER", "SMEN", "S000"
                            Set objSess = W_Sess
                            On Error Resume Next
                            Set objSBar = objSess.FindById("wnd[0]/sbar")
                            On Error GoTo ErrorHandler
                            If objSBar Is Nothing Then Debug.Print "        - Warning: Could not get status bar for idle session."
                            SessionObtained = True
                            Debug.Print "        - SUCCESS: Found suitable idle session #" & objSess.Info.SessionNumber
                            GoTo RunMM03Script
                    End Select
                Else
                    Debug.Print "        - Error getting transaction code (Error: " & idleErr & "). Skipping idle check for this session."
                End If
            End If
            ' End Inline CheckObject for W_Sess
NextIdleCheck:
            Set W_Sess = Nothing ' Release loop variable
        Next j

        ' A2: No idle session found - Try to CREATE a new one using /o
        If Not SessionObtained Then
            Debug.Print "    - No idle session found."
            ' Inline CheckObject (FirstFoundSess, "First Found Session for /o", True)
            Set objToCheck = FirstFoundSess: objName = "First Found Session for /o": raiseErrorFlag = True
            If objToCheck Is Nothing Then
                Debug.Print "CheckObject WARNING: Object '" & objName & "' is Nothing."
                If raiseErrorFlag Then Err.Raise vbObjectError + 999, "CheckObject", "Required object '" & objName & "' was not found or is invalid."
                GoTo Cleanup
            End If
            ' End Inline CheckObject

            If Session_Nr_All_Before < cMAX_SESSIONS Then
                 Debug.Print "    - Session limit not reached (" & Session_Nr_All_Before & "/" & cMAX_SESSIONS & "). Attempting /o in session #" & FirstFoundSess.Info.SessionNumber & "..."
                 On Error GoTo ErrorHandler

                 Set objSess = FirstFoundSess ' Temporarily set objSess
                 Debug.Print "      - Checking if wnd[0] of session #" & objSess.Info.SessionNumber & " is accessible..."
                 If objSess.ActiveWindow.Name <> "wnd[0]" Then
                     Debug.Print "      - Active window is not wnd[0] (" & objSess.ActiveWindow.Name & "). Attempting /n..."
                     On Error Resume Next
                     objSess.FindById("wnd[0]/tbar[0]/okcd").Text = "/n"
                     objSess.FindById("wnd[0]").sendVKey 0
                     Dim navErr As Long: navErr = Err.Number: Err.Clear
                     On Error GoTo ErrorHandler
                     ' Inline WaitForSessionReady(objSess, 5)
                     waitTimeout = 5: waitStartTime = Timer: waitReady = False
                     Do
                         If Not objSess.Busy Then waitReady = True: Exit Do
                         If Timer - waitStartTime > waitTimeout Then Debug.Print "WaitForSessionReady TIMEOUT after " & waitTimeout & "s. Session Busy: " & objSess.Busy: Exit Do
                         Sleep cSHORT_WAIT_MS: DoEvents
                     Loop While True
                     If navErr <> 0 Or Not waitReady Then
                        MsgBox "Error: Could not execute /n or session not ready in #" & objSess.Info.SessionNumber & " before /o.", vbExclamation
                        Set objSess = Nothing: GoTo Cleanup
                     End If
                     ' End Inline Wait
                     If objSess.ActiveWindow.Name <> "wnd[0]" Then
                        MsgBox "Error: Still not in main window (wnd[0]) after /n in session #" & objSess.Info.SessionNumber & ".", vbExclamation
                        Set objSess = Nothing: GoTo Cleanup
                     End If
                     Debug.Print "      - Successfully navigated back using /n."
                 End If

                 Debug.Print "      - Executing /o command in session #" & objSess.Info.SessionNumber & "..."
                 objSess.FindById("wnd[0]/tbar[0]/okcd").Text = "/o"
                 objSess.FindById("wnd[0]").sendVKey 0

                 Debug.Print "      - Waiting for potential popup (wnd[1]) or session creation..."
                 ' Inline WaitForSessionReady(objSess, 3)
                 waitTimeout = 3: waitStartTime = Timer: waitReady = False
                 Do
                     If Not objSess.Busy Then waitReady = True: Exit Do
                     If Timer - waitStartTime > waitTimeout Then Debug.Print "WaitForSessionReady TIMEOUT after " & waitTimeout & "s. Session Busy: " & objSess.Busy: Exit Do
                     Sleep cSHORT_WAIT_MS: DoEvents
                 Loop While True
                 If Not waitReady Then Debug.Print "      - Session busy after /o, might be popup..."
                 ' End Inline Wait

                 ' Handle Potential 'Generate New Session' Popup
                 Set popupWnd = Nothing: On Error Resume Next
                 Set popupWnd = objSess.FindById("wnd[1]", False)
                 Dim popupErr As Long: popupErr = Err.Number: Err.Clear
                 On Error GoTo ErrorHandler

                 ' Inline CheckObject (popupWnd, "Popup after /o", False)
                 Set objToCheck = popupWnd: objName = "Popup after /o": raiseErrorFlag = False
                 If popupErr = 0 And Not (objToCheck Is Nothing) Then
                    ' popupWnd is valid
                    Debug.Print "      - Popup (wnd[1]) detected on session #" & objSess.Info.SessionNumber & ". Text: '" & popupWnd.Text & "'"
                    If InStr(1, popupWnd.Text, "Generate", vbTextCompare) > 0 Or _
                       InStr(1, popupWnd.Text, "session", vbTextCompare) > 0 Or _
                       InStr(1, popupWnd.Text, "Back-End", vbTextCompare) > 0 Then
                        Const GENERATE_BUTTON_ID As String = "wnd[1]/tbar[0]/btn[5]" ' Local constant ok here
                        Debug.Print "      - Attempting to press Generate button (" & GENERATE_BUTTON_ID & ")..."
                        On Error Resume Next
                        popupWnd.FindById(GENERATE_BUTTON_ID).press
                        If Err.Number <> 0 Then
                            Debug.Print "        - Generate button press failed (Error: " & Err.Description & "). Trying Enter (VKey 0)...": Err.Clear
                            popupWnd.sendVKey 0
                            If Err.Number <> 0 Then Debug.Print "        - Enter (VKey 0) also failed (Error: " & Err.Description & ").": Err.Clear
                            Else Debug.Print "        - Enter (VKey 0) sent successfully."
                        Else Debug.Print "        - Generate button pressed successfully."
                        On Error GoTo ErrorHandler
                        Debug.Print "      - Waiting after handling popup for session to initialize..."
                        ' Inline WaitForSessionReady(objSess, cDEFAULT_TIMEOUT_SEC)
                        waitTimeout = cDEFAULT_TIMEOUT_SEC: waitStartTime = Timer: waitReady = False
                        Do
                            If Not objSess.Busy Then waitReady = True: Exit Do
                            If Timer - waitStartTime > waitTimeout Then Debug.Print "WaitForSessionReady TIMEOUT after " & waitTimeout & "s. Session Busy: " & objSess.Busy: Exit Do
                            Sleep cSHORT_WAIT_MS: DoEvents
                        Loop While True
                        If Not waitReady Then Debug.Print "      - Warning: Session still busy after popup interaction."
                        ' End Inline Wait
                    Else
                        Debug.Print "      - Unexpected Popup (wnd[1]) detected. Ignoring."
                        On Error Resume Next: popupWnd.Close: On Error GoTo ErrorHandler
                        Sleep cSHORT_WAIT_MS ' Keep short fixed sleep here after close attempt
                    End If
                 Else
                    If popupErr <> 0 Then Debug.Print "CheckObject WARNING: Error finding object '" & objName & "'. Error: " & popupErr
                    Else Debug.Print "CheckObject WARNING: Object '" & objName & "' is Nothing."
                    End If
                    Debug.Print "      - Popup (wnd[1]) not detected or error finding it. Assuming direct session creation."
                    Sleep cSHORT_WAIT_MS ' Keep short fixed sleep if no popup
                 End If
                 Set objToCheck = Nothing ' Clear reusable variable
                 Set popupWnd = Nothing ' Release popup object
                 Set objSess = Nothing ' Release temporary handle

                 ' Verify session count increase and find the NEW session
                 Debug.Print "      - Verifying session count increase and finding new session (Timeout: " & cSESSION_CHECK_ATTEMPTS * cSESSION_CHECK_INTERVAL_MS & "ms)..."
                 highestSessNum = 0
                 Set NewSess = Nothing
                 attempts = 0
                 Do
                    attempts = attempts + 1
                    ' Inline CheckObject (objConn, "Connection object for session count check", True)
                    Set objToCheck = objConn: objName = "Connection object for session count check": raiseErrorFlag = True
                    If objToCheck Is Nothing Then
                        Debug.Print "CheckObject WARNING: Object '" & objName & "' is Nothing."
                        If raiseErrorFlag Then Err.Raise vbObjectError + 999, "CheckObject", "Required object '" & objName & "' was not found or is invalid."
                        GoTo Cleanup
                    End If
                    ' End Inline CheckObject

                    On Error Resume Next
                    Session_Nr_All_After = objConn.Children.Count
                    Dim countErr As Long: countErr = Err.Number: Err.Clear
                    On Error GoTo ErrorHandler
                    If countErr <> 0 Then
                        Debug.Print "        - Attempt " & attempts & ": Error getting session count (" & countErr & "). Retrying..."
                        GoTo NextAttemptWait
                    End If

                    Debug.Print "        - Attempt " & attempts & "/" & cSESSION_CHECK_ATTEMPTS & ": Current session count = " & Session_Nr_All_After

                    If Session_Nr_All_After > Session_Nr_All_Before Then
                        Debug.Print "        - Session count increased from " & Session_Nr_All_Before & " to " & Session_Nr_All_After & ". Searching for highest session number..."
                        For j = 0 To Session_Nr_All_After - 1
                            Set W_Sess = Nothing: On Error Resume Next
                            Set W_Sess = objConn.Children(CLng(j))
                            If Err.Number <> 0 Then Debug.Print "          - Warning: Error accessing session object at index " & j & ".": Err.Clear: GoTo NextFindLoopSess
                            On Error GoTo ErrorHandler

                            ' Inline CheckObject (W_Sess, "Session Index " & j & " in find loop", False)
                            Set objToCheck = W_Sess: objName = "Session Index " & j & " in find loop": raiseErrorFlag = False
                            If Not (objToCheck Is Nothing) Then
                                ' W_Sess is valid
                                On Error Resume Next
                                currentSessNum = W_Sess.Info.SessionNumber
                                If Err.Number = 0 Then
                                    If currentSessNum > highestSessNum Then
                                        highestSessNum = currentSessNum
                                        Set NewSess = W_Sess
                                        Debug.Print "            - Found new highest session: #" & highestSessNum
                                    End If
                                Else Debug.Print "          - Warning: Error reading session number for index " & j & ".": Err.Clear
                                On Error GoTo ErrorHandler
                            Else
                                Debug.Print "CheckObject WARNING: Object '" & objName & "' is Nothing."
                            End If
                            ' End Inline CheckObject
NextFindLoopSess:
                            Set W_Sess = Nothing ' Release loop var
                        Next j

                        ' Inline CheckObject (NewSess, "New Session Object", False)
                        Set objToCheck = NewSess: objName = "New Session Object": raiseErrorFlag = False
                        If Not (objToCheck Is Nothing) Then
                            ' NewSess found
                            Debug.Print "        - Identified session with highest number: #" & NewSess.Info.SessionNumber
                            Exit Do
                        Else
                            Debug.Print "CheckObject WARNING: Object '" & objName & "' is Nothing."
                            Debug.Print "        - Session count increased, but couldn't identify highest session number object yet. Retrying..."
                        End If
                        ' End Inline CheckObject
                    Else Debug.Print "        - Session count (" & Session_Nr_All_After & ") has not increased yet from original (" & Session_Nr_All_Before & ")."
                    End If

                    If attempts >= cSESSION_CHECK_ATTEMPTS Then
                        Err.Raise vbObjectError + 521, "StartExtract", "Timeout waiting for session count increase after /o."
                    End If
NextAttemptWait:
                    Sleep cSESSION_CHECK_INTERVAL_MS ' Keep fixed sleep for this check interval
                 Loop

                 ' Inline CheckObject (NewSess, "Final New Session Object", True)
                 Set objToCheck = NewSess: objName = "Final New Session Object": raiseErrorFlag = True
                 If objToCheck Is Nothing Then
                     Debug.Print "CheckObject WARNING: Object '" & objName & "' is Nothing."
                     If raiseErrorFlag Then Err.Raise vbObjectError + 999, "CheckObject", "Required object '" & objName & "' was not found or is invalid."
                     GoTo Cleanup
                 End If
                 ' End Inline CheckObject

                 Set objSess = NewSess ' Set GLOBAL session
                 Debug.Print "      - SUCCESS: Identified new session #" & objSess.Info.SessionNumber & " created via /o."
                 On Error Resume Next
                 Set objSBar = objSess.FindById("wnd[0]/sbar")
                 On Error GoTo ErrorHandler
                 If objSBar Is Nothing Then Debug.Print "      - Warning: Could not get status bar for new session #" & objSess.Info.SessionNumber & "."
                 SessionObtained = True
                 Debug.Print "    - Proceeding with newly created session #" & objSess.Info.SessionNumber & "."
                 GoTo RunMM03Script

            Else
                 Debug.Print "    - Session limit reached (" & Session_Nr_All_Before & "/" & cMAX_SESSIONS & "). Cannot create new session via /o."
                 MsgResult = MsgBox("Maximum SAP sessions (" & cMAX_SESSIONS & ") reached." & vbCrLf & _
                                    "No idle session found. Please close an existing SAP session.", vbCritical + vbOKOnly, "SAP Session Limit")
                 GoTo Cleanup
            End If
        End If ' End /o logic

    ElseIf foundConnection And (TargetConn Is Nothing) Then
        ' Error case from combined check above
        Debug.Print "CheckObject WARNING: Object 'Found Target Connection' is Nothing."
        Err.Raise vbObjectError + 999, "CheckObject", "Required object 'Found Target Connection' was not found or is invalid."
        GoTo Cleanup

    Else
        ' --- PATH B: No Connection Found or objGui invalid - Attempt SSO Logon ---
        Debug.Print "  - PATH B: No existing connection found or SAP GUI invalid. Attempting SSO login..."
        Debug.Print "    - Using Description: '" & cTARGET_SYSTEM_DESCRIPTION & "'"

        On Error GoTo SsoLoginErrorHandler ' Use specific handler

        Set objConn = Nothing: Set objSess = Nothing: Set objSBar = Nothing

        ' Step 1: Get/Ensure SAP GUI Scripting Engine
        ' Inline CheckObject (objGui, "Global objGui for SSO", False)
        Set objToCheck = objGui: objName = "Global objGui for SSO": raiseErrorFlag = False
        If objToCheck Is Nothing Then
            Debug.Print "CheckObject WARNING: Object '" & objName & "' is Nothing."
            Debug.Print "    - SSO Step 1: objGui is Nothing. Attempting GetObject/Start Logon..."
            On Error Resume Next
            Set SapGuiAuto = GetObject("SAPGUI")
            Dim getObjErrSso As Long: getObjErrSso = Err.Number: Err.Clear
            On Error GoTo SsoLoginErrorHandler
            If getObjErrSso <> 0 Or SapGuiAuto Is Nothing Then
                 Debug.Print "      - GetObject failed. Starting SAP Logon: '" & cSAP_LOGON_PATH & "'"
                 Dim shellResult As Variant: On Error Resume Next
                 shellResult = Shell(cSAP_LOGON_PATH, vbNormalFocus)
                 Dim shellErr As Long: shellErr = Err.Number: Dim shellDesc As String: shellDesc = Err.Description: Err.Clear
                 On Error GoTo SsoLoginErrorHandler
                 If shellErr <> 0 Then MsgBox "Shell Error (" & shellErr & ") starting SAP Logon: " & shellDesc, vbCritical: GoTo Cleanup
                 Debug.Print "      - Shell executed. Waiting for SAP Logon process..."
                 startTime = Timer ' Use local startTime here
                 Do ' Wait for GetObject to succeed
                    Sleep cSHORT_WAIT_MS ' Use global constant
                    On Error Resume Next: Set SapGuiAuto = GetObject("SAPGUI"): If Err.Number = 0 And Not SapGuiAuto Is Nothing Then Exit Do: Err.Clear
                    If Timer - startTime > 15 Then MsgBox "Timeout waiting for GetObject after starting SAP Logon.", vbCritical: GoTo Cleanup
                 Loop While True
                 Debug.Print "      - GetObject successful after starting Logon."
            Else Debug.Print "      - GetObject successful."
            End If
            Set objGui = SapGuiAuto.GetScriptingEngine
            ' Inline CheckObject (objGui, "Scripting Engine after GetObject/Start", True)
            Set objToCheck = objGui: objName = "Scripting Engine after GetObject/Start": raiseErrorFlag = True
            If objToCheck Is Nothing Then
                Debug.Print "CheckObject WARNING: Object '" & objName & "' is Nothing."
                If raiseErrorFlag Then Err.Raise vbObjectError + 999, "CheckObject", "Required object '" & objName & "' was not found or is invalid."
                GoTo Cleanup
            End If
            ' End Inline CheckObject
            Debug.Print "      - Scripting Engine obtained."
        Else Debug.Print "    - SSO Step 1: Using existing objGui."
        End If
        Set objToCheck = Nothing ' Clear reusable variable

        ' Step 2: Open Connection
        Debug.Print "    - SSO Step 2: Opening Connection '" & cTARGET_SYSTEM_DESCRIPTION & "'..."
        On Error Resume Next
        Set TargetConn = objGui.OpenConnection(cTARGET_SYSTEM_DESCRIPTION, True) ' Async
        Dim openConnErr As Long: openConnErr = Err.Number: Dim openConnDesc As String: openConnDesc = Err.Description: Err.Clear
        On Error GoTo SsoLoginErrorHandler
        ' Inline CheckObject (TargetConn, "Opened Connection Object", True)
        Set objToCheck = TargetConn: objName = "Opened Connection Object": raiseErrorFlag = True
        If openConnErr <> 0 Or objToCheck Is Nothing Then
             If objToCheck Is Nothing Then Debug.Print "CheckObject WARNING: Object '" & objName & "' is Nothing."
             If raiseErrorFlag Or openConnErr <> 0 Then
                 MsgBox "OpenConnection Error (" & openConnErr & "): " & openConnDesc & vbCrLf & "Ensure description '" & cTARGET_SYSTEM_DESCRIPTION & "' exactly matches SAP Logon Pad entry.", vbCritical
                 GoTo Cleanup
             End If
        End If
        ' End Inline CheckObject
        Set objConn = TargetConn
        Debug.Print "      - OpenConnection successful. Connection: '" & objConn.Description & "'"

        ' Step 3: Get Session object
        Debug.Print "    - SSO Step 3: Waiting for session object..."
        startTime = Timer ' Use local startTime
        Do
            If objConn.Children.Count > 0 Then Exit Do
            Sleep cSHORT_WAIT_MS: DoEvents
            If Timer - startTime > 15 Then MsgBox "Timeout waiting for session object after OpenConnection.", vbCritical: GoTo Cleanup
        Loop
        Set TargetSessSSO = objConn.Children(0)
        ' Inline CheckObject (TargetSessSSO, "Session Object from SSO Connection", True)
        Set objToCheck = TargetSessSSO: objName = "Session Object from SSO Connection": raiseErrorFlag = True
        If objToCheck Is Nothing Then
            Debug.Print "CheckObject WARNING: Object '" & objName & "' is Nothing."
            If raiseErrorFlag Then Err.Raise vbObjectError + 999, "CheckObject", "Required object '" & objName & "' was not found or is invalid."
            GoTo Cleanup
        End If
        ' End Inline CheckObject
        Set objSess = TargetSessSSO
        Debug.Print "      - Session object obtained (ID: " & objSess.Info.SessionNumber & ")."

        ' Step 4: Wait for Session to be Ready (Inline WaitForSessionReady with TCode Check)
        Debug.Print "    - SSO Step 4: Waiting for session ready (Timeout: " & cLOGON_TIMEOUT_SECONDS & "s)..."
        waitTimeout = cLOGON_TIMEOUT_SECONDS: waitStartTime = Timer: waitReady = False: checkTCodeFlag = True
        On Error GoTo SsoLoginWaitError ' Specific handler for this wait
        Do
            If Not objSess.Busy Then
                If checkTCodeFlag Then
                    On Error Resume Next ' Ignore error if Info not ready yet
                    currentTransaction = objSess.Info.Transaction
                    If Err.Number = 0 And currentTransaction <> "" And UCase(currentTransaction) <> "SAPMSYST" Then
                        waitReady = True ' Session not busy AND transaction is valid
                    Else
                        Err.Clear ' Clear error from reading TCode
                    End If
                    On Error GoTo SsoLoginWaitError ' Restore handler
                Else
                    waitReady = True ' Session not busy, TCode check not required
                End If
            End If
            If waitReady Then Exit Do
            If Timer - waitStartTime > waitTimeout Then Debug.Print "WaitForSessionReady TIMEOUT after " & waitTimeout & "s. Session Busy: " & objSess.Busy: Exit Do
            Sleep cSHORT_WAIT_MS: DoEvents
        Loop While True
        On Error GoTo SsoLoginErrorHandler ' Restore main SSO handler
        If Not waitReady Then
            MsgBox "Timeout or error waiting for SAP main menu after SSO login.", vbCritical
            GoTo Cleanup
        End If
        Debug.Print "      - Session active. TCode: '" & objSess.Info.Transaction & "'"
        ' End Inline Wait

        ' Step 5: Get Status Bar
        Debug.Print "    - SSO Step 5: Getting status bar..."
        On Error Resume Next
        Set objSBar = objSess.FindById("wnd[0]/sbar")
        On Error GoTo ErrorHandler ' Restore MAIN error handler
        If objSBar Is Nothing Then Debug.Print "      - Warning: Could not get status bar." Else Debug.Print "      - Status bar obtained."

        ' Step 6: SSO Success
        SessionObtained = True
        Debug.Print "    - SSO Step 6: SSO login process successful."

        ' Optional: Verify system match
        ' Inline CheckObject (objSess, "Session for System Verify", False)
        Set objToCheck = objSess: objName = "Session for System Verify": raiseErrorFlag = False
        If Not (objToCheck Is Nothing) Then
           On Error Resume Next
           Dim loggedInSys As String: loggedInSys = objSess.Info.SystemName & objSess.Info.Client
           Dim sysCheckErr As Long: sysCheckErr = Err.Number: Err.Clear
           On Error GoTo ErrorHandler
           If sysCheckErr = 0 Then
               If loggedInSys <> cTARGET_SYSTEM_ID_CLIENT Then
                    MsgBox "Warning: SSO login successful but connected to wrong system/client!" & vbCrLf & _
                           "Expected: '" & cTARGET_SYSTEM_ID_CLIENT & "'" & vbCrLf & _
                           "Connected: '" & loggedInSys & "'", vbExclamation
               Else Debug.Print "      - System match verified ('" & loggedInSys & "')."
               End If
           Else Debug.Print "      - Warning: Could not verify system match after SSO login (Error: " & sysCheckErr & ")."
           End If
        Else
            Debug.Print "CheckObject WARNING: Object '" & objName & "' is Nothing."
        End If
        Set objToCheck = Nothing ' Clear reusable variable

        If SessionObtained Then GoTo RunMM03Script Else GoTo Cleanup

    End If ' End Path A vs Path B Check


    ' --- Fallback Check ---
    If Not SessionObtained Then
        Debug.Print "ERROR: Fallback reached - session not obtained after all attempts."
        MsgBox "Could not get a usable SAP session after all attempts (existing, /o, SSO).", vbCritical
        GoTo Cleanup
    End If


RunMM03Script:
    ' --- Call the MM03 Scripting Logic ---
    ' Inline CheckObject (objSess, "Session for RunGUIScript", True)
    Set objToCheck = objSess: objName = "Session for RunGUIScript": raiseErrorFlag = True
    If objToCheck Is Nothing Then
        Debug.Print "CheckObject WARNING: Object '" & objName & "' is Nothing."
        If raiseErrorFlag Then Err.Raise vbObjectError + 999, "CheckObject", "Required object '" & objName & "' was not found or is invalid."
        Debug.Print "INTERNAL ERROR: Reached RunMM03Script label but objSess is Nothing."
        MsgBox "Internal Error: Could not proceed to run GUI script (objSess is Nothing).", vbCritical
        GoTo Cleanup
    ElseIf Not SessionObtained Then
         Debug.Print "INTERNAL ERROR: Reached RunMM03Script label but SessionObtained is False."
         MsgBox "Internal Error: Could not proceed to run GUI script (SessionObtained=False).", vbCritical
         GoTo Cleanup
    Else
        ' Session is valid and obtained
        Debug.Print "-----------------------------------------------------"
        Debug.Print "STEP 5: Session ready. Calling RunGUIScript..."
        Debug.Print "  - Session ID: " & objSess.Info.SessionNumber
        Debug.Print "  - System/Client: " & objSess.Info.SystemName & "/" & objSess.Info.Client
        Debug.Print "  - User: " & objSess.Info.User
        Debug.Print "-----------------------------------------------------"
        RunGUIScript ' <<<<<< CALL THE MM03 SPECIFIC SUBROUTINE >>>>>>
    End If
    Set objToCheck = Nothing ' Clear reusable variable

Cleanup:
    ' --- Cleanup Section ---
    Debug.Print "-----------------------------------------------------"
    Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Running Cleanup for StartExtract..."

    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    ' Reset Status Bar (Inline)
    On Error Resume Next
    If Not Application Is Nothing Then Application.StatusBar = False
    On Error GoTo 0 ' Default handler

    ' Release local object variables
    Set TargetConn = Nothing: Debug.Print "  - Released TargetConn"
    Set W_conn = Nothing: Debug.Print "  - Released W_conn"
    Set W_Sess = Nothing: Debug.Print "  - Released W_Sess"
    Set FirstFoundSess = Nothing: Debug.Print "  - Released FirstFoundSess"
    Set NewSess = Nothing: Debug.Print "  - Released NewSess"
    Set SapGuiAuto = Nothing: Debug.Print "  - Released SapGuiAuto"
    Set TargetSessSSO = Nothing: Debug.Print "  - Released TargetSessSSO"
    Set popupWnd = Nothing: Debug.Print "  - Released popupWnd"
    Set objToCheck = Nothing ' Ensure reusable var is cleared

    ' Explicitly release GLOBAL SAP objects (Optional: Comment out if needed across multiple runs)
     Debug.Print "  - Releasing global SAP objects..."
     On Error Resume Next ' Ignore errors
     Set objSBar = Nothing: Debug.Print "    - Released objSBar"
     Set objSess = Nothing: Debug.Print "    - Released objSess"
     Set objConn = Nothing: Debug.Print "    - Released objConn"
     Set objGui = Nothing: Debug.Print "    - Released objGui"
     On Error GoTo 0
     Debug.Print "  - Global SAP objects released."

    Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - StartExtract finished."
    Debug.Print "=====================================================" & vbCrLf
    Exit Sub

' --- Error Handlers ---
ErrorHandler: ' General error handler for StartExtract
    Dim errNum As Long: errNum = Err.Number
    Dim errDesc As String: errDesc = Err.Description
    Dim errSource As String: errSource = Err.Source
    Debug.Print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - ERROR ENCOUNTERED in StartExtract (General Handler)!"
    Debug.Print "    Error #: " & errNum: Debug.Print "    Source:  " & errSource: Debug.Print "    Desc:    " & errDesc
    Debug.Print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    MsgBox "Error during SAP session setup/creation:" & vbCrLf & vbCrLf & _
           "Err #: " & errNum & vbCrLf & "Desc: " & errDesc, vbCritical, "SAP Connection Error"
    ' Reset Status Bar (Inline) on error
    On Error Resume Next
    If Not Application Is Nothing Then Application.StatusBar = False
    On Error GoTo 0
    Resume Cleanup

SsoLoginErrorHandler: ' Specific handler for SSO login errors within StartExtract
    Dim ssoErrNum As Long: ssoErrNum = Err.Number
    Dim ssoErrDesc As String: ssoErrDesc = Err.Description
    Dim ssoErrSource As String: ssoErrSource = Err.Source
    Debug.Print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - ERROR ENCOUNTERED during SSO Login Attempt!"
    Debug.Print "    Error #: " & ssoErrNum: Debug.Print "    Source:  " & ssoErrSource: Debug.Print "    Desc:    " & ssoErrDesc
    Debug.Print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
     MsgBox "Error during SAP SSO Logon attempt:" & vbCrLf & vbCrLf & _
           "Err #: " & ssoErrNum & vbCrLf & "Desc: " & ssoErrDesc, vbCritical, "SSO Login Error"
     SessionObtained = False
     ' Reset Status Bar (Inline) on error
     On Error Resume Next
     If Not Application Is Nothing Then Application.StatusBar = False
     On Error GoTo 0
     Resume Cleanup

SsoLoginWaitError: ' Specific handler for errors *during* the SSO wait loop
    Debug.Print "WaitForSessionReady (SSO) ERROR: #" & Err.Number & " - " & Err.Description
    waitReady = False ' Indicate wait failed
    Resume Next ' Continue loop execution (will eventually timeout or succeed)

End Sub


'//========================================================================
'// Sub: RunGUIScript
'// Purpose: Private subroutine containing only SAP transaction-specific logic (MM03).
'//          - Assumes a valid SAP session (objSess) is provided globally.
'//          - Interacts with Excel to read materials and write results.
'//          - Navigates MM03, handles popups, extracts data.
'//          - Uses array processing for Excel writing speed.
'//          - Handles transaction-specific errors and cleanup.
'// Modularity: Isolates the steps for a specific SAP task (MM03 data extraction).
'//             Can be replaced or modified for different transactions without
'//             affecting the connection logic in StartExtract.
'//========================================================================
Private Sub RunGUIScript()

    ' --- LOCAL Constants specific to MM03 Execution ---
    Const cTRANSACTION As String = "mm03"
    ' Excel Columns
    Const cMATERIAL_COL As String = "A"
    Const cSTATUS_MSG_COL As String = "C"
    Const cPROD_HIER_COL As String = "D"
    Const cOLD_MAT_COL As String = "E"
    Const cCREATED_BY_COL As String = "F"
    Const cLAST_CHANGED_COL As String = "G"
    Const cSTART_ROW As Long = 2
    ' SAP GUI Element IDs (Verify with Scripting Tracker)
    Const cMATNR_FIELD_ID As String = "wnd[0]/usr/ctxtRMMG1-MATNR"
    Const cVIEWS_POPUP_ID As String = "wnd[1]"
    Const cVIEWS_SELECT_ALL_BTN_ID As String = "wnd[1]/tbar[0]/btn[20]"
    Const cVIEWS_CONTINUE_BTN_ID As String = "wnd[1]/tbar[0]/btn[0]"
    Const cERROR_POPUP_ID As String = "wnd[2]" ' Potential secondary popup
    Const cPROD_HIER_FIELD_ID As String = "wnd[0]/usr/tabsTABSPR1/tabpSP01/ssubTABFRA1:SAPLMGMM:2004/subSUB2:SAPLMGD1:2001/ctxtMARA-PRDHA"
    Const cOLD_MAT_FIELD_ID As String = "wnd[0]/usr/tabsTABSPR1/tabpSP01/ssubTABFRA1:SAPLMGMM:2004/subSUB2:SAPLMGD1:2001/txtMARA-BISMT"
    Const cINFO_BTN_ID As String = "wnd[0]/usr/tabsTABSPR1/tabpSP01/ssubTABFRA1:SAPLMGMM:2004/subSUB1:SAPLMGD1:1002/btnINFO"
    Const cINFO_POPUP_ID As String = "wnd[1]"
    Const cINFO_POPUP_USER_AREA_ID As String = "wnd[1]/usr"
    Const cINFO_POPUP_BACK_BTN_ID As String = "wnd[1]/tbar[0]/btn[3]"
    Const cMAIN_BACK_BTN_ID As String = "wnd[0]/tbar[0]/btn[3]"
    Const cMAIN_EXIT_BTN_ID As String = "wnd[0]/tbar[0]/btn[15]" ' Exit button

    ' --- LOCAL Variables for RunGUIScript ---
    Dim ws As Worksheet
    Dim lastRow As Long
    Dim i As Long ' Row loop counter
    Dim materialNumber As String
    Dim statusMessage As String
    Dim prodHier As String
    Dim oldMatNum As String
    Dim createdByText As String
    Dim lastChangedByText As String
    Dim labelText As String
    Dim child As Object
    Dim mm03FieldCheck As GuiTextField ' Use specific type if known
    Dim selectViewsPopup As GuiModalWindow
    Dim infoPopup As GuiModalWindow
    Dim errorPopup As GuiModalWindow
    Dim objExcelApp As Object
    Dim dataOutputArray() As Variant
    Dim outputRow As Long
    Dim totalMaterials As Long
    Dim currentMaterialNum As Long
    Dim sbarText As String          ' To store status bar text
    Dim actionSuccess As Boolean    ' Flag to track if an action was successful
    Dim objToCheck As Object        ' Reusable variable for inline object checks
    Dim objName As String           ' Reusable variable for inline object check messages
    Dim raiseErrorFlag As Boolean   ' Reusable flag for inline object check error raising
    Dim waitTimeout As Long         ' Reusable variable for wait loop timeouts
    Dim waitStartTime As Single     ' Reusable variable for wait loop start times
    Dim waitReady As Boolean        ' Reusable flag for wait loop status
    Dim checkTCodeFlag As Boolean   ' Reusable flag for TCode check in wait loops
    Dim popup As GuiModalWindow     ' Reusable variable for popup checks
    Dim popupFound As Boolean       ' Reusable flag for popup checks
    Dim tempErrorMsg As String      ' Temp variable for popup message handling

    On Error GoTo MM03ErrorHandler ' Set error handler

    ' --- Pre-checks ---
    Debug.Print "Entering RunGUIScript (Enhanced v6 - Two Subs)..."
    ' Inline CheckObject (objSess, "objSess in RunGUIScript", True)
    Set objToCheck = objSess: objName = "objSess in RunGUIScript": raiseErrorFlag = True
    If objToCheck Is Nothing Then
        Debug.Print "CheckObject WARNING: Object '" & objName & "' is Nothing."
        If raiseErrorFlag Then Err.Raise vbObjectError + 999, "CheckObject", "Required object '" & objName & "' was not found or is invalid."
        GoTo MM03Cleanup ' Exit if session is invalid
    End If
    ' End Inline CheckObject

    ' Try to get status bar if not already set globally
    If objSBar Is Nothing Then
        On Error Resume Next
        Set objSBar = objSess.FindById("wnd[0]/sbar")
        On Error GoTo MM03ErrorHandler ' Restore handler
        If objSBar Is Nothing Then Debug.Print "  - Warning: objSBar could not be obtained for session #" & objSess.Info.SessionNumber & "."
    End If
    Debug.Print "  - Session #" & objSess.Info.SessionNumber & " checks passed."

    ' --- Get Excel Worksheet ---
    On Error Resume Next
    Set objExcelApp = GetObject(, "Excel.Application")
    If Err.Number <> 0 Then
        MsgBox "Error: Could not connect to running Excel application.", vbCritical, "Excel Connection Error"
        GoTo MM03Cleanup
    End If
    Set ws = objExcelApp.Worksheets("Sheet1") ' *** CHANGE "Sheet1" if needed ***
    ' Inline CheckObject (ws, "Excel Worksheet 'Sheet1'", True)
    Set objToCheck = ws: objName = "Excel Worksheet 'Sheet1'": raiseErrorFlag = True
     If objToCheck Is Nothing Then
        Debug.Print "CheckObject WARNING: Object '" & objName & "' is Nothing."
        If raiseErrorFlag Then MsgBox "Error: Could not find worksheet named 'Sheet1'.", vbCritical, "Excel Worksheet Error" ' Raise error via MsgBox
        Set objExcelApp = Nothing: GoTo MM03Cleanup
    End If
    ' End Inline CheckObject
    On Error GoTo MM03ErrorHandler
    Debug.Print "  - Connected to Excel Worksheet: '" & ws.Name & "'"

    ' --- Get Last Row and Calculate Total ---
    lastRow = ws.Cells(ws.Rows.Count, cMATERIAL_COL).End(xlUp).row
    If lastRow < cSTART_ROW Then
        MsgBox "No data found in Excel sheet '" & ws.Name & "' starting from row " & cSTART_ROW & ", column " & cMATERIAL_COL & ".", vbInformation, "No Input Data"
        GoTo MM03Cleanup
    End If
    totalMaterials = lastRow - cSTART_ROW + 1
    Debug.Print "  - Last row with data in column " & cMATERIAL_COL & ": " & lastRow & " (Total: " & totalMaterials & ")"

    ' --- Size the output array ---
    ReDim dataOutputArray(1 To totalMaterials, 1 To 5) ' Status, ProdHier, OldMat, CreatedBy, LastChangedBy

    ' --- Navigate to MM03 ---
    ' Update Status Bar (Inline)
    On Error Resume Next
    If Not Application Is Nothing Then Application.StatusBar = "Navigating to MM03..."
    On Error GoTo MM03ErrorHandler
    Debug.Print "  - Navigating to transaction '" & cTRANSACTION & "'..."
    If objSess.Info.Transaction <> UCase(cTRANSACTION) Then
        objSess.FindById("wnd[0]/tbar[0]/okcd").Text = "/n" & cTRANSACTION
        objSess.FindById("wnd[0]").sendVKey 0
        ' Inline WaitForSessionReady(objSess, cDEFAULT_TIMEOUT_SEC, True)
        waitTimeout = cDEFAULT_TIMEOUT_SEC: waitStartTime = Timer: waitReady = False: checkTCodeFlag = True
        On Error GoTo MM03WaitError ' Use local handler for wait error
        Do
            If Not objSess.Busy Then
                If checkTCodeFlag Then
                    On Error Resume Next
                    currentTransaction = objSess.Info.Transaction
                    If Err.Number = 0 And currentTransaction <> "" And UCase(currentTransaction) <> "SAPMSYST" Then waitReady = True Else Err.Clear
                    On Error GoTo MM03WaitError
                Else waitReady = True
                End If
            End If
            If waitReady Then Exit Do
            If Timer - waitStartTime > waitTimeout Then Debug.Print "WaitForSessionReady TIMEOUT after " & waitTimeout & "s. Session Busy: " & objSess.Busy: Exit Do
            Sleep cSHORT_WAIT_MS: DoEvents
        Loop While True
        On Error GoTo MM03ErrorHandler ' Restore main handler
        If Not waitReady Then Err.Raise vbObjectError + 511, "RunGUIScript", "Timeout or error waiting for MM03 after /n navigation."
        ' End Inline Wait
    Else
        Debug.Print "  - Already in MM03, pressing Back to reset..."
        On Error Resume Next ' Ignore error if Back button isn't active/needed
        objSess.FindById(cMAIN_BACK_BTN_ID).press
        Dim backErr As Long: backErr = Err.Number: Err.Clear
        On Error GoTo MM03ErrorHandler
        If backErr = 0 Then
           ' Inline WaitForSessionReady(objSess, 5)
           waitTimeout = 5: waitStartTime = Timer: waitReady = False: checkTCodeFlag = False
           On Error GoTo MM03WaitError
           Do
               If Not objSess.Busy Then waitReady = True: Exit Do
               If Timer - waitStartTime > waitTimeout Then Debug.Print "WaitForSessionReady TIMEOUT after " & waitTimeout & "s. Session Busy: " & objSess.Busy: Exit Do
               Sleep cSHORT_WAIT_MS: DoEvents
           Loop While True
           On Error GoTo MM03ErrorHandler
           If Not waitReady Then Debug.Print "  - Warning: Session busy after pressing Back."
           ' End Inline Wait
        End If
    End If

    ' --- Verify Navigation to MM03 Initial Screen ---
    On Error Resume Next
    Set mm03FieldCheck = objSess.FindById(cMATNR_FIELD_ID)
    ' Inline CheckObject (mm03FieldCheck, "MM03 Material Field after Navigation", True)
    Set objToCheck = mm03FieldCheck: objName = "MM03 Material Field after Navigation": raiseErrorFlag = True
    If Err.Number <> 0 Or objToCheck Is Nothing Then
        If objToCheck Is Nothing Then Debug.Print "CheckObject WARNING: Object '" & objName & "' is Nothing."
        Err.Clear: On Error GoTo MM03ErrorHandler
        Err.Raise vbObjectError + 512, "RunGUIScript", "Failed to verify MM03 initial screen. Field '" & cMATNR_FIELD_ID & "' not found."
    Else
        Debug.Print "  - Successfully verified MM03 initial screen."
    End If
    ' End Inline CheckObject
    Set mm03FieldCheck = Nothing
    On Error GoTo MM03ErrorHandler

    ' --- Loop through each row in Excel ---
    outputRow = 0
    For i = cSTART_ROW To lastRow
        outputRow = outputRow + 1
        currentMaterialNum = outputRow

        Debug.Print "-----------------------------------------------------"
        Debug.Print "Processing row: " & i & " (" & currentMaterialNum & "/" & totalMaterials & ")"

        ' --- Reset variables for this row ---
        materialNumber = "": statusMessage = "": prodHier = ""
        oldMatNum = "": createdByText = "": lastChangedByText = ""
        Set selectViewsPopup = Nothing: Set infoPopup = Nothing: Set errorPopup = Nothing
        sbarText = "": actionSuccess = False: tempErrorMsg = ""

        ' --- Read Material Number ---
        materialNumber = Trim$(CStr(ws.Range(cMATERIAL_COL & i).value))
        ' Update Status Bar (Inline)
        On Error Resume Next
        If Not Application Is Nothing Then Application.StatusBar = "Processing " & currentMaterialNum & "/" & totalMaterials & ": '" & materialNumber & "'..."
        On Error GoTo MM03ErrorHandler

        If materialNumber = "" Then
            Debug.Print "  - WARNING: Skipping row " & i & " due to missing Material Number."
            statusMessage = "Skipped - Missing Material"
            dataOutputArray(outputRow, 1) = statusMessage
            GoTo NextIteration
        End If
        Debug.Print "  - Material Number from Excel: '" & materialNumber & "'"

        ' --- Step 2: Enter Material and Press Enter ---
        Debug.Print "  - Entering Material Number and pressing Enter..."
        Dim matnrField As GuiTextField
        On Error Resume Next
        Set matnrField = objSess.FindById(cMATNR_FIELD_ID)
        On Error GoTo MM03ErrorHandler
        ' Inline CheckObject (matnrField, cMATNR_FIELD_ID, True)
        Set objToCheck = matnrField: objName = cMATNR_FIELD_ID: raiseErrorFlag = True
        If objToCheck Is Nothing Then
            Debug.Print "CheckObject WARNING: Object '" & objName & "' is Nothing."
            If raiseErrorFlag Then Err.Raise vbObjectError + 999, "CheckObject", "Required object '" & objName & "' was not found or is invalid."
            GoTo MM03Cleanup ' Abort if field not found
        End If
        ' End Inline CheckObject

        matnrField.Text = materialNumber
        objSess.FindById("wnd[0]").sendVKey 0
        Set matnrField = Nothing ' Release field object

        ' --- Wait and Check Initial Outcome (Inline Wait) ---
        waitTimeout = cDEFAULT_TIMEOUT_SEC: waitStartTime = Timer: waitReady = False: checkTCodeFlag = False
        On Error GoTo MM03WaitError
        Do
            If Not objSess.Busy Then waitReady = True: Exit Do
            If Timer - waitStartTime > waitTimeout Then Debug.Print "WaitForSessionReady TIMEOUT after " & waitTimeout & "s. Session Busy: " & objSess.Busy: Exit Do
            Sleep cSHORT_WAIT_MS: DoEvents
        Loop While True
        On Error GoTo MM03ErrorHandler
        If Not waitReady Then Debug.Print "  - Warning: Session busy after entering material. Checking popups/status..."
        ' End Inline Wait

        ' --- Step 3: Check for Status Bar Message FIRST (Inline GetStatusBarText) ---
        sbarText = ""
        On Error Resume Next ' Ignore error if status bar doesn't exist or text cannot be read
        If Not objSBar Is Nothing Then sbarText = Trim$(objSBar.Text)
        Err.Clear
        On Error GoTo MM03ErrorHandler ' Restore default error handling
        ' End Inline GetStatusBarText

        If sbarText <> "" Then
             Debug.Print "  - Status Bar Message: '" & sbarText & "'"
             Select Case True ' Check for common blocking errors
                 Case InStr(1, sbarText, "does not exist", vbTextCompare) > 0, _
                      InStr(1, sbarText, "not maintained", vbTextCompare) > 0, _
                      InStr(1, sbarText, "Material locked", vbTextCompare) > 0, _
                      InStr(1, sbarText, "No data", vbTextCompare) > 0, _
                      InStr(1, sbarText, "not defined", vbTextCompare) > 0
                     Debug.Print "  - Skipping data extraction due to status message: " & sbarText
                     statusMessage = sbarText
                     dataOutputArray(outputRow, 1) = statusMessage
                     GoTo NextIteration ' Skip rest of processing for this material
                 Case Else
                     statusMessage = "OK (SBar: " & sbarText & ")" ' Log non-blocking message
             End Select
        Else
             statusMessage = "OK" ' Default if status bar is empty
        End If

        ' --- Step 4: Handle "Select View(s)" Popup (wnd[1]) ---
        Set selectViewsPopup = Nothing: On Error Resume Next
        Set selectViewsPopup = objSess.FindById(cVIEWS_POPUP_ID, False)
        Dim viewsPopupErr As Long: viewsPopupErr = Err.Number: Err.Clear
        On Error GoTo MM03ErrorHandler

        ' Inline CheckObject (selectViewsPopup, "'Select View(s)' Popup", False)
        Set objToCheck = selectViewsPopup: objName = "'Select View(s)' Popup": raiseErrorFlag = False
        If viewsPopupErr = 0 And Not (objToCheck Is Nothing) Then
            ' selectViewsPopup is valid
            ' Update Status Bar (Inline)
            On Error Resume Next
            If Not Application Is Nothing Then Application.StatusBar = "Processing " & currentMaterialNum & "/" & totalMaterials & ": '" & materialNumber & "' - Selecting views..."
            On Error GoTo MM03ErrorHandler

            Debug.Print "  - 'Select View(s)' popup (wnd[1]) detected. Text: '" & selectViewsPopup.Text & "'"
            actionSuccess = False ' Reset flag
            On Error Resume Next ' Handle errors during popup interaction
            Dim selectAllBtn As GuiButton: Set selectAllBtn = selectViewsPopup.FindById(cVIEWS_SELECT_ALL_BTN_ID)
            Dim continueBtn As GuiButton: Set continueBtn = selectViewsPopup.FindById(cVIEWS_CONTINUE_BTN_ID)

            ' Inline CheckObject (selectAllBtn, cVIEWS_SELECT_ALL_BTN_ID, False)
            Set objToCheck = selectAllBtn: objName = cVIEWS_SELECT_ALL_BTN_ID: raiseErrorFlag = False
            If Not (objToCheck Is Nothing) Then
                Debug.Print "    - Pressing Select All..."
                selectAllBtn.press
                ' Inline Wait
                waitTimeout = 3: waitStartTime = Timer: waitReady = False: checkTCodeFlag = False
                On Error GoTo MM03WaitError
                Do
                    If Not objSess.Busy Then waitReady = True: Exit Do
                    If Timer - waitStartTime > waitTimeout Then Debug.Print "WaitForSessionReady TIMEOUT after " & waitTimeout & "s. Session Busy: " & objSess.Busy: Exit Do
                    Sleep cSHORT_WAIT_MS: DoEvents
                Loop While True
                On Error GoTo MM03ErrorHandler
                If Not waitReady Then Debug.Print "    - Warning: Session busy after Select All."
                ' End Inline Wait
            Else
                Debug.Print "CheckObject WARNING: Object '" & objName & "' is Nothing."
                Debug.Print "    - Warning: Select All button not found."
            End If
            ' End Inline CheckObject

            ' Inline CheckObject (continueBtn, cVIEWS_CONTINUE_BTN_ID, False)
            Set objToCheck = continueBtn: objName = cVIEWS_CONTINUE_BTN_ID: raiseErrorFlag = False
            If Not (objToCheck Is Nothing) Then
                Debug.Print "    - Pressing Continue (1st time)..."
                continueBtn.press
                ' Inline Wait
                waitTimeout = 5: waitStartTime = Timer: waitReady = False: checkTCodeFlag = False
                On Error GoTo MM03WaitError
                Do
                    If Not objSess.Busy Then waitReady = True: Exit Do
                    If Timer - waitStartTime > waitTimeout Then Debug.Print "WaitForSessionReady TIMEOUT after " & waitTimeout & "s. Session Busy: " & objSess.Busy: Exit Do
                    Sleep cSHORT_WAIT_MS: DoEvents
                Loop While True
                On Error GoTo MM03ErrorHandler
                If Not waitReady Then Debug.Print "    - Warning: Session busy after 1st Continue."
                ' End Inline Wait

                 ' Check if popup still exists (might need second press for org levels)
                 Dim checkPopupAgain As GuiModalWindow: Set checkPopupAgain = objSess.FindById(cVIEWS_POPUP_ID, False)
                 If Not checkPopupAgain Is Nothing Then
                     Debug.Print "    - Popup still present. Pressing Continue (2nd time)..."
                     continueBtn.press
                     ' Inline Wait
                     waitTimeout = cDEFAULT_TIMEOUT_SEC: waitStartTime = Timer: waitReady = False: checkTCodeFlag = False
                     On Error GoTo MM03WaitError
                     Do
                         If Not objSess.Busy Then waitReady = True: Exit Do
                         If Timer - waitStartTime > waitTimeout Then Debug.Print "WaitForSessionReady TIMEOUT after " & waitTimeout & "s. Session Busy: " & objSess.Busy: Exit Do
                         Sleep cSHORT_WAIT_MS: DoEvents
                     Loop While True
                     On Error GoTo MM03ErrorHandler
                     If Not waitReady Then Debug.Print "    - Warning: Session busy after 2nd Continue."
                     ' End Inline Wait
                 End If
                 Set checkPopupAgain = Nothing
                 actionSuccess = True ' Assume success if no error during presses
            Else
                Debug.Print "CheckObject WARNING: Object '" & objName & "' is Nothing."
                Debug.Print "    - Warning: Continue button not found."
            End If
            ' End Inline CheckObject

            Set selectAllBtn = Nothing: Set continueBtn = Nothing
            If Err.Number <> 0 Then actionSuccess = False: Debug.Print "    - Error interacting with Select Views popup: " & Err.Description: Err.Clear
            On Error GoTo MM03ErrorHandler

            If Not actionSuccess Then
                statusMessage = "Error handling Select Views popup"
                dataOutputArray(outputRow, 1) = statusMessage
                On Error Resume Next ' Try to close popup and go back
                selectViewsPopup.Close
                objSess.FindById(cMAIN_BACK_BTN_ID).press
                On Error GoTo MM03ErrorHandler
                GoTo NextIteration
            End If
            Debug.Print "  - Select Views popup handled."
        Else
            If viewsPopupErr <> 0 Then Debug.Print "CheckObject WARNING: Error finding object '" & objName & "'. Error: " & viewsPopupErr
            Else Debug.Print "CheckObject WARNING: Object '" & objName & "' is Nothing."
            End If
            Debug.Print "  - 'Select View(s)' popup (wnd[1]) not detected or error finding it. Proceeding..."
        End If
        Set objToCheck = Nothing ' Clear reusable variable
        Set selectViewsPopup = Nothing

        ' --- Step 4a: Check for UNEXPECTED secondary popup (Inline HandleUnexpectedPopup) ---
        popupFound = False: tempErrorMsg = ""
        ' Check wnd[1]
        On Error Resume Next
        Set popup = objSess.FindById("wnd[1]", False)
        If Err.Number = 0 And Not popup Is Nothing Then
            tempErrorMsg = "Unexpected Popup wnd[1]: " & Trim$(popup.Text)
            Debug.Print "HandleUnexpectedPopup: Found " & tempErrorMsg
            popup.Close: Debug.Print "HandleUnexpectedPopup: Closed wnd[1]."
            ' Inline Wait
            waitTimeout = 3: waitStartTime = Timer: waitReady = False: checkTCodeFlag = False
            On Error GoTo MM03WaitError
            Do
                If Not objSess.Busy Then waitReady = True: Exit Do
                If Timer - waitStartTime > waitTimeout Then Debug.Print "WaitForSessionReady TIMEOUT after " & waitTimeout & "s. Session Busy: " & objSess.Busy: Exit Do
                Sleep cSHORT_WAIT_MS: DoEvents
            Loop While True
            On Error GoTo MM03ErrorHandler
            ' End Inline Wait
            popupFound = True
        End If
        Set popup = Nothing: Err.Clear
        ' Check wnd[2] if wnd[1] not found
        If Not popupFound Then
            Set popup = objSess.FindById("wnd[2]", False)
            If Err.Number = 0 And Not popup Is Nothing Then
                tempErrorMsg = "Unexpected Popup wnd[2]: " & Trim$(popup.Text)
                Debug.Print "HandleUnexpectedPopup: Found " & tempErrorMsg
                popup.Close: Debug.Print "HandleUnexpectedPopup: Closed wnd[2]."
                 ' Inline Wait
                waitTimeout = 3: waitStartTime = Timer: waitReady = False: checkTCodeFlag = False
                On Error GoTo MM03WaitError
                Do
                    If Not objSess.Busy Then waitReady = True: Exit Do
                    If Timer - waitStartTime > waitTimeout Then Debug.Print "WaitForSessionReady TIMEOUT after " & waitTimeout & "s. Session Busy: " & objSess.Busy: Exit Do
                    Sleep cSHORT_WAIT_MS: DoEvents
                Loop While True
                On Error GoTo MM03ErrorHandler
                ' End Inline Wait
                popupFound = True
            End If
            Set popup = Nothing: Err.Clear
        End If
        On Error GoTo MM03ErrorHandler ' Restore handler
        ' End Inline HandleUnexpectedPopup

        If popupFound Then
            statusMessage = tempErrorMsg ' Assign captured message
            Debug.Print "  - Skipping data extraction due to unexpected popup: " & statusMessage
            dataOutputArray(outputRow, 1) = statusMessage
            On Error Resume Next ' Try to go back safely
            objSess.FindById(cMAIN_BACK_BTN_ID).press
            On Error GoTo MM03ErrorHandler
            GoTo NextIteration
        End If

        ' --- Step 5: Extract Data from Basic Data 1 View ---
        ' Update Status Bar (Inline)
        On Error Resume Next
        If Not Application Is Nothing Then Application.StatusBar = "Processing " & currentMaterialNum & "/" & totalMaterials & ": '" & materialNumber & "' - Reading Basic Data..."
        On Error GoTo MM03ErrorHandler
        Debug.Print "  - Attempting to extract data from Basic Data 1 view..."
        On Error Resume Next ' Use Resume Next for individual field reads

        Dim prodHierField As GuiTextField: Set prodHierField = objSess.FindById(cPROD_HIER_FIELD_ID)
        ' Inline CheckObject (prodHierField, cPROD_HIER_FIELD_ID, False)
        Set objToCheck = prodHierField: objName = cPROD_HIER_FIELD_ID: raiseErrorFlag = False
        If Not (objToCheck Is Nothing) Then prodHier = prodHierField.Text Else Debug.Print "CheckObject WARNING: Object '" & objName & "' is Nothing.": prodHier = "Error: Field Not Found"
        ' End Inline CheckObject
        If Err.Number <> 0 Then Debug.Print "    - Warning: Error reading Prod Hier: " & Err.Description: Err.Clear: prodHier = "Error: Read Failed"
        Set prodHierField = Nothing

        Dim oldMatField As GuiTextField: Set oldMatField = objSess.FindById(cOLD_MAT_FIELD_ID)
        ' Inline CheckObject (oldMatField, cOLD_MAT_FIELD_ID, False)
        Set objToCheck = oldMatField: objName = cOLD_MAT_FIELD_ID: raiseErrorFlag = False
        If Not (objToCheck Is Nothing) Then oldMatNum = oldMatField.Text Else Debug.Print "CheckObject WARNING: Object '" & objName & "' is Nothing.": oldMatNum = "Error: Field Not Found"
        ' End Inline CheckObject
        If Err.Number <> 0 Then Debug.Print "    - Warning: Error reading Old Mat: " & Err.Description: Err.Clear: oldMatNum = "Error: Read Failed"
        Set oldMatField = Nothing

        On Error GoTo MM03ErrorHandler ' Restore main handler
        Debug.Print "    - Product Hierarchy: '" & prodHier & "'"
        Debug.Print "    - Old Material Num: '" & oldMatNum & "'"

        ' --- Step 6: Extract Creation / Last Changed Info ---
        ' Update Status Bar (Inline)
        On Error Resume Next
        If Not Application Is Nothing Then Application.StatusBar = "Processing " & currentMaterialNum & "/" & totalMaterials & ": '" & materialNumber & "' - Reading Creation Info..."
        On Error GoTo MM03ErrorHandler
        Debug.Print "  - Attempting to extract creation/change info..."
        Set infoPopup = Nothing
        createdByText = "Not Found": lastChangedByText = "Not Found"
        actionSuccess = False ' Reset flag

        Dim infoBtn As GuiButton
        On Error Resume Next
        Set infoBtn = objSess.FindById(cINFO_BTN_ID)
        On Error GoTo MM03ErrorHandler
        ' Inline CheckObject (infoBtn, cINFO_BTN_ID, False)
        Set objToCheck = infoBtn: objName = cINFO_BTN_ID: raiseErrorFlag = False
        If objToCheck Is Nothing Then
            Debug.Print "CheckObject WARNING: Object '" & objName & "' is Nothing."
            Debug.Print "    - Warning: Info button (" & cINFO_BTN_ID & ") not found."
            createdByText = "Info Btn Not Found": lastChangedByText = "Info Btn Not Found"
            GoTo StoreDataInArray ' Skip if button not found
        End If
        ' End Inline CheckObject

        On Error Resume Next ' Handle error pressing button or waiting
        infoBtn.press
        Set infoBtn = Nothing ' Release button object
        If Err.Number <> 0 Then
            Debug.Print "    - Warning: Error pressing Info button: " & Err.Description: Err.Clear
            createdByText = "Info Btn Press Error": lastChangedByText = "Info Btn Press Error"
            GoTo StoreDataInArray
        End If

        ' Wait for popup or session ready (Inline Wait)
        waitTimeout = 5: waitStartTime = Timer: waitReady = False: checkTCodeFlag = False
        On Error GoTo MM03WaitError
        Do
            If Not objSess.Busy Then waitReady = True: Exit Do
            If Timer - waitStartTime > waitTimeout Then Debug.Print "WaitForSessionReady TIMEOUT after " & waitTimeout & "s. Session Busy: " & objSess.Busy: Exit Do
            Sleep cSHORT_WAIT_MS: DoEvents
        Loop While True
        On Error GoTo MM03ErrorHandler
        If Not waitReady Then Debug.Print "    - Warning: Session busy after pressing Info button."
        ' End Inline Wait

        Set infoPopup = objSess.FindById(cINFO_POPUP_ID, False) ' Check if Info popup appeared
        Dim infoPopupErr As Long: infoPopupErr = Err.Number: Err.Clear
        ' Inline CheckObject (infoPopup, "Info Popup", False)
        Set objToCheck = infoPopup: objName = "Info Popup": raiseErrorFlag = False
        If infoPopupErr = 0 And Not (objToCheck Is Nothing) Then
            ' infoPopup is valid
            actionSuccess = True ' Assume success if popup found
            Debug.Print "  - Info popup (wnd[1]) detected. Iterating labels..."
            Dim userArea As GuiUserArea
            On Error Resume Next
            Set userArea = infoPopup.FindById(cINFO_POPUP_USER_AREA_ID)
            On Error GoTo MM03ErrorHandler
            ' Inline CheckObject (userArea, cINFO_POPUP_USER_AREA_ID, False)
            Set objToCheck = userArea: objName = cINFO_POPUP_USER_AREA_ID: raiseErrorFlag = False
            If Not (objToCheck Is Nothing) Then
                ' userArea is valid
                Const createdByKey As String = "Created by" ' Local constant ok here
                Const changedByKey As String = "Last changed by"
                For Each child In userArea.Children
                    If TypeName(child) = "GuiLabel" Then ' More robust type check
                        labelText = Trim$(child.Text)
                        If InStr(1, labelText, createdByKey, vbTextCompare) > 0 And createdByText = "Not Found" Then
                            createdByText = labelText
                            Debug.Print "      - Found Created By Text: '" & createdByText & "'"
                        End If
                        If InStr(1, labelText, changedByKey, vbTextCompare) > 0 And lastChangedByText = "Not Found" Then
                           lastChangedByText = labelText
                           Debug.Print "      - Found Last Changed By Text: '" & lastChangedByText & "'"
                        End If
                    End If
                    If createdByText <> "Not Found" And lastChangedByText <> "Not Found" Then Exit For
                Next child
            Else
                 Debug.Print "CheckObject WARNING: Object '" & objName & "' is Nothing."
                 Debug.Print "    - Warning: Could not find user area (" & cINFO_POPUP_USER_AREA_ID & ") in Info popup."
                 createdByText = "Info Area Error": lastChangedByText = "Info Area Error"
                 actionSuccess = False
            End If
            ' End Inline CheckObject for userArea
            Set userArea = Nothing: Set child = Nothing

            ' Close the Info popup
            Dim infoBackBtn As GuiButton
            On Error Resume Next
            Set infoBackBtn = infoPopup.FindById(cINFO_POPUP_BACK_BTN_ID)
            ' Inline CheckObject (infoBackBtn, cINFO_POPUP_BACK_BTN_ID, False)
            Set objToCheck = infoBackBtn: objName = cINFO_POPUP_BACK_BTN_ID: raiseErrorFlag = False
            If Not (objToCheck Is Nothing) Then
                infoBackBtn.press
                ' Inline Wait
                waitTimeout = 5: waitStartTime = Timer: waitReady = False: checkTCodeFlag = False
                On Error GoTo MM03WaitError
                Do
                    If Not objSess.Busy Then waitReady = True: Exit Do
                    If Timer - waitStartTime > waitTimeout Then Debug.Print "WaitForSessionReady TIMEOUT after " & waitTimeout & "s. Session Busy: " & objSess.Busy: Exit Do
                    Sleep cSHORT_WAIT_MS: DoEvents
                Loop While True
                On Error GoTo MM03ErrorHandler
                If Not waitReady Then Debug.Print "    - Warning: Session busy after closing Info popup."
                ' End Inline Wait
            Else
                Debug.Print "CheckObject WARNING: Object '" & objName & "' is Nothing."
                Debug.Print "    - Warning: Back button not found on Info popup." : actionSuccess = False
            End If
            ' End Inline CheckObject
            Set infoBackBtn = Nothing
            If Err.Number <> 0 Then Debug.Print "    - Error closing info popup: " & Err.Description: Err.Clear: actionSuccess = False
        Else
            If infoPopupErr <> 0 Then Debug.Print "CheckObject WARNING: Error finding object '" & objName & "'. Error: " & infoPopupErr
            Else Debug.Print "CheckObject WARNING: Object '" & objName & "' is Nothing."
            End If
            Debug.Print "  - Info popup (wnd[1]) did not appear or error finding it (" & infoPopupErr & ")."
            Err.Clear
            createdByText = "Info Popup Error": lastChangedByText = "Info Popup Error"
        End If
        Set objToCheck = Nothing ' Clear reusable variable
        Set infoPopup = Nothing
        On Error GoTo MM03ErrorHandler

StoreDataInArray:
        ' --- Step 7: Store Extracted Data in Array ---
        Debug.Print "  - Storing data in array for row " & i & "..."
        dataOutputArray(outputRow, 1) = statusMessage ' Col C
        dataOutputArray(outputRow, 2) = prodHier      ' Col D
        dataOutputArray(outputRow, 3) = oldMatNum     ' Col E
        dataOutputArray(outputRow, 4) = createdByText ' Col F
        dataOutputArray(outputRow, 5) = lastChangedByText ' Col G

        ' --- Step 8: Navigate Back for Next Material ---
        ' Update Status Bar (Inline)
        On Error Resume Next
        If Not Application Is Nothing Then Application.StatusBar = "Processing " & currentMaterialNum & "/" & totalMaterials & ": '" & materialNumber & "' - Navigating back..."
        On Error GoTo MM03ErrorHandler
        Debug.Print "  - Pressing Back to return to initial MM03 screen..."
        Dim mainBackBtn As GuiButton
        On Error Resume Next
        Set mainBackBtn = objSess.FindById(cMAIN_BACK_BTN_ID)
        ' Inline CheckObject (mainBackBtn, cMAIN_BACK_BTN_ID, False)
        Set objToCheck = mainBackBtn: objName = cMAIN_BACK_BTN_ID: raiseErrorFlag = False
        If Not (objToCheck Is Nothing) Then
            mainBackBtn.press
            ' Inline Wait
            waitTimeout = 5: waitStartTime = Timer: waitReady = False: checkTCodeFlag = False
            On Error GoTo MM03WaitError
            Do
                If Not objSess.Busy Then waitReady = True: Exit Do
                If Timer - waitStartTime > waitTimeout Then Debug.Print "WaitForSessionReady TIMEOUT after " & waitTimeout & "s. Session Busy: " & objSess.Busy: Exit Do
                Sleep cSHORT_WAIT_MS: DoEvents
            Loop While True
            On Error GoTo MM03ErrorHandler
            If Not waitReady Then Debug.Print "  - Warning: Session busy after pressing main Back button."
            ' End Inline Wait
             ' Verify we are back at the initial screen
             Dim checkMatField As GuiTextField: Set checkMatField = objSess.FindById(cMATNR_FIELD_ID, False)
             If checkMatField Is Nothing Then Debug.Print "  - Warning: Did not return to MM03 initial screen after Back."
             Set checkMatField = Nothing
        Else
            Debug.Print "CheckObject WARNING: Object '" & objName & "' is Nothing."
            Debug.Print "  - Warning: Main Back button not found."
        End If
        ' End Inline CheckObject
        Set mainBackBtn = Nothing
        If Err.Number <> 0 Then Debug.Print "  - Error pressing main Back button: " & Err.Description: Err.Clear
        On Error GoTo MM03ErrorHandler

NextIteration: ' Label to jump to for skipping a row
        Set objToCheck = Nothing ' Clear reusable variable at end of loop
    Loop ' End of the main For loop

    Debug.Print "-----------------------------------------------------"
    Debug.Print "STEP 9: Finished processing all rows."
    ' Update Status Bar (Inline)
    On Error Resume Next
    If Not Application Is Nothing Then Application.StatusBar = "Writing " & totalMaterials & " results to Excel..."
    On Error GoTo MM03ErrorHandler

    ' --- Write the entire array to Excel ---
    Dim outputRange As Range
    On Error Resume Next ' Handle error if sheet/range is invalid
    Set outputRange = ws.Range(cSTATUS_MSG_COL & cSTART_ROW)
    ' Inline CheckObject (outputRange, "Output Range Start Cell", True)
    Set objToCheck = outputRange: objName = "Output Range Start Cell": raiseErrorFlag = True
    If Err.Number = 0 And Not (objToCheck Is Nothing) Then
        ' outputRange is valid
        outputRange.Resize(UBound(dataOutputArray, 1), UBound(dataOutputArray, 2)).value = dataOutputArray
        Debug.Print "  - Data array written to worksheet starting at cell " & outputRange.Address & "."
    Else
        If objToCheck Is Nothing Then Debug.Print "CheckObject WARNING: Object '" & objName & "' is Nothing."
        Debug.Print "  - ERROR: Could not define output range starting at " & cSTATUS_MSG_COL & cSTART_ROW & ". Data not written."
        If raiseErrorFlag Then MsgBox "Error writing data to Excel. Could not set output range.", vbCritical ' Raise error via MsgBox
    End If
    ' End Inline CheckObject
    Err.Clear
    On Error GoTo MM03ErrorHandler
    Set outputRange = Nothing

    ' --- Final Navigation Back/Exit (Optional) ---
    Debug.Print "  - Attempting final Exit from MM03 initial screen..."
    On Error Resume Next ' Ignore error if already exited or button not found
    Dim exitBtn As GuiButton: Set exitBtn = objSess.FindById(cMAIN_EXIT_BTN_ID)
    If Not exitBtn Is Nothing Then exitBtn.press Else objSess.FindById(cMAIN_BACK_BTN_ID).press ' Try Back if Exit not found
    Set exitBtn = Nothing
    If Err.Number = 0 Then
        ' Inline Wait
        waitTimeout = 3: waitStartTime = Timer: waitReady = False: checkTCodeFlag = False
        On Error GoTo MM03WaitError
        Do
            If Not objSess.Busy Then waitReady = True: Exit Do
            If Timer - waitStartTime > waitTimeout Then Debug.Print "WaitForSessionReady TIMEOUT after " & waitTimeout & "s. Session Busy: " & objSess.Busy: Exit Do
            Sleep cSHORT_WAIT_MS: DoEvents
        Loop While True
        On Error GoTo MM03ErrorHandler
        ' End Inline Wait
    End If
    Err.Clear
    On Error GoTo MM03ErrorHandler

MM03Cleanup:
    ' --- Cleanup for this Subroutine ---
    Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Running Cleanup for RunGUIScript..."
    ' Reset Status Bar (Inline)
    On Error Resume Next
    If Not Application Is Nothing Then Application.StatusBar = False
    On Error GoTo 0 ' Default handler

    ' Release local objects
    Set ws = Nothing: Set objExcelApp = Nothing: Set mm03FieldCheck = Nothing
    Set selectViewsPopup = Nothing: Set infoPopup = Nothing: Set errorPopup = Nothing
    Set child = Nothing: Set matnrField = Nothing: Set prodHierField = Nothing
    Set oldMatField = Nothing: Set infoBtn = Nothing: Set userArea = Nothing
    Set infoBackBtn = Nothing: Set mainBackBtn = Nothing: Set exitBtn = Nothing
    Set outputRange = Nothing: Set objToCheck = Nothing: Set popup = Nothing
    If totalMaterials > 0 Then Erase dataOutputArray ' Clear array memory only if allocated
    Debug.Print Format(Now, "yyyy-mm-dd hh:nn:ss") & " - Exiting RunGUIScript."
    Exit Sub

MM03ErrorHandler:
    ' --- Error Handler for this Subroutine ---
    Dim errNumRun As Long: errNumRun = Err.Number
    Dim errDescRun As String: errDescRun = Err.Description
    Dim errSourceRun As String: errSourceRun = Err.Source
    Debug.Print "!!!!!!!!!!!!!!!!!!! ERROR in RunGUIScript !!!!!!!!!!!!!!!!!!!"
    Debug.Print "  Err #: " & errNumRun: Debug.Print "  Source: " & errSourceRun: Debug.Print "  Desc: " & errDescRun
    If i > 0 Then Debug.Print "  Processing Row: " & i & ", Material: '" & materialNumber & "'"
    Debug.Print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"

    ' Write error message to current row in array/Excel if possible
    If Not ws Is Nothing And i >= cSTART_ROW Then
        On Error Resume Next ' Avoid error loop
        If outputRow > 0 And outputRow <= UBound(dataOutputArray, 1) Then
             dataOutputArray(outputRow, 1) = "Error: " & errDescRun
        Else
             ws.Range(cSTATUS_MSG_COL & i).value = "Error: " & errDescRun & " (#" & errNumRun & ")"
        End If
        On Error GoTo 0
    End If

    MsgBox "Error during MM03 script execution:" & vbCrLf & _
           "Row: " & i & " (Material: " & materialNumber & ")" & vbCrLf & _
           "Err #: " & errNumRun & vbCrLf & _
           "Desc: " & errDescRun, vbCritical, "MM03 Script Error"

    ' Attempt basic SAP cleanup
    On Error Resume Next
    ' Inline CheckObject (objSess, "Session in MM03ErrorHandler", False)
    Set objToCheck = objSess: objName = "Session in MM03ErrorHandler": raiseErrorFlag = False
    If Not (objToCheck Is Nothing) Then
        Debug.Print "Attempting SAP cleanup after error..."
        If objSess.Busy Then Sleep 500 ' Keep fixed sleep here for busy state in error handler
        objSess.FindById("wnd[2]", False).Close: Sleep cSHORT_WAIT_MS
        objSess.FindById("wnd[1]", False).Close: Sleep cSHORT_WAIT_MS
        If objSess.ActiveWindow.Name = "wnd[0]" Then objSess.FindById(cMAIN_EXIT_BTN_ID).press
        Debug.Print "SAP cleanup attempt finished."
    Else
        Debug.Print "CheckObject WARNING: Object '" & objName & "' is Nothing. Cannot perform SAP cleanup."
    End If
    ' End Inline CheckObject
    Set objToCheck = Nothing ' Clear reusable variable
    On Error GoTo 0

    Resume MM03Cleanup

MM03WaitError: ' Specific handler for errors *during* wait loops within RunGUIScript
    Debug.Print "WaitForSessionReady (MM03) ERROR: #" & Err.Number & " - " & Err.Description
    waitReady = False ' Indicate wait failed
    Resume Next ' Continue loop execution (will eventually timeout or succeed)

End Sub
