Public Sub RunGUIScript()
    Dim wsData As Worksheet
    Dim rngInput As Range
    Dim rngActualData As Range
    Dim inputData As Variant
    Dim outputData As Variant
    Dim i As Long
    Dim material As String
    Dim wnd0 As Object ' GuiMainWindow
    Dim sbar As Object ' GuiStatusbar
    Dim wnd1 As Object ' GuiMainWindow (for popups)
    ' Dim wnd2 As Object ' No longer needed for this logic flow
    Dim startTime As Double
    Dim lastRow As Long
    Dim firstDataRow As Long
    Dim numRowsToProcess As Long
    Dim outputRowIndex As Long

    startTime = Timer

    ' --- User Selection ---
    On Error Resume Next
    Set rngInput = Application.InputBox("Select the range containing Material Numbers (single column, including header in the first row).", "Select Material Data Range", Type:=8)
    On Error GoTo 0
    If rngInput Is Nothing Then Exit Sub
    If rngInput.Columns.Count > 1 Then MsgBox "Select single column.", vbExclamation: Exit Sub
    Set wsData = rngInput.Worksheet

    ' --- Determine Actual Range ---
    firstDataRow = rngInput.Row
    If rngInput.Rows.Count = wsData.Rows.Count Then
        lastRow = wsData.Cells(wsData.Rows.Count, rngInput.Column).End(xlUp).Row
        If lastRow < firstDataRow Then lastRow = firstDataRow
    Else
        lastRow = firstDataRow + rngInput.Rows.Count - 1
    End If
    Set rngActualData = wsData.Range(wsData.Cells(firstDataRow, rngInput.Column), wsData.Cells(lastRow, rngInput.Column))

    ' --- Read Input Data ---
    If rngActualData.Rows.Count <= 1 Then
         If rngActualData.Rows.Count = 1 And (IsEmpty(rngActualData.Value) Or Len(Trim(CStr(rngActualData.Value))) = 0) Then
              MsgBox "Selected range appears empty or header-only.", vbInformation: Exit Sub
         ElseIf rngActualData.Rows.Count = 0 Then
              MsgBox "Selected range appears empty.", vbInformation: Exit Sub
         End If
    End If
    inputData = rngActualData.Value
    numRowsToProcess = UBound(inputData, 1) - 1 ' Assuming header row
    If numRowsToProcess <= 0 Then MsgBox "No data below header.", vbInformation: Exit Sub

    ' --- Prepare Output Array ---
    ReDim outputData(1 To numRowsToProcess, 1 To 5)

    ' --- SAP GUI Scripting ---
    On Error GoTo SapErrorHandler
    If objSess Is Nothing Then MsgBox "SAP session invalid.", vbCritical: GoTo CleanExit

    objSess.FindById("wnd[0]").Maximize
    Set wnd0 = objSess.FindById("wnd[0]")
    Set sbar = wnd0.FindById("sbar")

    ' --- Start Transaction ---
    wnd0.FindById("tbar[0]/okcd").Text = "/nmm03"
    wnd0.sendVKey 0

    ' --- Loop through Materials ---
    For i = 2 To UBound(inputData, 1) ' Start Loop from Row 2 (after header)
        outputRowIndex = i - 1
        material = Trim(CStr(inputData(i, 1)))
        Application.StatusBar = "Processing Material " & outputRowIndex & " of " & numRowsToProcess & ": " & material
        Set wnd1 = Nothing ' Reset popup handle

        If Len(material) = 0 Then
            outputData(outputRowIndex, 1) = "Skipped: Empty Material"
            GoTo NextIteration
        End If

        ' --- Check if on MM03 Initial Screen ---
        Dim matField As Object
        On Error Resume Next
        Set matField = wnd0.FindById("usr/ctxtRMMG1-MATNR")
        On Error GoTo SapErrorHandler
        If matField Is Nothing Then
             outputData(outputRowIndex, 1) = "Error: Not on MM03 screen. Recovering..."
             If objSess.ActiveWindow.Name <> "wnd[0]" Then On Error Resume Next: objSess.ActiveWindow.Close: On Error GoTo SapErrorHandler
             wnd0.FindById("tbar[0]/okcd").Text = "/nmm03"
             wnd0.sendVKey 0
             GoTo NextIteration
        End If
        Set matField = Nothing

        ' --- Enter Material ---
        wnd0.FindById("usr/ctxtRMMG1-MATNR").Text = material
        wnd0.sendVKey 0

        ' Check for immediate errors
        If sbar.MessageType = "E" Or sbar.MessageType = "A" Or sbar.MessageType = "X" Then
            outputData(outputRowIndex, 1) = sbar.Text
            GoTo NextIteration
        End If

        ' --- Handle Popups Sequentially (Select Views then Org Levels) ---
        Set wnd1 = Nothing ' Ensure reset before first check
        On Error Resume Next
        Set wnd1 = objSess.FindById("wnd[1]") ' Check for 'Select View(s)' popup
        On Error GoTo SapErrorHandler

        If Not wnd1 Is Nothing Then
             ' --- First Popup Found: Select View(s) ---
             If wnd1.Text = "Select View(s)" Then ' Optional: Check window title
                 wnd1.FindById("tbar[0]/btn[20]").press ' Select All
                 wnd1.sendVKey 0                     ' Press Enter on Select Views

                 ' --- Check for Second Popup (Org Levels, likely reusing wnd[1]) ---
                 Set wnd1 = Nothing ' Reset before checking again
                 Application.Wait (Now + TimeValue("0:00:01")) ' Brief wait for next window
                 On Error Resume Next
                 Set wnd1 = objSess.FindById("wnd[1]") ' Check *again* for wnd[1]
                 On Error GoTo SapErrorHandler

                 If Not wnd1 Is Nothing Then
                      ' --- Second Popup Found: Likely Organizational Levels ---
                      ' Optional: Check title if needed: If wnd1.Text = "Organizational Levels" Then ...
                      ' User wants to leave blank, so just press Enter to accept defaults
                      wnd1.sendVKey 0 ' Press Enter on Org Levels
                      ' Check status bar immediately after Org Levels confirmation
                      If sbar.MessageType = "E" Or sbar.MessageType = "A" Or sbar.MessageType = "X" Then
                           outputData(outputRowIndex, 1) = AppendStatus(outputData(outputRowIndex, 1), "Error after Org Levels: " & sbar.Text)
                           GoTo NextIteration ' Skip to next material if error here
                      End If
                 Else
                      ' Select Views was shown, but Org Levels was not (maybe not needed for these views)
                      ' Continue processing
                 End If
                 ' --- End Second Popup Handling ---
             Else
                 ' Found a wnd[1] but it wasn't "Select View(s)" - Unexpected
                 outputData(outputRowIndex, 1) = AppendStatus(outputData(outputRowIndex, 1), "Unexpected popup wnd[1]: " & wnd1.Text)
                 On Error Resume Next ' Try to close it and continue
                 wnd1.Close
                 On Error GoTo SapErrorHandler
                 GoTo NextIteration ' Skip this material as state is unknown
             End If
        Else
            ' No "Select Views" popup appeared. Check status bar for warnings/info.
            If sbar.MessageType = "W" Or sbar.MessageType = "I" Or sbar.MessageType = "S" Then
                 outputData(outputRowIndex, 1) = sbar.Text ' Record status bar message
            End If
            ' Check if we landed on Basic Data Tab directly
            Dim basicDataTab As Object
            On Error Resume Next
            Set basicDataTab = wnd0.FindById("usr/tabsTABSPR1/tabpSP01")
            On Error GoTo SapErrorHandler
            If basicDataTab Is Nothing Then
                 outputData(outputRowIndex, 1) = AppendStatus(outputData(outputRowIndex, 1), "Error: Expected Material Display screen, found neither popup nor tab.")
                 GoTo NextIteration
            End If
            ' If we got here, seems okay, we likely landed directly on material display
        End If
        ' --- End Popup Handling ---


        ' --- Extract Data from Basic Data 1 View ---
        Dim currentTab As Object
        On Error Resume Next
        Set currentTab = wnd0.FindById("usr/tabsTABSPR1/tabpSP01") ' Basic Data 1 tab
        On Error GoTo SapErrorHandler
        If currentTab Is Nothing Or currentTab.selected = False Then
             outputData(outputRowIndex, 1) = AppendStatus(outputData(outputRowIndex, 1), "Error: Not on Basic Data 1 tab.")
             On Error Resume Next: wnd0.sendVKey 3: On Error GoTo SapErrorHandler ' Try back
             GoTo NextIteration
        End If

        ' Extract fields...
        On Error Resume Next
        outputData(outputRowIndex, 2) = wnd0.FindById("usr/tabsTABSPR1/tabpSP01/ssubTABFRA1:SAPLMGMM:2004/subSUB2:SAPLMGD1:2001/ctxtMARA-PRDHA").Text
        If Err.Number <> 0 Then outputData(outputRowIndex, 1) = AppendStatus(outputData(outputRowIndex, 1), "Err PRDHA"): Err.Clear
        outputData(outputRowIndex, 3) = wnd0.FindById("usr/tabsTABSPR1/tabpSP01/ssubTABFRA1:SAPLMGMM:2004/subSUB2:SAPLMGD1:2001/txtMARA-BISMT").Text
        If Err.Number <> 0 Then outputData(outputRowIndex, 1) = AppendStatus(outputData(outputRowIndex, 1), "Err BISMT"): Err.Clear
        On Error GoTo SapErrorHandler

        ' --- Get Creation Info ---
        wnd0.FindById("usr/tabsTABSPR1/tabpSP01/ssubTABFRA1:SAPLMGMM:2004/subSUB1:SAPLMGD1:1002/btnINFO").press

        Set wnd1 = Nothing ' Reset for info popup
        On Error Resume Next
        Application.Wait (Now + TimeValue("0:00:01"))
        Set wnd1 = objSess.FindById("wnd[1]")
        On Error GoTo SapErrorHandler
        If Not wnd1 Is Nothing Then
             Dim infoText As String
             On Error Resume Next ' Fragile label reading
             infoText = wnd1.FindById("usr/lbl[1,7]").Text
             If Err.Number = 0 Then
                 If Left(infoText, 7) <> "Created" Then
                     outputData(outputRowIndex, 4) = wnd1.FindById("usr/lbl[1,6]").Text
                     If Err.Number <> 0 Then outputData(outputRowIndex, 1) = AppendStatus(outputData(outputRowIndex, 1), "Err CreatedBy(alt)"): Err.Clear
                     outputData(outputRowIndex, 5) = infoText
                 Else
                     outputData(outputRowIndex, 4) = infoText
                     outputData(outputRowIndex, 5) = wnd1.FindById("usr/lbl[1,8]").Text
                     If Err.Number <> 0 Then outputData(outputRowIndex, 1) = AppendStatus(outputData(outputRowIndex, 1), "Err CreatedOn"): Err.Clear
                 End If
             Else
                 outputData(outputRowIndex, 1) = AppendStatus(outputData(outputRowIndex, 1), "Err reading info lbl[1,7].")
                 Err.Clear
             End If
             On Error GoTo SapErrorHandler
             wnd1.sendVKey 3 ' Close info pop-up
        Else
             outputData(outputRowIndex, 1) = AppendStatus(outputData(outputRowIndex, 1), "Creation Info pop-up not found.")
        End If

        ' Record success if no message
        If IsEmpty(outputData(outputRowIndex, 1)) Or outputData(outputRowIndex, 1) = "" Then
             outputData(outputRowIndex, 1) = "Successfully processed"
        End If

        ' Go back from material display screen
        wnd0.sendVKey 3 ' F3 = Back

NextIteration:
    Next i ' Next Material

    ' --- Go back from MM03 ---
    On Error Resume Next
    If wnd0.FindById("tbar[0]/okcd").Text = "mm03" Then wnd0.sendVKey 3
    On Error GoTo SapErrorHandler

    ' --- Write Output ---
    Dim outputStartCell As Range
    On Error Resume Next
    Set outputStartCell = rngActualData.Cells(2, 1).Offset(0, 2) ' Col C next to first data row
    If Err.Number <> 0 Then MsgBox "Error finding output range.", vbCritical: GoTo CleanExit
    On Error GoTo SapErrorHandler
    outputStartCell.Resize(numRowsToProcess, 5).Value = outputData

    Application.StatusBar = "Finished " & numRowsToProcess & " materials in " & Format(Timer - startTime, "0.00") & "s."
    MsgBox "Extraction complete for " & numRowsToProcess & " materials.", vbInformation

CleanExit:
    Application.StatusBar = False
    Set wnd0 = Nothing: Set sbar = Nothing: Set wnd1 = Nothing
    Set wsData = Nothing: Set rngInput = Nothing: Set rngActualData = Nothing
    Set currentTab = Nothing: Set basicDataTab = Nothing: Set matField = Nothing
    Exit Sub

SapErrorHandler:
    Dim errorMsg As String
    errorMsg = "SAP Scripting Error:" & vbCrLf & _
               "Number: " & Err.Number & "; Desc: " & Err.Description & vbCrLf & _
               "Source: " & Err.Source
    If outputRowIndex > 0 And outputRowIndex <= numRowsToProcess Then errorMsg = errorMsg & vbCrLf & "Material: " & material & " (Input Row " & i & ", Output Row " & outputRowIndex & ")"
    If Not objSess Is Nothing Then On Error Resume Next: errorMsg = errorMsg & vbCrLf & "SAP Window: " & objSess.ActiveWindow.Text: On Error GoTo 0
    MsgBox errorMsg, vbCritical, "SAP GUI Scripting Error"
    If outputRowIndex > 0 And outputRowIndex <= numRowsToProcess Then
         outputData(outputRowIndex, 1) = AppendStatus(outputData(outputRowIndex, 1), "Error: " & Err.Description)
    End If
    ' Stop on error - attempt final write
    Application.StatusBar = "Error occurred. Script stopped."
    On Error Resume Next
    If Not outputStartCell Is Nothing And numRowsToProcess > 0 Then outputStartCell.Resize(numRowsToProcess, 5).Value = outputData
    On Error GoTo 0
    GoTo CleanExit

End Sub

' Helper function to safely append status messages
Private Function AppendStatus(existingStatus As Variant, newStatus As String) As String
    If IsEmpty(existingStatus) Or existingStatus = "" Then
        AppendStatus = newStatus
    Else
        AppendStatus = existingStatus & "; " & newStatus
    End If
End Function
