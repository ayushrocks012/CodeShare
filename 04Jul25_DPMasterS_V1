// Name this query "Transform File"
// It must be a function that accepts the binary file content
(fileContent as binary) =>
let
    // This assumes your source files are Excel files with data in "Sheet1".
    // If they are CSVs or have a different sheet name, this part needs to be adjusted.
    Source = Excel.Workbook(fileContent, null, true),
    DataSheet = Source{[Item="Sheet1",Kind="Sheet"]}[Data],
    #"Promoted Headers" = Table.PromoteHeaders(DataSheet, [PromoteAllScalars=true]),
    
    // Perform basic type changes early
    #"Changed Column Types" = Table.TransformColumnTypes(#"Promoted Headers",{
        {"Country", type text}, {"Local Item number", type text}, {"APO Product (1-6-3-3)", type text},
        {"APO Customer", type text}, {"Column8", type text}, {"Location/Plant/Site", type text},
        {"Key Figures", type text}, {"Calendar year", type text}, {"Calendar month", type text}, {"Column14", type number}
    }),

    // Convert "Calendar year" to a number right away to prevent errors later
    #"Changed Year Type" = Table.TransformColumnTypes(#"Changed Column Types",{{"Calendar year", Int64.Type}}),

    // Section 2 from the main query is now here, running on each small file individually
    #"Added Month and Projection Logic" = Table.AddColumn(#"Changed Year Type", "ProjectionLogic", each
        let
            // Determine Month Number using a list for efficiency and clarity
            monthNames = {"JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC"},
            monthNum = if [Calendar month] <> null then List.PositionOf(monthNames, Text.Upper([Calendar month])) + 1 else -1,

            // Determine Month Type (Historic/Future)
            currentYear = Date.Year(DateTime.LocalNow()),
            currentMonth = Date.Month(DateTime.LocalNow()),
            monthType = if [Calendar year] < currentYear or ([Calendar year] = currentYear and monthNum < currentMonth) then "Historic" else "Future",

            // Determine Projection Type and New Key Figure Name in one go
            keyFig = [Key Figures],
            projectionType =
                if List.Contains({"Actual Shipments", "Manual Stat Adjustment"}, keyFig) then "Base"
                else if List.Contains({"FOC Shipments", "FOC Adjustment"}, keyFig) then "FOC"
                else if List.Contains({"Samples Shipments", "Samples Adjustment"}, keyFig) then "Samples"
                else "Other",

            newKeyFigure =
                if projectionType = "Base" then "Cur Proj Qty Base (Sell)"
                else if projectionType = "FOC" then "Cur Proj Qty FOC (Sell)"
                else if projectionType = "Samples" then "Cur Proj Qty Samples (Sell)"
                else keyFig,

            // Determine if the row should be included based on the rules
            include =
                (projectionType = "Base" and ((monthType = "Historic" and keyFig = "Actual Shipments") or (monthType = "Future" and keyFig = "Manual Stat Adjustment"))) or
                (projectionType = "FOC" and ((monthType = "Historic" and keyFig = "FOC Shipments") or (monthType = "Future" and keyFig = "FOC Adjustment"))) or
                (projectionType = "Samples" and ((monthType = "Historic" and keyFig = "Samples Shipments") or (monthType = "Future" and keyFig = "Samples Adjustment"))) or
                (projectionType = "Other")
        in
        [ IsIncluded = include, NewKeyFigure = newKeyFigure ]
    ),
    
    // Expand the logic into columns. This table is what the main query will now receive.
    #"Expanded Logic" = Table.ExpandRecordColumn(#"Added Month and Projection Logic", "ProjectionLogic", {"IsIncluded", "NewKeyFigure"})
in
    #"Expanded Logic"
