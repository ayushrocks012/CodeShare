'@Folder("Classes")
Option Explicit

'================================================================================================
' Class:       cLifecycleManager
' Purpose:     Encapsulates all business logic related to product lifecycle events,
'              such as phase-outs and successor transfers. This class keeps the
'              cForecastItem class clean as a pure data object.
' Version:     1.0
' Author:      Ayush Goyal
' Date:        08-Jul-2025
'================================================================================================

'================================================================================================
'--- PUBLIC METHODS ---
'================================================================================================

'---------------------------------------------------------------------------------
' Procedure : CalculateMultiplier
' Purpose   : Calculates the forecast multiplier for an item on a given date,
'             based on its phase-in/out status.
' @param   : item As cForecastItem - The item to calculate the multiplier for.
' @param   : dteForecastDate As Date - The forecast date to check against.
' @return  : Double - The calculated multiplier (e.g., 0, 1, or a percentage).
'---------------------------------------------------------------------------------
Public Function CalculateMultiplier(ByVal item As cForecastItem, ByVal dteForecastDate As Date) As Double
    CalculateMultiplier = 1

    If item.IsPhasingIn And item.PhaseInDate > 0 Then
        If FirstDayOfMonth(dteForecastDate) < FirstDayOfMonth(item.PhaseInDate) Then
            CalculateMultiplier = 0
            Exit Function
        ElseIf FirstDayOfMonth(dteForecastDate) = FirstDayOfMonth(item.PhaseInDate) Then
            CalculateMultiplier = item.PhaseInPercent
            Exit Function
        End If
    End If

    If item.IsPhasingOut And item.PhaseOutDate > 0 Then
        If FirstDayOfMonth(dteForecastDate) > FirstDayOfMonth(item.PhaseOutDate) Then
            CalculateMultiplier = 0
        ElseIf FirstDayOfMonth(dteForecastDate) = FirstDayOfMonth(item.PhaseOutDate) Then
            CalculateMultiplier = item.PhaseOutPercent
        End If
    End If
End Function

'---------------------------------------------------------------------------------
' Procedure : ApplySuccessorTransfer
' Purpose   : If an item is phasing out, this finds its successor and transfers
'             the appropriate portion of the forecast for the phase-out month.
' @param   : item As cForecastItem - The phasing-out item.
' @param   : dictMap As Object - The master dictionary of all forecast items.
'---------------------------------------------------------------------------------
Public Sub ApplySuccessorTransfer(ByVal item As cForecastItem, ByVal dictMap As Object)
    If Not item.IsPhasingOut Or Len(item.SupersededByProductID) = 0 Then Exit Sub
    
    Dim successorKey As cDimensionKey
    Set successorKey = New cDimensionKey
    successorKey.Add "Affiliate", item.Affiliate
    successorKey.Add "ISD", item.SupersededByProductID
    
    If dictMap.Exists(successorKey.ToString()) Then
        Dim objSuccessor As cForecastItem
        Set objSuccessor = dictMap.Item(successorKey.ToString())
        
        objSuccessor.AddProp "IsPhasingIn", True
        objSuccessor.AddProp "PhaseInDate", item.PhaseOutDate
        objSuccessor.AddProp "PhaseInPercent", 1 - item.PhaseOutPercent
        
        Dim varForecastKey As Variant, dteForecastMonth As Date
        For Each varForecastKey In item.ForecastValues.Keys
            dteForecastMonth = CDate(Split(varForecastKey, "|")(1))
            
            If FirstDayOfMonth(dteForecastMonth) = FirstDayOfMonth(item.PhaseOutDate) Then
                Dim dblOriginalValue As Double: dblOriginalValue = item.ForecastValues.Item(varForecastKey)
                Dim dblMultiplier As Double: dblMultiplier = CalculateMultiplier(item, dteForecastMonth)
                Dim dblTransferValue As Double
                
                If dblOriginalValue > 0 Then
                    dblTransferValue = dblOriginalValue * (1 - dblMultiplier)
                End If
                
                If objSuccessor.ForecastValues.Exists(varForecastKey) Then
                    objSuccessor.ForecastValues.Item(varForecastKey) = objSuccessor.ForecastValues.Item(varForecastKey) + dblTransferValue
                Else
                    objSuccessor.ForecastValues.Add varForecastKey, dblTransferValue
                End If
            End If
        Next varForecastKey
    End If
End Sub

'================================================================================================
'--- PRIVATE HELPER METHODS ---
'================================================================================================

Private Function FirstDayOfMonth(ByVal d As Date) As Date
    FirstDayOfMonth = DateSerial(Year(d), Month(d), 1)
End Function
