'@Folder("Forecasting")
Option Explicit

'================================================================================================================
' --- FORECASTING ENGINE MODULE (M_Forecasting) ---
' V4.1: Complete, fully refactored code with architecture, error handling, and cleanliness improvements.
'================================================================================================================

'--- PRIVATE MODULE-LEVEL VARIABLES ---
Private wsLog As Worksheet 'Dedicated log sheet for the entire run.
Private lngWarningCount As Long 'Counter for non-critical issues.

'================================================================================================================
' Main Public Procedure
'================================================================================================================

'------------------------------------------------------------------------------------------------
' Procedure: UpdateForecast_V4
' Purpose:   Main entry point to run the entire multi-affiliate forecasting process.
'------------------------------------------------------------------------------------------------
Public Sub UpdateForecast_V4()
    Dim wbThis As Workbook
    Dim arrStatusData As Variant, arrHistoryData As Variant, arrDemandData As Variant
    Dim dictLifecycleMap As Object, dictAffiliates As Object
    Dim dteStartTime As Date: dteStartTime = Now
    
    On Error GoTo Main_ErrorHandler
    
    '1. Setup
    Set wbThis = InitializeEnvironment()
    
    '2. Load Data
    LoadAllData wbThis, arrStatusData, arrHistoryData, arrDemandData
    
    '3. Process Data
    Set dictLifecycleMap = BuildLifecycleMap(arrStatusData)
    Set dictAffiliates = GetUniqueAffiliates(arrDemandData)
    ProcessAllAffiliates wbThis, dictAffiliates, arrStatusData, arrHistoryData, arrDemandData, dictLifecycleMap
    
Main_Exit:
    '4. Cleanup
    CleanupEnvironment dteStartTime, IIf(Not dictAffiliates Is Nothing, dictAffiliates.Count, 0)
    Exit Sub
    
Main_ErrorHandler:
    WriteToLog "FATAL", "UpdateForecast_V4", "A critical error occurred: " & Err.Description
    Resume Main_Exit
End Sub

'================================================================================================================
' 1. Initialization and Environment Setup
'================================================================================================================

'------------------------------------------------------------------------------------------------
' Procedure: InitializeEnvironment
' Purpose:   Sets up the Excel application state and initializes the log sheet.
' Returns:   A reference to the active workbook (ThisWorkbook).
'------------------------------------------------------------------------------------------------
Private Function InitializeEnvironment() As Workbook
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.Calculation = xlCalculationManual
    Application.StatusBar = "Initializing environment..."
    
    lngWarningCount = 0
    Set InitializeEnvironment = ThisWorkbook
    
    On Error Resume Next
    ThisWorkbook.Sheets(SHEET_LOG).Delete
    On Error GoTo 0
    Set wsLog = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
    InitializeLogSheet wsLog
End Function

'------------------------------------------------------------------------------------------------
' Procedure: LoadAllData
' Purpose:   Loads all source data from Excel sheets into memory (VBA arrays).
'------------------------------------------------------------------------------------------------
Private Sub LoadAllData(ByVal wb As Workbook, ByRef arrStatus As Variant, ByRef arrHistory As Variant, ByRef arrDemand As Variant)
    On Error GoTo Load_ErrorHandler
    Application.StatusBar = "Loading all source data into memory..."
    
    arrStatus = LoadDataToArray(wb.Sheets(SHEET_STATUS))
    arrHistory = LoadDataToArray(wb.Sheets(SHEET_HISTORY))
    arrDemand = LoadDataToArray(wb.Sheets(SHEET_DEMAND))
    
    WriteToLog "Info", "LoadAllData", "All source data loaded successfully."
    Exit Sub
    
Load_ErrorHandler:
    WriteToLog "FATAL", "LoadAllData", "Failed to load source sheets. Error: " & Err.Description
    Err.Raise vbObjectError + 513, "LoadAllData", "Could not load required data. Check sheet names in M_Config."
End Sub

'================================================================================================================
' 2. Core Processing
'================================================================================================================

'------------------------------------------------------------------------------------------------
' Procedure: ProcessAllAffiliates
' Purpose:   Loops through each unique affiliate and executes the forecast generation process.
'------------------------------------------------------------------------------------------------
Private Sub ProcessAllAffiliates(ByVal wb As Workbook, ByVal dictAffiliates As Object, ByVal arrStatus As Variant, ByVal arrHistory As Variant, ByVal arrDemand As Variant, ByVal dictLifecycle As Object)
    Dim varAffiliateKey As Variant, strCurrentAffiliate As String
    Dim wsSummary As Worksheet, wbReport As Workbook
    
    If dictAffiliates.Count = 0 Then
        WriteToLog "Warning", "ProcessAllAffiliates", "No affiliates found in Demand Forecast sheet. Nothing to process."
        Exit Sub
    End If
    
    For Each varAffiliateKey In dictAffiliates.Keys
        strCurrentAffiliate = CStr(varAffiliateKey)
        On Error GoTo Affiliate_ErrorHandler
        
        Application.StatusBar = "Processing Affiliate: " & strCurrentAffiliate & "..."
        WriteToLog "Info", "ProcessAllAffiliates", "Starting process for affiliate: " & strCurrentAffiliate
        
        Set wsSummary = wb.Sheets.Add(After:=wb.Sheets(wb.Sheets.Count))
        wsSummary.Name = "TempSummary"
        
        CreateTierSheets wb, strCurrentAffiliate, arrStatus, arrDemand, wsSummary
        ProcessForecastForAffiliate wb, strCurrentAffiliate, arrHistory, arrDemand, wsSummary, dictLifecycle
        
        Set wbReport = GenerateAffiliateReport(wb, strCurrentAffiliate, wsSummary)
        
        CleanupAffiliateSheets wb, strCurrentAffiliate
        
        GoTo Next_Affiliate
        
Affiliate_ErrorHandler:
        lngWarningCount = lngWarningCount + 1
        WriteToLog "Error", "ProcessAllAffiliates", "Failed to process affiliate '" & strCurrentAffiliate & "'. Error: " & Err.Description
        CleanupAffiliateSheets wb, strCurrentAffiliate
        
Next_Affiliate:
        On Error GoTo 0
    Next varAffiliateKey
End Sub

'------------------------------------------------------------------------------------------------
' Procedure: ProcessForecastForAffiliate
' Purpose:   Loops through each tier sheet for an affiliate and triggers the calculation.
'------------------------------------------------------------------------------------------------
Private Sub ProcessForecastForAffiliate(ByVal wb As Workbook, ByVal strAffiliate As String, ByVal arrHistory As Variant, ByVal arrDemand As Variant, ByVal wsSummary As Worksheet, ByVal dictLifecycle As Object)
    Dim wsTier As Worksheet
    For Each wsTier In wb.Worksheets
        If InStr(1, wsTier.Name, strAffiliate & " - ") > 0 Then
            Application.StatusBar = "Processing Tier: " & Replace(wsTier.Name, strAffiliate & " - ", "") & "..."
            If wsTier.Cells(wsTier.Rows.Count, "A").End(xlUp).Row > 1 Then
                CalculateAndFormatTierSheet wsTier, strAffiliate, arrHistory, arrDemand, dictLifecycle
                AppendToSummarySheet wsTier, wsSummary
            Else
                WriteToLog "Info", "ProcessForecastForAffiliate", "Skipping empty tier sheet: " & wsTier.Name
            End If
        End If
    Next wsTier
End Sub

'------------------------------------------------------------------------------------------------
' Procedure: CalculateAndFormatTierSheet
' Purpose:   Performs the main forecast calculation and formatting for a single tier sheet.
'------------------------------------------------------------------------------------------------
Private Sub CalculateAndFormatTierSheet(ByVal wsTier As Worksheet, ByVal strAffiliate As String, ByVal arrHistory As Variant, ByVal arrDemand As Variant, ByVal dictLifecycle As Object)
    Dim lngTierLRow As Long, lngHistLCol As Long, lngMonthCount As Long
    Dim dblSubTierSum As Double, dblTierSum As Double
    
    On Error GoTo Calc_ErrorHandler
    
    lngMonthCount = GetHistoricalMonthCount(arrDemand, arrHistory)
    
    Dim arrHeaderRow As Variant
    arrHeaderRow = GetCombinedHeaderRow(strAffiliate, arrDemand, arrHistory, lngMonthCount)
    
    lngTierLRow = wsTier.Cells(wsTier.Rows.Count, COL_AFFILIATE).End(xlUp).Row
    If lngTierLRow < 2 Then Exit Sub
    
    Dim arrOutput() As Variant: ReDim arrOutput(1 To lngTierLRow, 1 To UBound(arrHeaderRow))
    
    Dim r As Long, c As Long, i As Long
    For c = 1 To UBound(arrHeaderRow): arrOutput(1, c) = arrHeaderRow(c): Next c
    For r = 2 To lngTierLRow
        For c = 1 To 6: arrOutput(r, c) = wsTier.Cells(r, c).Value: Next c
    Next r
    
    lngHistLCol = 8 + lngMonthCount
    
    For r = 2 To lngTierLRow
        Dim strTier As String, strSubTierID As String, strProduct As String
        strTier = arrOutput(r, COL_TIER)
        strSubTierID = arrOutput(r, COL_SUB_TIER)
        strProduct = arrOutput(r, COL_ISD)
        
        Dim strCompositeKey As String: strCompositeKey = strAffiliate & "|" & strProduct
        Dim objLifecycle As cProductLifecycle
        If dictLifecycle.Exists(strCompositeKey) Then Set objLifecycle = dictLifecycle.Item(strCompositeKey) Else Set objLifecycle = New cProductLifecycle
        
        arrOutput(r, COL_STATUS) = objLifecycle.Status
        If objLifecycle.PhaseOutDate > 0 Then arrOutput(r, COL_PHASE_OUT_DATE) = objLifecycle.PhaseOutDate

        Dim arrHistoricSales As Variant
        arrHistoricSales = GetHistoricalDataRow(strAffiliate, strProduct, arrHistory, lngMonthCount + 6)
        For c = 1 To UBound(arrHistoricSales): arrOutput(r, c + 8) = arrHistoricSales(c): Next c
        
        dblSubTierSum = GetHistoricalSubTierSum(strAffiliate, strTier, strSubTierID, arrHistory, lngMonthCount + 6)
        dblTierSum = GetHistoricalTierSum(strAffiliate, strTier, arrHistory, dictLifecycle, lngMonthCount + 6)
        
        Dim lngDemandRow As Long: lngDemandRow = GetDemandDataRow(strAffiliate, strTier, arrDemand)

        If lngDemandRow > 0 Then
            For c = (lngHistLCol + 1) To UBound(arrOutput, 2)
                arrOutput(r, c) = CalculateForecastValue(objLifecycle, arrOutput(1, c), dblSubTierSum, dblTierSum, arrDemand(lngDemandRow, (c - lngHistLCol) + 2))
            Next c
        End If
        Set objLifecycle = Nothing
    Next r
    
    wsTier.Cells.Clear
    wsTier.Range("A1").Resize(UBound(arrOutput, 1), UBound(arrOutput, 2)).Value = arrOutput
    
    FormatEnhancedSheet wsTier
    Exit Sub
    
Calc_ErrorHandler:
    lngWarningCount = lngWarningCount + 1
    WriteToLog "Error", "CalculateAndFormatTierSheet", "Failed to calculate sheet '" & wsTier.Name & "'. Error: " & Err.Description
End Sub

'================================================================================================================
' 3. Report Generation and Output
'================================================================================================================

'------------------------------------------------------------------------------------------------
' Procedure: GenerateAffiliateReport
' Purpose:   Creates, saves, and closes the final Excel report for a single affiliate.
'------------------------------------------------------------------------------------------------
Private Function GenerateAffiliateReport(ByVal wb As Workbook, ByVal strAffiliate As String, ByVal wsSummary As Worksheet) As Workbook
    Dim wbReport As Workbook
    On Error GoTo Report_ErrorHandler
    
    Set wbReport = CreateOutputWorkbookForAffiliate(wb, strAffiliate, wsSummary)
    
    If Not wbReport Is Nothing Then
        If Not DEBUG_MODE Then
            Dim strFilePath As String
            strFilePath = wb.Path & "\Demand ForeCast - " & strAffiliate & " - " & Format$(Now, "DDMMYYYY_HHMMSS") & ".xlsx"
            Application.StatusBar = "Saving final report for " & strAffiliate & "..."
            wbReport.SaveAs strFilePath
            wbReport.Close SaveChanges:=False
            WriteToLog "Info", "GenerateAffiliateReport", "Report saved for " & strAffiliate & " at " & strFilePath
        Else
            WriteToLog "Debug", "GenerateAffiliateReport", "DEBUG MODE: Report for " & strAffiliate & " was created but not saved/closed."
        End If
    End If
    
    Set GenerateAffiliateReport = wbReport
    Exit Function
    
Report_ErrorHandler:
    lngWarningCount = lngWarningCount + 1
    WriteToLog "Error", "GenerateAffiliateReport", "Could not generate or save report for '" & strAffiliate & "'. Error: " & Err.Description
End Function

'================================================================================================================
' 4. Cleanup
'================================================================================================================

'------------------------------------------------------------------------------------------------
' Procedure: CleanupEnvironment
' Purpose:   Restores Excel settings and displays a final summary message to the user.
'------------------------------------------------------------------------------------------------
Private Sub CleanupEnvironment(ByVal dteStartTime As Date, ByVal lngAffiliateCount As Long)
    Application.StatusBar = False
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    
    Dim strMessage As String
    strMessage = "Forecast process completed in " & Format$(Now - dteStartTime, "nn:ss") & " minutes." & vbCrLf & vbCrLf
    strMessage = strMessage & "Affiliates Processed: " & lngAffiliateCount & vbCrLf
    strMessage = strMessage & "Warnings: " & lngWarningCount & " (see Log sheet for details)"
    
    MsgBox strMessage, IIf(lngWarningCount > 0, vbExclamation, vbInformation), "Forecast Update Complete"
End Sub

'------------------------------------------------------------------------------------------------
' Procedure: CleanupAffiliateSheets
' Purpose:   Deletes all temporary worksheets for a given affiliate.
'------------------------------------------------------------------------------------------------
Private Sub CleanupAffiliateSheets(ByVal wb As Workbook, ByVal strAffiliate As String)
    On Error Resume Next 'Ignore errors if sheets don't exist
    Application.DisplayAlerts = False
    Dim wsTemp As Worksheet
    For Each wsTemp In wb.Worksheets
        If wsTemp.Name = "TempSummary" Or InStr(1, wsTemp.Name, strAffiliate & " - ") > 0 Then
            wsTemp.Delete
        End If
    Next wsTemp
    Application.DisplayAlerts = True
    On Error GoTo 0
End Sub


'================================================================================================================
' Helper Functions (Full Implementation)
'================================================================================================================

Private Function BuildLifecycleMap(ByVal arrStatusData As Variant) As Object
    Dim r As Long, strAffiliateName As String, strProductID As String, strSupersededByKey As String
    Dim varCompositeKey As Variant, objTempLifecycle As cProductLifecycle, dictMap As Object
    Set dictMap = CreateObject("Scripting.Dictionary")
    
    On Error GoTo BuildMap_ErrorHandler
    
    If Not IsArray(arrStatusData) Or UBound(arrStatusData, 1) < 2 Then Set BuildLifecycleMap = dictMap: Exit Function
    
    For r = 2 To UBound(arrStatusData, 1)
        strAffiliateName = Trim$(arrStatusData(r, COL_AFFILIATE))
        strProductID = Trim$(arrStatusData(r, COL_ISD))
        varCompositeKey = strAffiliateName & "|" & strProductID
        
        If Len(strProductID) > 0 And Not dictMap.Exists(CStr(varCompositeKey)) Then
            Set objTempLifecycle = New cProductLifecycle
            With objTempLifecycle
                .Affiliate = strAffiliateName: .ProductID = strProductID
                .Status = Trim$(arrStatusData(r, COL_STATUS))
                .SupersededByProductID = Trim$(arrStatusData(r, COL_SUPERSEDED_BY))
                If .Status = STATUS_PHASE_IN_OUT Or .Status = STATUS_DISCONTINUED Then
                    .IsPhasingOut = True
                    If IsDate(arrStatusData(r, COL_PHASE_OUT_DATE)) Then .PhaseOutDate = CDate(arrStatusData(r, COL_PHASE_OUT_DATE))
                    If IsNumeric(arrStatusData(r, COL_PHASE_OUT_PCT)) Then .PhaseOutPercent = CDbl(arrStatusData(r, COL_PHASE_OUT_PCT))
                End If
            End With
            dictMap.Add CStr(varCompositeKey), objTempLifecycle
        End If
    Next r

    For Each varCompositeKey In dictMap.Keys
        Set objTempLifecycle = dictMap.Item(varCompositeKey)
        If objTempLifecycle.IsPhasingOut And Len(objTempLifecycle.SupersededByProductID) > 0 Then
            strSupersededByKey = objTempLifecycle.Affiliate & "|" & objTempLifecycle.SupersededByProductID
            If dictMap.Exists(strSupersededByKey) Then
                Dim objSuccessor As cProductLifecycle
                Set objSuccessor = dictMap.Item(strSupersededByKey)
                objSuccessor.IsPhasingIn = True: objSuccessor.ReplacesProductID = objTempLifecycle.ProductID
                objSuccessor.PhaseInDate = objTempLifecycle.PhaseOutDate: objSuccessor.PhaseInPercent = 1 - objTempLifecycle.PhaseOutPercent
            Else
                lngWarningCount = lngWarningCount + 1
                WriteToLog "Warning", "BuildLifecycleMap", "Product '" & objTempLifecycle.ProductID & "' superseded by '" & objTempLifecycle.SupersededByProductID & "', but successor not found for affiliate '" & objTempLifecycle.Affiliate & "'."
            End If
        End If
    Next varCompositeKey
    
    Set BuildLifecycleMap = dictMap
    Exit Function
    
BuildMap_ErrorHandler:
    WriteToLog "FATAL", "BuildLifecycleMap", "Error building lifecycle map: " & Err.Description
    Err.Raise vbObjectError + 514, "BuildLifecycleMap", "Could not build lifecycle map."
End Function

Private Function GetUniqueAffiliates(ByVal arrDemandData As Variant) As Object
    Dim dictAffiliates As Object, r As Long
    Set dictAffiliates = CreateObject("Scripting.Dictionary")
    If IsArray(arrDemandData) Then
        For r = 2 To UBound(arrDemandData, 1)
            If Not dictAffiliates.Exists(arrDemandData(r, COL_AFFILIATE)) Then
                dictAffiliates.Add arrDemandData(r, COL_AFFILIATE), 1
            End If
        Next r
    End If
    Set GetUniqueAffiliates = dictAffiliates
End Function

Private Sub CreateTierSheets(ByVal wb As Workbook, ByVal strAffiliate As String, ByVal arrStatus As Variant, ByVal arrDemand As Variant, ByVal wsSummary As Worksheet)
    Dim lngDemandLRow As Long, lngStatusLRow As Long, lngTierRow As Long, lngProductRow As Long
    Dim strTier As String, strProductTier As String, strProductAffiliate As String, wsNewTier As Worksheet
    
    On Error GoTo TierSheet_ErrorHandler
    
    lngDemandLRow = UBound(arrDemand, 1)
    lngStatusLRow = UBound(arrStatus, 1)
    SetupOutputSheetHeaders wsSummary
    
    For lngTierRow = 2 To lngDemandLRow
        If LCase$(Trim$(arrDemand(lngTierRow, COL_AFFILIATE))) = LCase$(strAffiliate) Then
            strTier = Trim$(arrDemand(lngTierRow, COL_TIER))
            If Len(strTier) > 0 Then
                Dim strSheetName As String: strSheetName = strAffiliate & " - " & strTier
                On Error Resume Next
                wb.Sheets(strSheetName).Delete
                On Error GoTo TierSheet_ErrorHandler
                
                Set wsNewTier = wb.Sheets.Add(After:=wb.Sheets(wb.Sheets.Count))
                wsNewTier.Name = strSheetName
                SetupOutputSheetHeaders wsNewTier
                
                Dim lngNextFreeRow As Long: lngNextFreeRow = 2
                For lngProductRow = 2 To lngStatusLRow
                    strProductAffiliate = LCase$(Trim$(arrStatus(lngProductRow, COL_AFFILIATE)))
                    strProductTier = LCase$(Trim$(arrStatus(lngProductRow, COL_TIER)))
                    If strProductAffiliate = LCase$(strAffiliate) And strProductTier = LCase$(strTier) Then
                        wsNewTier.Range("A" & lngNextFreeRow).Resize(1, 6).Value = Array(arrStatus(lngProductRow, 1), arrStatus(lngProductRow, 2), arrStatus(lngProductRow, 3), arrStatus(lngProductRow, 4), arrStatus(lngProductRow, 5), arrStatus(lngProductRow, 6))
                        lngNextFreeRow = lngNextFreeRow + 1
                    End If
                Next lngProductRow
            End If
        End If
    Next lngTierRow
    Exit Sub
    
TierSheet_ErrorHandler:
    lngWarningCount = lngWarningCount + 1
    WriteToLog "Error", "CreateTierSheets", "Could not create tier sheets for '" & strAffiliate & "'. Error: " & Err.Description
End Sub

Private Function GetHistoricalDataRow(ByVal strAffiliate As String, ByVal strProduct As String, ByVal arrHistory As Variant, ByVal lngHistColCount As Long) As Variant
    Dim r As Long, c As Long, arrResult() As Variant
    ReDim arrResult(1 To lngHistColCount - 6) 'COL_HISTORY_START - 1 = 6
    For r = 2 To UBound(arrHistory, 1)
        If Trim$(arrHistory(r, COL_AFFILIATE)) = strAffiliate And Trim$(arrHistory(r, COL_ISD)) = strProduct Then
            For c = COL_HISTORY_START To lngHistColCount: arrResult(c - (COL_HISTORY_START - 1)) = arrHistory(r, c): Next c
            GetHistoricalDataRow = arrResult
            Exit Function
        End If
    Next r
    GetHistoricalDataRow = arrResult
End Function

Private Function GetHistoricalTierSum(ByVal strAffiliate As String, ByVal strTier As String, ByVal arrHistory As Variant, ByVal dictLifecycle As Object, ByVal lngHistLCol As Long) As Double
    Dim dblTotalSum As Double, r As Long, c As Long, strHSProduct As String, strCompositeKey As String
    For r = 2 To UBound(arrHistory, 1)
        If LCase$(Trim$(arrHistory(r, COL_AFFILIATE))) = LCase$(strAffiliate) And LCase$(Trim$(arrHistory(r, COL_TIER))) = LCase$(strTier) Then
            strHSProduct = Trim$(arrHistory(r, COL_ISD))
            strCompositeKey = Trim$(arrHistory(r, COL_AFFILIATE)) & "|" & strHSProduct
            Dim objLifecycle As cProductLifecycle
            If dictLifecycle.Exists(strCompositeKey) Then
                Set objLifecycle = dictLifecycle.Item(strCompositeKey)
                If objLifecycle.Status <> STATUS_DISCONTINUED Then
                    For c = COL_HISTORY_START To lngHistLCol: dblTotalSum = dblTotalSum + Val(arrHistory(r, c)): Next c
                Else
                    For c = COL_HISTORY_START To lngHistLCol
                        If objLifecycle.PhaseOutDate > 0 And IsDate(arrHistory(1, c)) Then
                            If CDate(arrHistory(1, c)) < objLifecycle.PhaseOutDate Then dblTotalSum = dblTotalSum + Val(arrHistory(r, c))
                        End If
                    Next c
                End If
                Set objLifecycle = Nothing
            End If
        End If
    Next r
    GetHistoricalTierSum = dblTotalSum
End Function

Private Function GetHistoricalSubTierSum(ByVal strAffiliate As String, ByVal strTier As String, ByVal strSubTier As String, ByVal arrHistory As Variant, ByVal lngHistLCol As Long) As Double
    Dim dblTotalSum As Double, r As Long, c As Long
    For r = 2 To UBound(arrHistory, 1)
        If LCase$(Trim$(arrHistory(r, COL_AFFILIATE))) = LCase$(strAffiliate) And LCase$(Trim$(arrHistory(r, COL_TIER))) = LCase$(strTier) And LCase$(Trim$(arrHistory(r, COL_SUB_TIER))) = LCase$(strSubTier) Then
            For c = COL_HISTORY_START To lngHistLCol: dblTotalSum = dblTotalSum + Val(arrHistory(r, c)): Next c
        End If
    Next r
    GetHistoricalSubTierSum = dblTotalSum
End Function

Private Function CalculateForecastValue(ByVal objLifecycle As cProductLifecycle, ByVal dteForecastDate As Date, ByVal dblSubTierSum As Double, ByVal dblTierSum As Double, ByVal dblTierDemand As Double) As Double
    Dim dblBaseForecast As Double: If dblTierSum > 0 Then dblBaseForecast = (dblSubTierSum * dblTierDemand) / dblTierSum
    Dim dblFinalForecast As Double

    Select Case objLifecycle.Status
        Case STATUS_ACTIVE, STATUS_NEW
            dblFinalForecast = dblBaseForecast
        Case STATUS_PHASE_IN_OUT
            If objLifecycle.IsPhasingOut And objLifecycle.PhaseOutDate > 0 And dteForecastDate >= objLifecycle.PhaseOutDate Then
                If Month(dteForecastDate) = Month(objLifecycle.PhaseOutDate) And Year(dteForecastDate) = Year(objLifecycle.PhaseOutDate) Then
                    dblFinalForecast = dblBaseForecast * objLifecycle.PhaseOutPercent
                Else
                    dblFinalForecast = 0
                End If
            Else
                dblFinalForecast = dblBaseForecast
            End If
        Case STATUS_DISCONTINUED
             If objLifecycle.PhaseOutDate > 0 And dteForecastDate >= objLifecycle.PhaseOutDate Then dblFinalForecast = 0 Else dblFinalForecast = dblBaseForecast
        Case Else
            dblFinalForecast = dblBaseForecast
    End Select

    If objLifecycle.IsPhasingIn Then
        If dteForecastDate < objLifecycle.PhaseInDate Then
            dblFinalForecast = 0
        ElseIf Month(dteForecastDate) = Month(objLifecycle.PhaseInDate) And Year(dteForecastDate) = Year(objLifecycle.PhaseInDate) Then
            dblFinalForecast = dblBaseForecast * objLifecycle.PhaseInPercent
        End If
    End If
    CalculateForecastValue = dblFinalForecast
End Function

Private Sub SetupOutputSheetHeaders(ByVal ws As Worksheet)
    ws.Range("A1:H1").Value = Array("Affiliate", "Forecast Tier", "Forecast Sub-Tier", "Local Item Nbr", "Desc", "I-S-D", "Active/Discontinued", "Phase Out Month")
End Sub

Private Function CreateOutputWorkbookForAffiliate(ByVal wb As Workbook, ByVal strAffiliate As String, ByVal wsSummary As Worksheet) As Workbook
    Dim wbReport As Workbook, ws As Worksheet, objSheetNames As Object: Set objSheetNames = CreateObject("System.Collections.ArrayList")
    FormatEnhancedSheet wsSummary
    objSheetNames.Add wsSummary.Name
    For Each ws In wb.Worksheets
        If InStr(1, ws.Name, strAffiliate & " - ") > 0 Then objSheetNames.Add ws.Name
    Next ws
    If objSheetNames.Count < 2 And wsSummary.Cells(wsSummary.Rows.Count, "A").End(xlUp).Row < 2 Then Set CreateOutputWorkbookForAffiliate = Nothing: Exit Function
    
    wb.Sheets(objSheetNames.ToArray).Copy
    Set wbReport = ActiveWorkbook
    On Error Resume Next
    wbReport.Sheets("TempSummary").Name = SHEET_SUMMARY_PREFIX
    On Error GoTo 0
    For Each ws In wbReport.Worksheets
        ws.Cells.Copy
        ws.Cells.PasteSpecial Paste:=xlPasteValuesAndNumberFormats
    Next ws
    Application.CutCopyMode = False
    wbReport.Sheets(SHEET_SUMMARY_PREFIX).Activate
    Set CreateOutputWorkbookForAffiliate = wbReport
End Function

Private Function GetHistoricalMonthCount(ByVal arrDemand As Variant, ByVal arrHistory As Variant) As Long
    Dim lngHistLCol As Long, lngCurrCol As Long, lngCount As Long, dteStartDate As Date
    lngHistLCol = UBound(arrHistory, 2)
    If UBound(arrDemand, 2) >= COL_DEMAND_START And IsDate(arrDemand(1, COL_DEMAND_START)) Then
        dteStartDate = CDate(arrDemand(1, COL_DEMAND_START))
    Else
        GetHistoricalMonthCount = 0: Exit Function
    End If
    For lngCurrCol = COL_HISTORY_START To lngHistLCol
        If IsDate(arrHistory(1, lngCurrCol)) Then
            If CDate(arrHistory(1, lngCurrCol)) < dteStartDate Then lngCount = lngCount + 1 Else Exit For
        End If
    Next lngCurrCol
    GetHistoricalMonthCount = lngCount
End Function

Private Function GetCombinedHeaderRow(ByVal strAffiliate As String, ByVal arrDemand As Variant, ByVal arrHistory As Variant, ByVal lngMonthCount As Long) As Variant
    Dim arrHistHeaders() As Variant, r As Long, c As Long
    If lngMonthCount > 0 Then
        ReDim arrHistHeaders(1 To lngMonthCount)
        For c = 1 To lngMonthCount: arrHistHeaders(c) = arrHistory(1, c + (COL_HISTORY_START - 1)): Next c
    End If
    Dim arrDemandHeaders() As Variant
    arrDemandHeaders = Application.WorksheetFunction.Index(arrDemand, 1, 0)
    Dim lngDemandLCol As Long: lngDemandLCol = UBound(arrDemand, 2)
    Dim arrCombined() As Variant: ReDim arrCombined(1 To 8 + lngMonthCount + (lngDemandLCol - 2))
    arrCombined(1) = "Affiliate": arrCombined(2) = "Forecast Tier": arrCombined(3) = "Forecast Sub-Tier": arrCombined(4) = "Local Item Nbr"
    arrCombined(5) = "Desc": arrCombined(6) = "I-S-D": arrCombined(7) = "Active/Discontinued": arrCombined(8) = "Phase Out Month"
    If lngMonthCount > 0 Then
        For c = 1 To UBound(arrHistHeaders): arrCombined(c + 8) = arrHistHeaders(c): Next c
    End If
    For c = 3 To lngDemandLCol
        Dim varHeaderValue As Variant: varHeaderValue = arrDemandHeaders(c)
        If IsDate(varHeaderValue) Then arrCombined(c + 8 + lngMonthCount - 2) = CDate(varHeaderValue) Else arrCombined(c + 8 + lngMonthCount - 2) = varHeaderValue
    Next c
    GetCombinedHeaderRow = arrCombined
End Function

Private Sub AppendToSummarySheet(ByVal wsTier As Worksheet, ByVal wsSummary As Worksheet)
    Dim lngTierLRow As Long, lngTierLCol As Long, lngSummaryLRow As Long
    lngTierLRow = wsTier.Cells(wsTier.Rows.Count, "A").End(xlUp).Row
    If LCase$(Trim$(wsTier.Cells(lngTierLRow, "A").Value)) = "total" Then lngTierLRow = lngTierLRow - 1
    If lngTierLRow < 2 Then Exit Sub
    
    lngTierLCol = wsTier.Cells(1, wsTier.Columns.Count).End(xlToLeft).Column
    lngSummaryLRow = wsSummary.Cells(wsSummary.Rows.Count, "A").End(xlUp).Row
    
    If IsEmpty(wsSummary.Range("I1").Value) Then
        wsTier.Range("I1", wsTier.Cells(1, lngTierLCol)).Copy wsSummary.Range("I1")
    End If
    Dim rngData As Range
    Set rngData = wsTier.Range("A2", wsTier.Cells(lngTierLRow, lngTierLCol))
    wsSummary.Range("A" & lngSummaryLRow + 1).Resize(rngData.Rows.Count, rngData.Columns.Count).Value = rngData.Value
End Sub

Private Sub FormatEnhancedSheet(ByVal ws As Worksheet)
    If ws.Cells(1, 1).Value = "" Then Exit Sub
    Dim lngLastRow As Long, lngLastCol As Long, lngTotalRow As Long, r As Long, i As Long, lngHistLCol As Long
    lngLastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    lngLastCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
    lngTotalRow = lngLastRow
    If LCase$(ws.Cells(lngLastRow, "A").Value) <> "total" Then lngTotalRow = lngLastRow + 1
    ws.Cells(lngTotalRow, "A").Value = "TOTAL"
    For i = 9 To lngLastCol
        On Error Resume Next
        ws.Cells(lngTotalRow, i).Value = Application.WorksheetFunction.Sum(ws.Range(ws.Cells(2, i), ws.Cells(lngLastRow, i)))
        On Error GoTo 0
    Next i
    Dim rngHeader As Range, rngTotal As Range, rngFull As Range
    Set rngHeader = ws.Range(ws.Cells(1, 1), ws.Cells(1, lngLastCol))
    Set rngTotal = ws.Range(ws.Cells(lngTotalRow, 1), ws.Cells(lngTotalRow, lngLastCol))
    Set rngFull = ws.Range(ws.Cells(1, 1), ws.Cells(lngTotalRow, lngLastCol))
    rngFull.Interior.ColorIndex = xlNone: rngFull.Borders.LineStyle = xlNone: rngFull.Font.Bold = False
    With rngHeader
        .Font.Bold = True: .Font.Color = vbWhite: .Interior.Color = RGB(47, 85, 151): .VerticalAlignment = xlCenter
    End With
    With rngTotal
        .Font.Bold = True: .Interior.Color = RGB(221, 235, 247)
    End With
    For r = 2 To lngLastRow
        If r Mod 2 = 0 Then ws.Range(ws.Cells(r, 1), ws.Cells(r, lngLastCol)).Interior.Color = RGB(242, 242, 242)
    Next r
    lngHistLCol = GetLastHistoricalColumn(ws)
    If lngHistLCol > 8 Then
        ws.Range(ws.Cells(2, 9), ws.Cells(lngLastRow, lngHistLCol)).Interior.Color = RGB(220, 220, 220)
        With ws.Range(ws.Cells(1, lngHistLCol), ws.Cells(lngTotalRow, lngHistLCol)).Borders(xlEdgeRight)
            .LineStyle = xlContinuous: .Color = RGB(47, 85, 151): .Weight = xlMedium
        End With
    End If
    rngFull.Borders.LineStyle = xlContinuous: rngFull.Borders.Weight = xlThin: rngFull.Borders.Color = RGB(210, 210, 210)
    ws.Range(ws.Cells(2, 9), ws.Cells(lngTotalRow, lngLastCol)).NumberFormat = "_(* #,##0_);_(* (#,##0);_(* ""-""??_);_(@_)"
    ws.Range(ws.Cells(1, 9), ws.Cells(1, lngLastCol)).NumberFormat = "mmm-yy"
    ws.Cells.EntireColumn.AutoFit
    If ws.Name = SHEET_SUMMARY_PREFIX Then
        ws.Range("A1", ws.Cells(lngTotalRow, lngLastCol)).Sort Key1:=ws.Range("F2"), Order1:=xlAscending, Key2:=ws.Range("B2"), Order2:=xlAscending, Header:=xlYes
    End If
    ws.Activate: ws.Range("A2").Select: ActiveWindow.FreezePanes = True
End Sub

Private Function LoadDataToArray(ByVal ws As Worksheet) As Variant
    If ws Is Nothing Then Exit Function
    Dim lRow As Long, lCol As Long
    lRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    lCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
    If lRow > 1 And lCol > 0 Then LoadDataToArray = ws.Range(ws.Cells(1, 1), ws.Cells(lRow, lCol)).Value
End Function

Private Function SheetExists(ByVal wb As Workbook, ByVal strSheetName As String) As Boolean
    Dim ws As Worksheet
    On Error Resume Next
    Set ws = wb.Sheets(strSheetName)
    On Error GoTo 0
    SheetExists = Not ws Is Nothing
End Function

Private Sub InitializeLogSheet(ByVal ws As Worksheet)
    ws.Name = SHEET_LOG
    With ws.Range("A1:D1")
        .Value = Array("Timestamp", "Type", "Procedure", "Message")
        .Font.Bold = True
    End With
    ws.Columns("A:D").AutoFit
End Sub

Private Sub WriteToLog(ByVal strType As String, ByVal strProcedure As String, ByVal strMessage As String)
    If wsLog Is Nothing Then Exit Sub
    Dim lNextRow As Long
    lNextRow = wsLog.Cells(wsLog.Rows.Count, "A").End(xlUp).Row + 1
    wsLog.Cells(lNextRow, "A").Value = Now
    wsLog.Cells(lNextRow, "B").Value = strType
    wsLog.Cells(lNextRow, "C").Value = strProcedure
    wsLog.Cells(lNextRow, "D").Value = strMessage
End Sub

Private Function GetLastHistoricalColumn(ByVal ws As Worksheet) As Long
    Dim lngLastCol As Long, i As Long, dteStartDate As Date
    On Error Resume Next
    dteStartDate = CDate(ThisWorkbook.Sheets(SHEET_DEMAND).Cells(1, COL_DEMAND_START).Value)
    On Error GoTo 0
    If dteStartDate = 0 Then GetLastHistoricalColumn = 8: Exit Function
    lngLastCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
    GetLastHistoricalColumn = 8
    For i = 9 To lngLastCol
        If IsDate(ws.Cells(1, i).Value) Then
            If CDate(ws.Cells(1, i).Value) < dteStartDate Then GetLastHistoricalColumn = i Else Exit For
        End If
    Next i
End Function

Private Function GetDemandDataRow(ByVal strAffiliate As String, ByVal strTier As String, ByVal arrDemand As Variant) As Long
    Dim r As Long
    For r = 2 To UBound(arrDemand, 1)
        If LCase$(arrDemand(r, COL_AFFILIATE)) = LCase$(strAffiliate) And LCase$(arrDemand(r, COL_TIER)) = LCase$(strTier) Then
            GetDemandDataRow = r
            Exit Function
        End If
    Next r
    GetDemandDataRow = 0
End Function
