'@Folder("Forecasting")
Option Explicit

'================================================================================================
' FORECASTING ENGINE MODULE (M_Forecasting)
' V15.1: Readability Enhancement
'      - Adjusted code style for loops and conditionals based on user feedback for clarity.
'      - Implemented robust fix for date header formatting in the final report.
'      - Refined all code comments for professionalism and maintainability.
'
' Author:      Ayush Goyal
' Date:        26-Jun-2025
'================================================================================================

'--- Private Module-Level Variables ---
Private wbHost As Workbook              'The workbook running this code.
Private wsLog As Worksheet              'The sheet used for logging process steps and errors.
Private lngWarningCount As Long         'A counter for non-fatal warnings during the run.
Private dictDemandCache As Object       'A cache for fast lookups of demand data rows.
Private dictStatusMap As Object         'A dictionary to map status strings ("Active") to enums (psActive).
Private arrStatusData As Variant        'In-memory array of the 'Product Status' sheet.
Private arrHistoryData As Variant       'In-memory array of the 'Historical Sales' sheet.
Private arrDemandData As Variant        'In-memory array of the 'Demand Forecast' sheet.
Private dictLifecycleMap As Object      'Stores all cProductLifecycle objects, keyed by "Affiliate|I-S-D".
Private dictAffiliates As Object        'Stores a unique list of all affiliates to be processed.


'================================================================================================
' 1. MAIN PUBLIC ORCHESTRATOR
'================================================================================================

'@Ignore ProcedureNotUsed
'--- Purpose: Main entry point for the forecasting process. This is the macro the user runs.
'---          It orchestrates the entire workflow from initialization to finalization.
'------------------------------------------------------------------------------------------------
Public Sub UpdateForecast_V7()
    Dim tStart As Double: tStart = Timer

    '--- Execute main workflow stages ---
    If Not InitializeRun() Then GoTo Main_Exit
    If Not LoadAndValidateData() Then GoTo Main_Exit
    
    BuildCachesAndMaps
    ProcessAllAffiliates

Main_Exit:
    FinalizeRun tStart
End Sub


'================================================================================================
' 2. CORE WORKFLOW STAGES
'================================================================================================

'--- Purpose: Prepares the Excel environment for an uninterruped and fast execution.
'--- Returns: True if initialization is successful, False otherwise.
'------------------------------------------------------------------------------------------------
Private Function InitializeRun() As Boolean
    Dim tCheckpoint As Double: tCheckpoint = Timer
    
    Application.EnableCancelKey = xlErrorHandler
    On Error GoTo Init_ErrorHandler

    '--- Pre-run check ---
    If ThisWorkbook.ReadOnly Then
        MsgBox "This workbook is in Read-Only mode. Please enable editing to run the forecast.", vbCritical, "Process Halted"
        Exit Function
    End If

    '--- Optimize Application Settings ---
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.Calculation = xlCalculationManual
    Application.EnableEvents = False
    Application.StatusBar = "Initializing environment..."

    '--- Initialize Module Variables ---
    lngWarningCount = 0
    Set wbHost = ThisWorkbook
    InitializeStatusMap 'Set up the string-to-enum dictionary for product statuses

    '--- Safely re-create the log sheet ---
    On Error Resume Next 'Ignore error if sheet doesn't exist
    wbHost.Sheets(SHEET_LOG).Delete
    On Error GoTo Init_ErrorHandler 'Re-enable standard error handling
    
    Set wsLog = wbHost.Sheets.Add(After:=wbHost.Sheets(wbHost.Sheets.Count))
    InitializeLogSheet wsLog
    
    LogPerformance tCheckpoint, "Initialize Environment"
    InitializeRun = True
    Exit Function

Init_ErrorHandler:
    MsgBox "A critical error occurred during initialization: " & Err.Description, vbCritical, "Initialization Failed"
    InitializeRun = False
End Function

'--- Purpose: Loads all source data from Excel sheets into memory arrays for rapid access.
'--- Returns: True if all data sheets are found and loaded successfully, False otherwise.
'------------------------------------------------------------------------------------------------
Private Function LoadAndValidateData() As Boolean
    Dim tCheckpoint As Double: tCheckpoint = Timer
    On Error GoTo Load_ErrorHandler
    
    Application.StatusBar = "Loading and validating source data..."
    
    '--- Load data into variant arrays ---
    arrStatusData = LoadDataToArray(wbHost.Sheets(SHEET_STATUS))
    arrHistoryData = LoadDataToArray(wbHost.Sheets(SHEET_HISTORY))
    arrDemandData = LoadDataToArray(wbHost.Sheets(SHEET_DEMAND))
    
    '--- Validate that arrays contain data ---
    If Not IsArray(arrStatusData) Or UBound(arrStatusData, 1) < 2 Then Err.Raise 515, , "Sheet '" & SHEET_STATUS & "' is missing or empty."
    If Not IsArray(arrHistoryData) Or UBound(arrHistoryData, 1) < 2 Then Err.Raise 516, , "Sheet '" & SHEET_HISTORY & "' is missing or empty."
    If Not IsArray(arrDemandData) Or UBound(arrDemandData, 1) < 2 Then Err.Raise 517, , "Sheet '" & SHEET_DEMAND & "' is missing or empty."
    
    WriteToLog "Info", "LoadAndValidateData", "All source data loaded and validated."
    LogPerformance tCheckpoint, "Load & Validate Data"
    LoadAndValidateData = True
    Exit Function

Load_ErrorHandler:
    Dim strErrorMsg As String: strErrorMsg = "Failed to load source sheets. " & vbCrLf & vbCrLf & Err.Description
    WriteToLog "FATAL", "LoadAndValidateData", strErrorMsg, Err.Number
    MsgBox strErrorMsg, vbCritical, "Process Halted"
    LoadAndValidateData = False
End Function

'--- Purpose: Pre-processes the loaded data into efficient lookup structures (Dictionaries).
'------------------------------------------------------------------------------------------------
Private Sub BuildCachesAndMaps()
    Dim tCheckpoint As Double: tCheckpoint = Timer
    
    'Create the map of all product lifecycles
    Set dictLifecycleMap = BuildLifecycleMap(arrStatusData)
    LogPerformance tCheckpoint, "Build Lifecycle Map"
    
    'Get a unique list of affiliates and cache demand row numbers
    Set dictAffiliates = GetUniqueAffiliates(arrDemandData)
    CacheDemandDataRows arrDemandData
    LogPerformance tCheckpoint, "Cache Demand & Affiliate Data"
End Sub

'--- Purpose: Iterates through each unique affiliate and triggers the forecasting process.
'---          Includes robust error handling to continue even if one affiliate fails.
'------------------------------------------------------------------------------------------------
Private Sub ProcessAllAffiliates()
    Dim varAffiliateKey As Variant, strCurrentAffiliate As String
    Dim lngAffiliateCounter As Long, lngTotalAffiliates As Long
    Dim tCheckpoint As Double: tCheckpoint = Timer
    
    lngTotalAffiliates = dictAffiliates.Count
    If lngTotalAffiliates = 0 Then
        WriteToLog "Warning", "ProcessAllAffiliates", "No affiliates found. Nothing to process."
        Exit Sub
    End If
    
    '--- Pre-calculate the number of historical months for efficiency ---
    Dim lngHistMonthCount As Long
    lngHistMonthCount = GetHistoricalMonthCount(arrDemandData, arrHistoryData)
    
    For Each varAffiliateKey In dictAffiliates.Keys
        strCurrentAffiliate = CStr(varAffiliateKey)
        lngAffiliateCounter = lngAffiliateCounter + 1
        On Error GoTo Affiliate_ErrorHandler 'Catch any error during this affiliate's processing
        
        If Not DEBUG_MODE Then
            Application.StatusBar = "Processing Affiliate: " & strCurrentAffiliate & " (" & lngAffiliateCounter & " of " & lngTotalAffiliates & ")..."
        End If
        WriteToLog "Info", "ProcessAllAffiliates", "Starting: " & strCurrentAffiliate
        
        '--- Run the forecast for the current affiliate ---
        ProcessForecastForAffiliate strCurrentAffiliate, lngHistMonthCount
        
        GoTo Next_Affiliate

Affiliate_ErrorHandler:
        'This block runs only on error. It logs the issue and resumes at the cleanup stage.
        lngWarningCount = lngWarningCount + 1
        WriteToLog "Error", "ProcessAllAffiliates", "Failed affiliate '" & strCurrentAffiliate & "'.", Err.Number, Err.Description
        Resume Next_Affiliate
        
Next_Affiliate:
        CleanupAffiliateSheets 'Delete temporary sheets for the current affiliate
        On Error GoTo 0 'Reset the error handler for the next loop
    Next varAffiliateKey
    
    LogPerformance tCheckpoint, "Process All Affiliates"
End Sub

'--- Purpose: Restores Excel to its normal state and provides a summary message to the user.
'------------------------------------------------------------------------------------------------
Private Sub FinalizeRun(ByVal tStart As Double)
    On Error Resume Next 'Ensure cleanup completes without error interruption
    
    Dim lngAffiliateCount As Long
    If Not dictAffiliates Is Nothing Then lngAffiliateCount = dictAffiliates.Count
    
    '--- Release all memory objects ---
    CleanupMemory
    
    '--- Restore application settings ---
    Application.StatusBar = False
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    Application.EnableEvents = True
    Application.EnableCancelKey = xlInterrupt
    
    '--- Display final summary message ---
    Dim strMessage As String
    strMessage = "Forecast process completed in " & Format$(Timer - tStart, "#,##0.00") & " seconds." & vbCrLf & vbCrLf
    strMessage = strMessage & "Affiliates Processed: " & lngAffiliateCount & vbCrLf
    strMessage = strMessage & "Warnings: " & lngWarningCount & " (see Log sheet for details)"
    
    MsgBox strMessage, IIf(lngWarningCount > 0, vbExclamation, vbInformation), "Forecast Update Complete"
End Sub


'================================================================================================
' 3. CORE LOGIC & CALCULATION
'================================================================================================

'--- Purpose: Manages the entire forecasting process for a single affiliate.
'------------------------------------------------------------------------------------------------
Private Sub ProcessForecastForAffiliate(ByVal strAffiliate As String, ByVal lngHistMonthCount As Long)
    Dim wsSummary As Worksheet, wsTier As Worksheet
    Dim colTierSheets As Collection
    Dim tTierStart As Double
    
    '--- Create a temporary summary sheet to consolidate results ---
    Set wsSummary = wbHost.Sheets.Add(After:=wbHost.Sheets(wbHost.Sheets.Count))
    wsSummary.Name = TEMP_SHEET_PREFIX & "Summary"
    SetupOutputSheetHeaders wsSummary
    
    '--- Create temporary sheets for each product tier ---
    CreateTierSheets strAffiliate
    Set colTierSheets = GetAffiliateTierSheets()
    
    '--- Initialize caches for this affiliate's calculations ---
    Dim dictTierSumCache As Object: Set dictTierSumCache = CreateObject("Scripting.Dictionary")
    Dim dictSubTierSumCache As Object: Set dictSubTierSumCache = CreateObject("Scripting.Dictionary")
    
    '--- Process each tier sheet ---
    For Each wsTier In colTierSheets
        tTierStart = Timer
        If wsTier.Cells(wsTier.Rows.Count, "A").End(xlUp).Row > 1 Then
            CalculateAndFormatTierSheet wsTier, strAffiliate, lngHistMonthCount, dictTierSumCache, dictSubTierSumCache
            AppendToSummarySheet wsTier, wsSummary
        Else
            WriteToLog "Info", "ProcessForecastForAffiliate", "Skipping empty tier sheet: " & wsTier.Name
        End If
        LogPerformance tTierStart, "Tier Processed: " & wsTier.Name
    Next wsTier
    
    '--- Format the final summary sheet ---
    If Not DEBUG_MODE Then
        FormatEnhancedSheet wsSummary
    End If
    
    '--- Generate the final user-facing report workbook ---
    GenerateAffiliateReport strAffiliate, wsSummary
End Sub

'--- Purpose: Orchestrates the calculation and formatting for a single tier worksheet.
'------------------------------------------------------------------------------------------------
Private Sub CalculateAndFormatTierSheet(ByVal wsTier As Worksheet, ByVal strAffiliate As String, ByVal lngHistMonthCount As Long, ByVal dictTierSumCache As Object, ByVal dictSubTierSumCache As Object)
    Dim arrOutput() As Variant
    Dim strCurrentProductID As String 'For detailed error logging
    
    On Error GoTo Calc_ErrorHandler
    
    '--- Build the entire output data in an array for performance ---
    arrOutput = BuildTierOutputArray(wsTier, strAffiliate, strCurrentProductID, lngHistMonthCount, dictTierSumCache, dictSubTierSumCache)
    If Not IsArray(arrOutput) Then Exit Sub
    
    '--- Write the completed array to the sheet in one operation ---
    wsTier.Cells.Clear
    wsTier.Range("A1").Resize(UBound(arrOutput, 1), UBound(arrOutput, 2)).Value = arrOutput
    
    If Not DEBUG_MODE Then
        FormatEnhancedSheet wsTier
    End If
    
    Exit Sub
    
Calc_ErrorHandler:
    lngWarningCount = lngWarningCount + 1
    Dim strContext As String
    If strCurrentProductID <> "" Then strContext = " (last processed product: " & strCurrentProductID & ")"
    WriteToLog "Error", "CalculateAndFormatTierSheet", "Failed on sheet '" & wsTier.Name & "'" & strContext, Err.Number, Err.Description
End Sub

'--- Purpose: Constructs the main data array for a tier, calculating all forecast values.
'--- Returns: A 2D array containing all header and data rows for the tier.
'------------------------------------------------------------------------------------------------
Private Function BuildTierOutputArray(ByVal wsTier As Worksheet, ByVal strAffiliate As String, ByRef strErrorProductID As String, ByVal lngMonthCount As Long, ByVal dictTierSumCache As Object, ByVal dictSubTierSumCache As Object) As Variant
    Dim lngTierLRow As Long, r As Long, c As Long
    Dim arrHeaderRow As Variant: arrHeaderRow = GetCombinedHeaderRow(lngMonthCount)
    
    'Ensure any "New" products from the status file are included in the sheet
    AddNewProductsToTierSheet wsTier, strAffiliate
    lngTierLRow = wsTier.Cells(wsTier.Rows.Count, COL_AFFILIATE).End(xlUp).Row
    If lngTierLRow < 2 Then Exit Function 'Exit if no products in tier
    
    '--- Prepare the output array ---
    Dim arrOutput() As Variant: ReDim arrOutput(1 To lngTierLRow, 1 To UBound(arrHeaderRow))
    
    '--- Populate headers and existing static data ---
    For c = 1 To UBound(arrHeaderRow): arrOutput(1, c) = arrHeaderRow(c): Next c
    For r = 2 To lngTierLRow: For c = 1 To 6: arrOutput(r, c) = wsTier.Cells(r, c).Value: Next c: Next r
    
    '--- Loop through each product to calculate the forecast ---
    For r = 2 To lngTierLRow
        strErrorProductID = arrOutput(r, COL_ISD) 'For error tracking
        
        '--- Get the lifecycle object for the product ---
        Dim strCompositeKey As String: strCompositeKey = BuildCompositeKey(strAffiliate, strErrorProductID)
        Dim objLifecycle As cProductLifecycle
        If dictLifecycleMap.Exists(strCompositeKey) Then
            Set objLifecycle = dictLifecycleMap.Item(strCompositeKey)
        Else
            Set objLifecycle = New cProductLifecycle 'Create a default object if none exists
        End If
        
        '--- Populate static and historical columns ---
        arrOutput(r, COL_STATUS) = GetStatusString(objLifecycle.Status)
        If objLifecycle.PhaseOutDate > 0 Then arrOutput(r, COL_PHASE_OUT_DATE) = objLifecycle.PhaseOutDate
        Dim arrHistoricSales As Variant: arrHistoricSales = GetHistoricalDataRow(strAffiliate, strErrorProductID, lngMonthCount + 6)
        For c = 1 To UBound(arrHistoricSales): arrOutput(r, c + 8) = arrHistoricSales(c): Next c
        
        '--- Populate the calculated forecast values ---
        PopulateForecastValues arrOutput, r, objLifecycle, strAffiliate, arrOutput(r, COL_TIER), lngMonthCount, dictTierSumCache, dictSubTierSumCache
        
        Set objLifecycle = Nothing
    Next r
    
    strErrorProductID = "" 'Clear after successful loop
    BuildTierOutputArray = arrOutput
End Function

'--- Purpose: Populates the forecast columns for a single product row in the output array.
'------------------------------------------------------------------------------------------------
Private Sub PopulateForecastValues(ByRef arrOutput As Variant, ByVal lngRow As Long, ByVal objLifecycle As cProductLifecycle, ByVal strAffiliate As String, ByVal strTier As String, ByVal lngMonthCount As Long, ByVal dictTierSumCache As Object, ByVal dictSubTierSumCache As Object)
    Dim lngDemandRow As Long, c As Long
    Dim dblSubTierSum As Double, dblTierSum As Double
    
    '--- Get historical sum for the sub-tier (use cache if available) ---
    Dim strSubTierKey As String: strSubTierKey = BuildCompositeKey(BuildCompositeKey(strAffiliate, strTier), arrOutput(lngRow, COL_SUB_TIER))
    If dictSubTierSumCache.Exists(strSubTierKey) Then
        dblSubTierSum = dictSubTierSumCache.Item(strSubTierKey)
    Else
        dblSubTierSum = GetHistoricalSubTierSum(strAffiliate, strTier, arrOutput(lngRow, COL_SUB_TIER), lngMonthCount + 6)
        dictSubTierSumCache.Add strSubTierKey, dblSubTierSum
    End If
    
    '--- Get historical sum for the entire tier (use cache if available) ---
    Dim strTierKey As String: strTierKey = BuildCompositeKey(strAffiliate, strTier)
    If dictTierSumCache.Exists(strTierKey) Then
        dblTierSum = dictTierSumCache.Item(strTierKey)
    Else
        dblTierSum = GetHistoricalTierSum(strAffiliate, strTier, lngMonthCount + 6)
        dictTierSumCache.Add strTierKey, dblTierSum
    End If
    
    '--- Find the corresponding demand row for the tier ---
    lngDemandRow = GetDemandDataRow(strAffiliate, strTier)
    
    '--- Calculate and populate forecast values ---
    If lngDemandRow > 0 Then
        Dim lngForecastStartCol As Long: lngForecastStartCol = 8 + lngMonthCount + 1
        For c = lngForecastStartCol To UBound(arrOutput, 2)
            arrOutput(lngRow, c) = CalculateForecastValue(objLifecycle, arrOutput(1, c), dblSubTierSum, dblTierSum, arrDemandData(lngDemandRow, (c - lngForecastStartCol) + COL_DEMAND_START))
        Next c
    End If
End Sub

'--- Purpose: Calculates the final forecast value for a single product for a single month.
'--- Returns: A Double representing the calculated forecast value.
'------------------------------------------------------------------------------------------------
Private Function CalculateForecastValue(ByVal objLifecycle As cProductLifecycle, ByVal dteForecastDate As Date, ByVal dblSubTierSum As Double, ByVal dblTierSum As Double, ByVal dblTierDemand As Double) As Double
    Dim dblBaseForecast As Double
    
    '--- Calculate base forecast: (Sub-Tier History / Tier History) * Tier Forecast ---
    If dblTierSum > 0 And IsNumeric(dblTierDemand) Then
        dblBaseForecast = (dblSubTierSum * CDbl(dblTierDemand)) / dblTierSum
    End If
    
    '--- Adjust forecast based on the product's lifecycle status (phase-in/out) ---
    CalculateForecastValue = dblBaseForecast * objLifecycle.GetForecastMultiplier(dteForecastDate)
End Function

'--- Purpose: Builds a dictionary of cProductLifecycle objects from the status data.
'--- Returns: A Scripting.Dictionary object mapping product keys to lifecycle objects.
'------------------------------------------------------------------------------------------------
Private Function BuildLifecycleMap(ByVal arrStatusData As Variant) As Object
    Dim r As Long, varCompositeKey As Variant, objTempLifecycle As cProductLifecycle
    Dim dictMap As Object: Set dictMap = CreateObject("Scripting.Dictionary")
    On Error GoTo BuildMap_ErrorHandler
    
    '--- First pass: Create all lifecycle objects ---
    For r = 2 To UBound(arrStatusData, 1)
        If Len(Trim$(arrStatusData(r, COL_ISD))) > 0 And Len(Trim$(arrStatusData(r, COL_AFFILIATE))) > 0 Then
            varCompositeKey = BuildCompositeKey(arrStatusData(r, COL_AFFILIATE), arrStatusData(r, COL_ISD))
            If dictMap.Exists(varCompositeKey) Then
                WriteToLog "Warning", "BuildLifecycleMap", "Duplicate product key found: '" & varCompositeKey & "'", , "Row " & r
            Else
                Set objTempLifecycle = New cProductLifecycle
                objTempLifecycle.Init arrStatusData, r
                dictMap.Add varCompositeKey, objTempLifecycle
            End If
        Else
            WriteToLog "Warning", "BuildLifecycleMap", "Missing Affiliate or I-S-D. Skipped.", , "Row " & r
        End If
    Next r

    '--- Second pass: Link successor products for phase-in/out calculations ---
    For Each varCompositeKey In dictMap.Keys
        dictMap.Item(varCompositeKey).LinkSuccessor dictMap
    Next varCompositeKey
    
    Set BuildLifecycleMap = dictMap
    Exit Function
    
BuildMap_ErrorHandler:
    WriteToLog "FATAL", "BuildLifecycleMap", "Error building lifecycle map.", Err.Number, Err.Description
End Function


'================================================================================================
' 4. UTILITY & HELPER FUNCTIONS
'================================================================================================

'--- Purpose: Scans the 'Product Status' sheet for "New" products and adds them to a tier sheet if missing.
'------------------------------------------------------------------------------------------------
Private Sub AddNewProductsToTierSheet(ByVal wsTier As Worksheet, ByVal strAffiliate As String)
    On Error GoTo AddNew_ErrorHandler
    Dim dictExistingProducts As Object: Set dictExistingProducts = CreateObject("Scripting.Dictionary")
    Dim lngTierLRow As Long: lngTierLRow = wsTier.Cells(wsTier.Rows.Count, COL_ISD).End(xlUp).Row
    
    '--- Build a dictionary of products already on the sheet for fast lookups ---
    If lngTierLRow > 1 Then
        Dim arrExisting As Variant, r As Long
        arrExisting = wsTier.Range("F2:F" & lngTierLRow).Value
        If IsArray(arrExisting) Then
            For r = 1 To UBound(arrExisting, 1)
                If Not dictExistingProducts.Exists(arrExisting(r, 1)) Then
                    dictExistingProducts.Add arrExisting(r, 1), 1
                End If
            Next r
        ElseIf Not IsEmpty(arrExisting) Then
            If Not dictExistingProducts.Exists(arrExisting) Then
                dictExistingProducts.Add arrExisting, 1
            End If
        End If
    End If
    
    Dim strTierName As String: strTierName = Replace(wsTier.Name, TEMP_SHEET_PREFIX, "")
    
    '--- Loop through status data and add any missing "New" products ---
    Dim rStatus As Long, strProduct As String
    For rStatus = 2 To UBound(arrStatusData, 1)
        If LCase$(Trim$(arrStatusData(rStatus, COL_AFFILIATE))) = LCase$(strAffiliate) And LCase$(Trim$(arrStatusData(rStatus, COL_TIER))) = LCase$(strTierName) Then
            If GetStatusEnum(Trim$(arrStatusData(rStatus, COL_STATUS))) = psNew Then
                strProduct = Trim$(arrStatusData(rStatus, COL_ISD))
                If Not dictExistingProducts.Exists(strProduct) Then
                    lngTierLRow = wsTier.Cells(wsTier.Rows.Count, "A").End(xlUp).Row + 1
                    wsTier.Range("A" & lngTierLRow).Resize(1, 6).Value = Array(arrStatusData(rStatus, 1), arrStatusData(rStatus, 2), arrStatusData(rStatus, 3), arrStatusData(rStatus, 4), arrStatusData(rStatus, 5), arrStatusData(rStatus, 6))
                    dictExistingProducts.Add strProduct, 1 'Add to dictionary to prevent re-adding
                End If
            End If
        End If
    Next rStatus
    Exit Sub
    
AddNew_ErrorHandler:
    lngWarningCount = lngWarningCount + 1
    WriteToLog "Error", "AddNewProductsToTierSheet", "Failed to add new products.", Err.Number, "Sheet: " & wsTier.Name
End Sub

'--- Purpose: Assembles the complete header row for the output file by combining static, historical, and future columns.
'--- Returns: A 1D array containing all header titles.
'------------------------------------------------------------------------------------------------
Private Function GetCombinedHeaderRow(ByVal lngMonthCount As Long) As Variant
    Dim arrHistHeaders() As Variant, arrCombined() As Variant, c As Long

    '--- Get historical headers ---
    If lngMonthCount > 0 Then
        ReDim arrHistHeaders(1 To lngMonthCount)
        For c = 1 To lngMonthCount
            arrHistHeaders(c) = arrHistoryData(1, c + (COL_HISTORY_START - 1))
        Next c
    End If

    '--- Assemble the final combined header array ---
    Dim demandCols As Long
    demandCols = UBound(arrDemandData, 2) - (COL_DEMAND_START - 1)

    ReDim arrCombined(1 To 8 + lngMonthCount + demandCols)
    arrCombined(1) = "Affiliate": arrCombined(2) = "Forecast Tier": arrCombined(3) = "Forecast Sub-Tier": arrCombined(4) = "Local Item Nbr"
    arrCombined(5) = "Desc": arrCombined(6) = "I-S-D": arrCombined(7) = "Active/Discontinued": arrCombined(8) = "Phase Out Month"

    '--- Add historical headers to the array ---
    If lngMonthCount > 0 Then
        For c = 1 To UBound(arrHistHeaders)
            arrCombined(c + 8) = arrHistHeaders(c)
        Next c
    End If

    '--- Add future forecast headers to the array cell-by-cell to preserve the Date type ---
    Dim i As Long
    For i = 1 To demandCols
        arrCombined(8 + lngMonthCount + i) = arrDemandData(1, (COL_DEMAND_START - 1) + i)
    Next i

    GetCombinedHeaderRow = arrCombined
End Function

'--- Purpose: Generates the final, clean Excel report workbook for an affiliate.
'------------------------------------------------------------------------------------------------
Private Sub GenerateAffiliateReport(ByVal strAffiliate As String, ByVal wsSummary As Worksheet)
    On Error GoTo Report_ErrorHandler
    Dim wbReport As Workbook
    Set wbReport = CreateOutputWorkbook(strAffiliate, wsSummary)
    
    If Not wbReport Is Nothing Then
        If Not DEBUG_MODE Then
            Dim strFilePath As String: strFilePath = GetOutputFilePath(wbHost.Path, strAffiliate)
            Application.StatusBar = "Saving final report for " & strAffiliate & "..."
            wbReport.SaveAs strFilePath
            wbReport.Close SaveChanges:=False
            WriteToLog "Info", "GenerateAffiliateReport", "Report saved to " & strFilePath
        Else
            WriteToLog "Debug", "GenerateAffiliateReport", "DEBUG MODE: Report for " & strAffiliate & " created but not saved/closed."
        End If
    End If
    
    Exit Sub
Report_ErrorHandler:
    lngWarningCount = lngWarningCount + 1
    WriteToLog "Error", "GenerateAffiliateReport", "Could not generate or save report.", Err.Number, "Affiliate: " & strAffiliate
End Sub

'--- Purpose: Creates the output workbook object by copying all temporary sheets.
'--- Returns: A Workbook object representing the new report.
'------------------------------------------------------------------------------------------------
Private Function CreateOutputWorkbook(ByVal strAffiliate As String, ByVal wsSummary As Worksheet) As Workbook
    Dim colSheetsToCopy As Collection: Set colSheetsToCopy = GetAffiliateTierSheets()
    colSheetsToCopy.Add wsSummary, Before:=1 'Ensure summary is the first sheet
    
    'Exit if there's no data to create a report for
    If colSheetsToCopy.Count < 2 And wsSummary.Cells(wsSummary.Rows.Count, "A").End(xlUp).Row < 2 Then Exit Function
    
    '--- Copy sheets to a new workbook ---
    Dim arrSheetNames() As String: ReDim arrSheetNames(1 To colSheetsToCopy.Count)
    Dim i As Long, ws As Worksheet, wbReport As Workbook
    For i = 1 To colSheetsToCopy.Count: arrSheetNames(i) = colSheetsToCopy(i).Name: Next i
    
    wbHost.Sheets(arrSheetNames).Copy
    Set wbReport = ActiveWorkbook
    
    '--- Rename and clean the sheets in the new workbook ---
    wbReport.Sheets(TEMP_SHEET_PREFIX & "Summary").Name = SHEET_SUMMARY_PREFIX
    
    For Each ws In wbReport.Worksheets
        'Remove temporary prefix from sheet names
        If Left$(ws.Name, Len(TEMP_SHEET_PREFIX)) = TEMP_SHEET_PREFIX Then
            ws.Name = SanitizeSheetName(Replace(ws.Name, TEMP_SHEET_PREFIX, ""))
        End If
        
        'Convert all data to static values (removes formulas)
        Dim findRow As Range, findCol As Range
        Set findRow = ws.Cells.Find(What:="*", SearchOrder:=xlByRows, SearchDirection:=xlPrevious)
        Set findCol = ws.Cells.Find(What:="*", SearchOrder:=xlByColumns, SearchDirection:=xlPrevious)
        
        If Not findRow Is Nothing And Not findCol Is Nothing Then
            With ws.Range("A1", ws.Cells(findRow.Row, findCol.Column))
                .Value = .Value
            End With
            ws.Cells.EntireColumn.AutoFit
        End If
    Next ws
    
    Application.CutCopyMode = False
    wbReport.Sheets(SHEET_SUMMARY_PREFIX).Activate
    Set CreateOutputWorkbook = wbReport
End Function


'================================================================================================
' 5. DATA RETRIEVAL & CACHING
'================================================================================================

'--- Purpose: Calculates the total historical sales for an entire tier.
'------------------------------------------------------------------------------------------------
Private Function GetHistoricalTierSum(ByVal strAffiliate As String, ByVal strTier As String, ByVal lngHistLCol As Long) As Double
    Dim dblTotalSum As Double, r As Long, c As Long
    For r = 2 To UBound(arrHistoryData, 1)
        If LCase$(Trim$(arrHistoryData(r, COL_AFFILIATE))) = LCase$(strAffiliate) And LCase$(Trim$(arrHistoryData(r, COL_TIER))) = LCase$(strTier) Then
            Dim strCompositeKey As String: strCompositeKey = BuildCompositeKey(arrHistoryData(r, COL_AFFILIATE), arrHistoryData(r, COL_ISD))
            Dim objLifecycle As cProductLifecycle
            If dictLifecycleMap.Exists(strCompositeKey) Then
                Set objLifecycle = dictLifecycleMap.Item(strCompositeKey)
                Dim varValue As Variant
                'Exclude discontinued products from the sum, unless they are within their phase-out period
                If objLifecycle.Status <> psDiscontinued Then
                    For c = COL_HISTORY_START To lngHistLCol
                        varValue = arrHistoryData(r, c)
                        If IsNumeric(varValue) Then dblTotalSum = dblTotalSum + CDbl(varValue)
                    Next c
                Else
                    For c = COL_HISTORY_START To lngHistLCol
                        varValue = arrHistoryData(r, c)
                        If objLifecycle.PhaseOutDate > 0 And IsDate(arrHistoryData(1, c)) Then
                            If CDate(arrHistoryData(1, c)) < objLifecycle.PhaseOutDate Then
                                If IsNumeric(varValue) Then dblTotalSum = dblTotalSum + CDbl(varValue)
                            End If
                        End If
                    Next c
                End If
            End If
        End If
    Next r
    GetHistoricalTierSum = dblTotalSum
End Function

'--- Purpose: Calculates the total historical sales for a specific sub-tier.
'------------------------------------------------------------------------------------------------
Private Function GetHistoricalSubTierSum(ByVal strAffiliate As String, ByVal strTier As String, ByVal strSubTier As String, ByVal lngHistLCol As Long) As Double
    Dim dblTotalSum As Double, r As Long, c As Long
    For r = 2 To UBound(arrHistoryData, 1)
        If LCase$(Trim$(arrHistoryData(r, COL_AFFILIATE))) = LCase$(strAffiliate) And LCase$(Trim$(arrHistoryData(r, COL_TIER))) = LCase$(strTier) And LCase$(Trim$(arrHistoryData(r, COL_SUB_TIER))) = LCase$(strSubTier) Then
            For c = COL_HISTORY_START To lngHistLCol
                Dim varValue As Variant: varValue = arrHistoryData(r, c)
                If IsNumeric(varValue) Then dblTotalSum = dblTotalSum + CDbl(varValue)
            Next c
        End If
    Next r
    GetHistoricalSubTierSum = dblTotalSum
End Function

'--- Purpose: Retrieves a single row of historical data for a specific product.
'------------------------------------------------------------------------------------------------
Private Function GetHistoricalDataRow(ByVal strAffiliate As String, ByVal strProduct As String, ByVal lngHistColCount As Long) As Variant
    Dim arrResult() As Variant: ReDim arrResult(1 To lngHistColCount - 6) 'Initialize empty array
    Dim r As Long, c As Long
    For r = 2 To UBound(arrHistoryData, 1)
        If Trim$(arrHistoryData(r, COL_AFFILIATE)) = strAffiliate And Trim$(arrHistoryData(r, COL_ISD)) = strProduct Then
            For c = COL_HISTORY_START To lngHistColCount: arrResult(c - (COL_HISTORY_START - 1)) = arrHistoryData(r, c): Next c
            GetHistoricalDataRow = arrResult
            Exit Function
        End If
    Next r
    GetHistoricalDataRow = arrResult 'Return empty array if not found
End Function

'--- Purpose: Gets the number of historical months before the forecast starts.
'------------------------------------------------------------------------------------------------
Private Function GetHistoricalMonthCount(ByVal arrDemand As Variant, ByVal arrHistory As Variant) As Long
    If UBound(arrDemand, 2) < COL_DEMAND_START Or Not IsDate(arrDemand(1, COL_DEMAND_START)) Then
        WriteToLog "Warning", "GetHistoricalMonthCount", "Demand forecast start date is missing or invalid. Count set to 0."
        Exit Function
    End If
    
    Dim dteStartDate As Date: dteStartDate = CDate(arrDemand(1, COL_DEMAND_START))
    Dim lngCurrCol As Long, lngCount As Long
    For lngCurrCol = COL_HISTORY_START To UBound(arrHistory, 2)
        If IsDate(arrHistory(1, lngCurrCol)) Then
            If CDate(arrHistory(1, lngCurrCol)) < dteStartDate Then lngCount = lngCount + 1 Else Exit For
        End If
    Next lngCurrCol
    GetHistoricalMonthCount = lngCount
End Function

'--- Purpose: Retrieves a collection of all temporary tier sheets for the current affiliate.
'------------------------------------------------------------------------------------------------
Private Function GetAffiliateTierSheets() As Collection
    Dim colSheets As Collection: Set colSheets = New Collection
    Dim ws As Worksheet
    
    For Each ws In wbHost.Worksheets
        If Left$(ws.Name, Len(TEMP_SHEET_PREFIX)) = TEMP_SHEET_PREFIX And ws.Name <> TEMP_SHEET_PREFIX & "Summary" Then
            colSheets.Add ws
        End If
    Next ws
    
    Set GetAffiliateTierSheets = colSheets
End Function

'--- Purpose: Gets the row number from the demand data for a given affiliate and tier.
'------------------------------------------------------------------------------------------------
Private Function GetDemandDataRow(ByVal strAffiliate As String, ByVal strTier As String) As Long
    Dim strKey As String: strKey = BuildCompositeKey(strAffiliate, strTier)
    If dictDemandCache.Exists(strKey) Then GetDemandDataRow = dictDemandCache.Item(strKey)
End Function

'--- Purpose: Creates a dictionary mapping unique affiliate names to a value.
'------------------------------------------------------------------------------------------------
Private Function GetUniqueAffiliates(ByVal arrDemandData As Variant) As Object
    Dim dict As Object: Set dict = CreateObject("Scripting.Dictionary")
    If IsArray(arrDemandData) Then
        Dim r As Long
        For r = 2 To UBound(arrDemandData, 1)
            If Not IsEmpty(arrDemandData(r, COL_AFFILIATE)) Then
                If Not dict.Exists(arrDemandData(r, COL_AFFILIATE)) Then
                    dict.Add arrDemandData(r, COL_AFFILIATE), 1
                End If
            End If
        Next r
    End If
    Set GetUniqueAffiliates = dict
End Function

'--- Purpose: Loads an entire worksheet's used range into a 2D Variant array.
'------------------------------------------------------------------------------------------------
Private Function LoadDataToArray(ByVal ws As Worksheet) As Variant
    If ws Is Nothing Then Exit Function
    Dim lRow As Long: lRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    Dim lCol As Long: lCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
    If lRow > 1 And lCol > 0 Then LoadDataToArray = ws.Range("A1", ws.Cells(lRow, lCol)).Value
End Function

'--- Purpose: Populates the demand cache dictionary for fast lookups.
'------------------------------------------------------------------------------------------------
Private Sub CacheDemandDataRows(ByVal arrDemand As Variant)
    Set dictDemandCache = CreateObject("Scripting.Dictionary")
    If Not IsArray(arrDemand) Then Exit Sub
    
    Dim r As Long, strKey As String
    For r = 2 To UBound(arrDemand, 1)
        strKey = BuildCompositeKey(arrDemand(r, COL_AFFILIATE), arrDemand(r, COL_TIER))
        If Not dictDemandCache.Exists(strKey) Then
            dictDemandCache.Add strKey, r
        End If
    Next r
End Sub


'================================================================================================
' 6. SHEET MANIPULATION & FORMATTING
'================================================================================================

'--- Purpose: Creates all necessary temporary tier sheets for an affiliate.
'------------------------------------------------------------------------------------------------
Private Sub CreateTierSheets(ByVal strAffiliate As String)
    On Error GoTo TierSheet_ErrorHandler
    Dim dictTiers As Object: Set dictTiers = CreateObject("Scripting.Dictionary")
    Dim r As Long, strTier As String
    
    '--- Find all unique tiers for the affiliate ---
    For r = 2 To UBound(arrDemandData, 1)
        If LCase$(Trim$(arrDemandData(r, COL_AFFILIATE))) = LCase$(strAffiliate) Then
            strTier = Trim$(arrDemandData(r, COL_TIER))
            If Len(strTier) > 0 And Not dictTiers.Exists(strTier) Then dictTiers.Add strTier, 1
        End If
    Next r
    
    '--- Create a temporary sheet for each unique tier ---
    Dim varTier As Variant, wsNewTier As Worksheet
    For Each varTier In dictTiers.Keys
        strTier = CStr(varTier)
        Set wsNewTier = wbHost.Sheets.Add(After:=wbHost.Sheets(wbHost.Sheets.Count))
        wsNewTier.Name = TEMP_SHEET_PREFIX & strTier
        SetupOutputSheetHeaders wsNewTier
        PopulateTierSheetWithProducts wsNewTier, strAffiliate, strTier
    Next varTier
    
    Exit Sub
TierSheet_ErrorHandler:
    lngWarningCount = lngWarningCount + 1
    WriteToLog "Error", "CreateTierSheets", "Could not create tier sheets.", Err.Number, "Affiliate: " & strAffiliate
End Sub

'--- Purpose: Populates a newly created tier sheet with the relevant products from the status file.
'------------------------------------------------------------------------------------------------
Private Sub PopulateTierSheetWithProducts(ByVal wsTier As Worksheet, ByVal strAffiliate As String, ByVal strTier As String)
    Dim lngNextFreeRow As Long: lngNextFreeRow = 2
    Dim r As Long
    For r = 2 To UBound(arrStatusData, 1)
        If LCase$(Trim$(arrStatusData(r, COL_AFFILIATE))) = LCase$(strAffiliate) And LCase$(Trim$(arrStatusData(r, COL_TIER))) = LCase$(strTier) Then
            wsTier.Range("A" & lngNextFreeRow).Resize(1, 6).Value = Array(arrStatusData(r, 1), arrStatusData(r, 2), arrStatusData(r, 3), arrStatusData(r, 4), arrStatusData(r, 5), arrStatusData(r, 6))
            lngNextFreeRow = lngNextFreeRow + 1
        End If
    Next r
End Sub

'--- Purpose: Appends the data from a tier sheet to the main summary sheet.
'------------------------------------------------------------------------------------------------
Private Sub AppendToSummarySheet(ByVal wsTier As Worksheet, ByVal wsSummary As Worksheet)
    Dim lngTierLRow As Long, lngTierLCol As Long, lngSummaryLRow As Long
    lngTierLRow = wsTier.Cells(wsTier.Rows.Count, "A").End(xlUp).Row
    If LCase$(Trim$(wsTier.Cells(lngTierLRow, "A").Value)) = "total" Then lngTierLRow = lngTierLRow - 1
    If lngTierLRow < 2 Then Exit Sub 'Nothing to append
    
    lngTierLCol = wsTier.Cells(1, wsTier.Columns.Count).End(xlToLeft).Column
    lngSummaryLRow = wsSummary.Cells(wsSummary.Rows.Count, "A").End(xlUp).Row
    
    '--- Copy headers if the summary sheet is empty ---
    If IsEmpty(wsSummary.Range("I1").Value) Then
        wsTier.Range("I1", wsTier.Cells(1, lngTierLCol)).Copy wsSummary.Range("I1")
    End If
    
    '--- Append data ---
    Dim rngData As Range
    Set rngData = wsTier.Range("A2", wsTier.Cells(lngTierLRow, lngTierLCol))
    wsSummary.Range("A" & lngSummaryLRow + 1).Resize(rngData.Rows.Count, rngData.Columns.Count).Value = rngData.Value
End Sub

'--- Purpose: Applies all professional formatting to a worksheet.
'------------------------------------------------------------------------------------------------
Private Sub FormatEnhancedSheet(ByVal ws As Worksheet)
    If ws.Cells(1, 1).Value = "" Then Exit Sub
    
    Dim lngLastRow As Long: lngLastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    Dim lngLastCol As Long: lngLastCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
    Dim lngTotalRow As Long: lngTotalRow = ApplyTotalRow(ws, lngLastRow, lngLastCol)
    
    ApplyTableStyles ws, lngTotalRow, lngLastCol
    ApplyNumberFormats ws, lngTotalRow, lngLastCol
    ws.Cells.EntireColumn.AutoFit
    
    '--- Sort summary sheets by product I-S-D for consistency ---
    If ws.Name = SHEET_SUMMARY_PREFIX Or ws.Name = TEMP_SHEET_PREFIX & "Summary" Then
        ws.Range("A1", ws.Cells(lngTotalRow, lngLastCol)).Sort Key1:=ws.Range("F2"), Order1:=xlAscending, Header:=xlYes
    End If
End Sub

'--- Purpose: Adds and calculates the "TOTAL" row at the bottom of a sheet.
'------------------------------------------------------------------------------------------------
Private Function ApplyTotalRow(ByVal ws As Worksheet, ByVal lngLastRow As Long, ByVal lngLastCol As Long) As Long
    Dim lngTotalRow As Long: lngTotalRow = lngLastRow
    If LCase$(ws.Cells(lngLastRow, "A").Value) <> "total" Then lngTotalRow = lngLastRow + 1
    
    ws.Cells(lngTotalRow, "A").Value = "TOTAL"
    Dim i As Long
    For i = 9 To lngLastCol 'Sum only the numeric month columns
        On Error Resume Next 'In case of non-numeric data in a column
        ws.Cells(lngTotalRow, i).Value = Application.WorksheetFunction.Sum(ws.Range(ws.Cells(2, i), ws.Cells(lngLastRow, i)))
        On Error GoTo 0
    Next i
    ApplyTotalRow = lngTotalRow
End Function

'--- Purpose: Applies colors, borders, and font styles to a sheet.
'------------------------------------------------------------------------------------------------
Private Sub ApplyTableStyles(ByVal ws As Worksheet, ByVal lngTotalRow As Long, ByVal lngLastCol As Long)
    Dim rngHeader As Range, rngTotal As Range, rngFull As Range
    Set rngHeader = ws.Range(ws.Cells(1, 1), ws.Cells(1, lngLastCol))
    Set rngTotal = ws.Range(ws.Cells(lngTotalRow, 1), ws.Cells(lngTotalRow, lngLastCol))
    Set rngFull = ws.Range(ws.Cells(1, 1), ws.Cells(lngTotalRow, lngLastCol))
    
    '--- Reset existing formats ---
    With rngFull
        .Interior.ColorIndex = xlNone
        .Borders.LineStyle = xlNone
        .Font.Bold = False
    End With
    
    '--- Apply new formats ---
    With rngHeader.Font: .Bold = True: .Color = vbWhite: End With
    rngHeader.Interior.Color = RGB(47, 85, 151)
    
    rngTotal.Font.Bold = True
    rngTotal.Interior.Color = RGB(221, 235, 247)
    
    '--- Apply alternating row colors (banding) ---
    Dim r As Long
    For r = 2 To lngTotalRow - 1
        If r Mod 2 = 0 Then ws.Range(ws.Cells(r, 1), ws.Cells(r, lngLastCol)).Interior.Color = RGB(242, 242, 242)
    Next r
    
    '--- Visually separate historical from forecast data ---
    Dim lngHistLCol As Long: lngHistLCol = GetLastHistoricalColumn(ws)
    If lngHistLCol > 8 Then
        ws.Range(ws.Cells(2, 9), ws.Cells(lngTotalRow - 1, lngHistLCol)).Interior.Color = RGB(220, 220, 220)
        With ws.Range(ws.Cells(1, lngHistLCol), ws.Cells(lngTotalRow, lngHistLCol)).Borders(xlEdgeRight)
            .LineStyle = xlContinuous: .Weight = xlMedium
        End With
    End If
    
    '--- Apply standard borders ---
    With rngFull.Borders
        .LineStyle = xlContinuous
        .Weight = xlThin
    End With
End Sub

'--- Purpose: Applies number and date formats to the data area.
'------------------------------------------------------------------------------------------------
Private Sub ApplyNumberFormats(ByVal ws As Worksheet, ByVal lngTotalRow As Long, ByVal lngLastCol As Long)
    With ws
        .Range(.Cells(2, 9), .Cells(lngTotalRow, lngLastCol)).NumberFormat = "_(* #,##0_);_(* (#,##0);_(* ""-""??_);_(@_)"
        .Range(.Cells(1, 9), .Cells(1, lngLastCol)).NumberFormat = "mmm-yy"
    End With
End Sub


'================================================================================================
' 7. CLEANUP & GENERAL UTILITIES
'================================================================================================

'--- Purpose: Deletes all temporary worksheets created for an affiliate.
'------------------------------------------------------------------------------------------------
Private Sub CleanupAffiliateSheets()
    On Error Resume Next 'In case a sheet was not created
    Application.DisplayAlerts = False
    Dim ws As Worksheet
    For Each ws In wbHost.Worksheets
        If Left$(ws.Name, Len(TEMP_SHEET_PREFIX)) = TEMP_SHEET_PREFIX Then
            ws.Delete
        End If
    Next ws
    Application.DisplayAlerts = True
    On Error GoTo 0
End Sub

'--- Purpose: Releases all module-level object variables from memory.
'------------------------------------------------------------------------------------------------
Private Sub CleanupMemory()
    On Error Resume Next
    Erase arrStatusData
    Erase arrHistoryData
    Erase arrDemandData
    Set dictLifecycleMap = Nothing
    Set dictAffiliates = Nothing
    Set dictDemandCache = Nothing
    Set dictStatusMap = Nothing
    On Error GoTo 0
End Sub

'--- Purpose: Creates a standardized composite key for dictionary lookups.
'------------------------------------------------------------------------------------------------
Public Function BuildCompositeKey(ByVal keyPart1 As String, ByVal keyPart2 As String) As String
    Const SEPARATOR As String = "|"
    BuildCompositeKey = Trim$(keyPart1) & SEPARATOR & Trim$(keyPart2)
End Function

'--- Purpose: Gets the file path for the final output report.
'------------------------------------------------------------------------------------------------
Private Function GetOutputFilePath(ByVal strBasePath As String, ByVal strAffiliate As String) As String
    GetOutputFilePath = strBasePath & "\Demand ForeCast - " & strAffiliate & " - " & Format$(Now, "DDMMYYYY_HHMMSS") & ".xlsx"
End Function

'--- Purpose: Removes illegal characters from a string to create a valid worksheet name.
'------------------------------------------------------------------------------------------------
Private Function SanitizeSheetName(ByVal strName As String) As String
    Dim strSanitized As String
    strSanitized = Left$(Replace(Replace(Replace(Replace(Replace(Replace(Replace(strName, ":", "-"), "\", "-"), "/", "-"), "?", ""), "*", ""), "[", "("), "]", ")"), 31)
    SanitizeSheetName = strSanitized
End Function

'--- Purpose: Finds the last column containing historical data on a sheet.
'------------------------------------------------------------------------------------------------
Private Function GetLastHistoricalColumn(ByVal ws As Worksheet) As Long
    Dim dteStartDate As Date
    On Error Resume Next
    dteStartDate = CDate(ThisWorkbook.Sheets(SHEET_DEMAND).Cells(1, COL_DEMAND_START).Value)
    On Error GoTo 0
    If dteStartDate = 0 Then GetLastHistoricalColumn = 8: Exit Function 'No forecast start date found
    
    Dim i As Long
    GetLastHistoricalColumn = 8 'Default if no historical months
    For i = 9 To ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
        If IsDate(ws.Cells(1, i).Value) Then
            If CDate(ws.Cells(1, i).Value) < dteStartDate Then GetLastHistoricalColumn = i Else Exit For
        End If
    Next i
End Function

'--- Purpose: Sets the standard headers on a new output worksheet.
'------------------------------------------------------------------------------------------------
Private Sub SetupOutputSheetHeaders(ByVal ws As Worksheet)
    ws.Range("A1:H1").Value = Array("Affiliate", "Forecast Tier", "Forecast Sub-Tier", "Local Item Nbr", "Desc", "I-S-D", "Active/Discontinued", "Phase Out Month")
End Sub


'================================================================================================
' 8. LOGGING & STATUS MAPPING
'================================================================================================

'--- Purpose: Sets up the headers for a new log sheet.
'------------------------------------------------------------------------------------------------
Private Sub InitializeLogSheet(ByVal ws As Worksheet)
    ws.Name = SHEET_LOG
    With ws.Range("A1:E1")
        .Value = Array("Timestamp", "Type", "Procedure", "Message", "Context / Error")
        .Font.Bold = True
    End With
    ws.Columns("A:E").AutoFit
End Sub

'--- Purpose: Writes a new entry to the log sheet.
'------------------------------------------------------------------------------------------------
Private Sub WriteToLog(ByVal strType As String, ByVal strProcedure As String, ByVal strMessage As String, Optional ByVal lngErrNumber As Long = 0, Optional ByVal strContext As String = "")
    If wsLog Is Nothing Then Exit Sub
    Dim lNextRow As Long
    lNextRow = wsLog.Cells(wsLog.Rows.Count, "A").End(xlUp).Row + 1
    With wsLog.Rows(lNextRow)
        .Cells(1).Value = Now()
        .Cells(2).Value = strType
        .Cells(3).Value = strProcedure
        .Cells(4).Value = strMessage
        If lngErrNumber <> 0 Then
            .Cells(5).Value = "Err " & lngErrNumber & ": " & strContext
        Else
            .Cells(5).Value = strContext
        End If
    End With
End Sub

'--- Purpose: Logs the time taken to complete a specific stage of the process.
'------------------------------------------------------------------------------------------------
Private Sub LogPerformance(ByRef tCheckpoint As Double, ByVal strStageName As String)
    WriteToLog "Profile", strStageName, "Stage completed in " & Format$(Timer - tCheckpoint, "#,##0.00") & "s"
    tCheckpoint = Timer
End Sub

'--- Purpose: Converts a status string (e.g., "Active") into its corresponding enum value (e.g., psActive).
'------------------------------------------------------------------------------------------------
Public Function GetStatusEnum(ByVal strStatus As String) As ProductStatus
    Dim strKey As String: strKey = UCase$(Trim$(strStatus))
    If dictStatusMap.Exists(strKey) Then
        GetStatusEnum = dictStatusMap.Item(strKey)
    Else
        GetStatusEnum = psUnknown 'Return 'Unknown' if not found
    End If
End Function

'--- Purpose: Converts a status enum value (e.g., psActive) into its corresponding string (e.g., "Active").
'------------------------------------------------------------------------------------------------
Public Function GetStatusString(ByVal enmStatus As ProductStatus) As String
    Select Case enmStatus
        Case psActive: GetStatusString = "Active"
        Case psPhaseInOut: GetStatusString = "PhaseIn-PhaseOut"
        Case psDiscontinued: GetStatusString = "Discontinued"
        Case psNew: GetStatusString = "New"
        Case Else: GetStatusString = "Unknown"
    End Select
End Function

'--- Purpose: Initializes the dictionary that maps status strings to enums.
'------------------------------------------------------------------------------------------------
Private Sub InitializeStatusMap()
    Set dictStatusMap = CreateObject("Scripting.Dictionary")
    dictStatusMap.CompareMode = vbTextCompare 'Make lookups case-insensitive
    dictStatusMap.Add "ACTIVE", psActive
    dictStatusMap.Add "PHASEIN-PHASEOUT", psPhaseInOut
    dictStatusMap.Add "DISCONTINUED", psDiscontinued
    dictStatusMap.Add "NEW", psNew
End Sub
