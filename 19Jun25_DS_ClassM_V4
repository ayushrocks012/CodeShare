'@Folder("Classes")
Option Explicit

'================================================================================================
'--- CLASS MODULE: cProductLifecycle ---
' V14: Architectural Refactoring
'      - Encapsulated the successor-linking logic into a new 'LinkSuccessor' method.
'
' Author:      [Your Name]
' Date:        [Current Date]
'================================================================================================

'--- Private Backing Fields ---
Private m_strAffiliate As String
Private m_strProductID As String
Private m_enmStatus As ProductStatus
Private m_blnIsPhasingOut As Boolean
Private m_dtePhaseOutDate As Date
Private m_dblPhaseOutPercent As Double
Private m_strSupersededByProductID As String
Private m_blnIsPhasingIn As Boolean
Private m_dtePhaseInDate As Date
Private m_dblPhaseInPercent As Double

'--- Public Properties ---
Public Property Get Affiliate() As String: Affiliate = m_strAffiliate: End Property
Public Property Let Affiliate(ByVal Value As String): m_strAffiliate = Value: End Property

Public Property Get ProductID() As String: ProductID = m_strProductID: End Property
Public Property Let ProductID(ByVal Value As String): m_strProductID = Value: End Property

Public Property Get Status() As ProductStatus: Status = m_enmStatus: End Property
Public Property Let Status(ByVal Value As ProductStatus): m_enmStatus = Value: End Property

Public Property Get IsPhasingOut() As Boolean: IsPhasingOut = m_blnIsPhasingOut: End Property
Public Property Let IsPhasingOut(ByVal Value As Boolean): m_blnIsPhasingOut = Value: End Property

Public Property Get PhaseOutDate() As Date: PhaseOutDate = m_dtePhaseOutDate: End Property
Public Property Let PhaseOutDate(ByVal Value As Date): m_dtePhaseOutDate = Value: End Property

Public Property Get PhaseOutPercent() As Double: PhaseOutPercent = m_dblPhaseOutPercent: End Property
Public Property Let PhaseOutPercent(ByVal Value As Double): m_dblPhaseOutPercent = Value: End Property

Public Property Get SupersededByProductID() As String: SupersededByProductID = m_strSupersededByProductID: End Property
Public Property Let SupersededByProductID(ByVal Value As String): m_strSupersededByProductID = Value: End Property

Public Property Get IsPhasingIn() As Boolean: IsPhasingIn = m_blnIsPhasingIn: End Property
Public Property Let IsPhasingIn(ByVal Value As Boolean): m_blnIsPhasingIn = Value: End Property

Public Property Get PhaseInDate() As Date: PhaseInDate = m_dtePhaseInDate: End Property
Public Property Let PhaseInDate(ByVal Value As Date): m_dtePhaseInDate = Value: End Property

Public Property Get PhaseInPercent() As Double: PhaseInPercent = m_dblPhaseInPercent: End Property
Public Property Let PhaseInPercent(ByVal Value As Double): m_dblPhaseInPercent = Value: End Property

'================================================================================================
'--- Public Methods ---
'================================================================================================

Public Sub Init(ByVal arrDataSource As Variant, ByVal lngRow As Long)
    On Error Resume Next
    Me.Affiliate = Trim$(arrDataSource(lngRow, COL_AFFILIATE))
    Me.ProductID = Trim$(arrDataSource(lngRow, COL_ISD))
    Me.Status = GetStatusEnum(Trim$(arrDataSource(lngRow, COL_STATUS)))
    Me.SupersededByProductID = Trim$(arrDataSource(lngRow, COL_SUPERSEDED_BY))
    
    Dim varPhaseOutPct As Variant: varPhaseOutPct = arrDataSource(lngRow, COL_PHASE_OUT_PCT)
    If IsNumeric(varPhaseOutPct) Then
        If varPhaseOutPct >= 0 And varPhaseOutPct <= 1 Then
            Me.PhaseOutPercent = CDbl(varPhaseOutPct)
        End If
    End If

    If Me.Status = psPhaseInOut Or Me.Status = psDiscontinued Then
        Me.IsPhasingOut = True
        If IsDate(arrDataSource(lngRow, COL_PHASE_OUT_DATE)) Then
            Me.PhaseOutDate = CDate(arrDataSource(lngRow, COL_PHASE_OUT_DATE))
        End If
    End If
    On Error GoTo 0
End Sub

Public Function GetForecastMultiplier(ByVal dteForecastDate As Date) As Double
    GetForecastMultiplier = 1 'Default to 100%

    If Me.IsPhasingIn Then
        If dteForecastDate < Me.PhaseInDate Then
            GetForecastMultiplier = 0 'Not yet started
            Exit Function
        ElseIf Month(dteForecastDate) = Month(Me.PhaseInDate) And Year(dteForecastDate) = Year(Me.PhaseInDate) Then
            GetForecastMultiplier = Me.PhaseInPercent 'Apply phase-in percentage
            Exit Function
        End If
    End If

    If Me.IsPhasingOut And Me.PhaseOutDate > 0 And dteForecastDate >= Me.PhaseOutDate Then
        If Month(dteForecastDate) = Month(Me.PhaseOutDate) And Year(dteForecastDate) = Year(Me.PhaseOutDate) Then
            GetForecastMultiplier = Me.PhaseOutPercent 'Apply phase-out percentage
        Else
            GetForecastMultiplier = 0 'Phased out completely
        End If
    End If
End Function

Public Sub LinkSuccessor(ByVal dictMap As Object)
    'REFACTOR #3: This new method encapsulates the logic for linking this product to its successor.
    If Not Me.IsPhasingOut Or Len(Me.SupersededByProductID) = 0 Then Exit Sub
    
    Dim strSuccessorKey As String
    strSuccessorKey = Me.Affiliate & "|" & Me.SupersededByProductID
    
    If dictMap.Exists(strSuccessorKey) Then
        Dim objSuccessor As cProductLifecycle
        Set objSuccessor = dictMap.Item(strSuccessorKey)
        
        'Update the successor product's properties based on this product's phase-out details.
        objSuccessor.IsPhasingIn = True
        objSuccessor.PhaseInDate = Me.PhaseOutDate
        objSuccessor.PhaseInPercent = 1 - Me.PhaseOutPercent
    Else
        'The main module's logging will handle the warning message.
    End If
End Sub
