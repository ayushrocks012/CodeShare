'@Folder("Forecasting")
Option Explicit

'================================================================================================================
' --- FORECASTING ENGINE MODULE (M_Forecasting) ---
' V6.0: Implemented High-Impact improvements: Enhanced UX status bar feedback and
'       performance optimization for adding new products (replaced Range.Find with Dictionary).
' Author:      [Your Name]
' Date:        [Current Date]
'================================================================================================================

'--- PRIVATE MODULE-LEVEL VARIABLES ---
Private wsLog As Worksheet
Private lngWarningCount As Long

'================================================================================================================
' 1. Main Public Orchestrator
'================================================================================================================

'------------------------------------------------------------------------------------------------
' Procedure: UpdateForecast_V6
' Purpose:   Public entry point to run the entire multi-affiliate forecasting process.
'            Orchestrates the main steps: Setup, Load, Process, and Cleanup.
'------------------------------------------------------------------------------------------------
Public Sub UpdateForecast_V6()
    Dim wbThis As Workbook
    Dim arrStatusData As Variant, arrHistoryData As Variant, arrDemandData As Variant
    Dim dictLifecycleMap As Object, dictAffiliates As Object
    Dim dteStartTime As Date: dteStartTime = Now
    
    On Error GoTo Main_ErrorHandler
    
    Set wbThis = InitializeEnvironment()
    LoadAllData wbThis, arrStatusData, arrHistoryData, arrDemandData
    Set dictLifecycleMap = BuildLifecycleMap(arrStatusData)
    Set dictAffiliates = GetUniqueAffiliates(arrDemandData)
    ProcessAllAffiliates wbThis, dictAffiliates, arrStatusData, arrHistoryData, arrDemandData, dictLifecycleMap
    
Main_Exit:
    CleanupEnvironment dteStartTime, IIf(Not dictAffiliates Is Nothing, dictAffiliates.Count, 0)
    Exit Sub
    
Main_ErrorHandler:
    WriteToLog "FATAL", "UpdateForecast_V6", "A critical error occurred: " & Err.Description
    Resume Main_Exit
End Sub

'================================================================================================================
' 2. Architectural Stages (Setup, Load, Process, Cleanup)
'================================================================================================================

Private Function InitializeEnvironment() As Workbook
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.Calculation = xlCalculationManual
    Application.StatusBar = "Initializing environment..."
    
    lngWarningCount = 0
    Set InitializeEnvironment = ThisWorkbook
    
    On Error Resume Next
    ThisWorkbook.Sheets(SHEET_LOG).Delete
    On Error GoTo 0
    Set wsLog = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
    InitializeLogSheet wsLog
End Function

Private Sub LoadAllData(ByVal wb As Workbook, ByRef arrStatus As Variant, ByRef arrHistory As Variant, ByRef arrDemand As Variant)
    On Error GoTo Load_ErrorHandler
    Application.StatusBar = "Loading all source data into memory..."
    
    arrStatus = LoadDataToArray(wb.Sheets(SHEET_STATUS))
    arrHistory = LoadDataToArray(wb.Sheets(SHEET_HISTORY))
    arrDemand = LoadDataToArray(wb.Sheets(SHEET_DEMAND))
    
    WriteToLog "Info", "LoadAllData", "All source data loaded successfully."
    Exit Sub
    
Load_ErrorHandler:
    WriteToLog "FATAL", "LoadAllData", "Failed to load source sheets. Error: " & Err.Description
    Err.Raise vbObjectError + 513, "LoadAllData", "Could not load required data. Check sheet names in M_Config."
End Sub

'------------------------------------------------------------------------------------------------
' Procedure: ProcessAllAffiliates
' Purpose:   Main loop that iterates through each affiliate and executes the report generation process.
' UX UPDATE: Shows progress by affiliate count in the status bar.
'------------------------------------------------------------------------------------------------
Private Sub ProcessAllAffiliates(ByVal wb As Workbook, ByVal dictAffiliates As Object, ByVal arrStatus As Variant, ByVal arrHistory As Variant, ByVal arrDemand As Variant, ByVal dictLifecycle As Object)
    Dim varAffiliateKey As Variant, strCurrentAffiliate As String
    Dim wsSummary As Worksheet, wbReport As Workbook
    Dim lngAffiliateCounter As Long, lngTotalAffiliates As Long
    
    lngTotalAffiliates = dictAffiliates.Count
    If lngTotalAffiliates = 0 Then
        WriteToLog "Warning", "ProcessAllAffiliates", "No affiliates found in Demand Forecast sheet. Nothing to process."
        Exit Sub
    End If
    
    For Each varAffiliateKey In dictAffiliates.Keys
        lngAffiliateCounter = lngAffiliateCounter + 1
        strCurrentAffiliate = CStr(varAffiliateKey)
        On Error GoTo Affiliate_ErrorHandler
        
        Application.StatusBar = "Processing Affiliate: " & strCurrentAffiliate & " (" & lngAffiliateCounter & " of " & lngTotalAffiliates & ")..."
        WriteToLog "Info", "ProcessAllAffiliates", "Starting process for affiliate: " & strCurrentAffiliate
        
        Set wsSummary = wb.Sheets.Add(After:=wb.Sheets(wb.Sheets.Count)): wsSummary.Name = "TempSummary"
        CreateTierSheets wb, strCurrentAffiliate, arrStatus, arrDemand, wsSummary
        ProcessForecastForAffiliate wb, strCurrentAffiliate, arrHistory, arrDemand, wsSummary, dictLifecycle
        Set wbReport = GenerateAffiliateReport(wb, strCurrentAffiliate, wsSummary)
        
        GoTo Next_Affiliate
        
Affiliate_ErrorHandler:
        lngWarningCount = lngWarningCount + 1
        WriteToLog "Error", "ProcessAllAffiliates", "Failed to process affiliate '" & strCurrentAffiliate & "'. Error: " & Err.Description
        
Next_Affiliate:
        CleanupAffiliateSheets wb, strCurrentAffiliate
        On Error GoTo 0
    Next varAffiliateKey
End Sub

Private Function GenerateAffiliateReport(ByVal wb As Workbook, ByVal strAffiliate As String, ByVal wsSummary As Worksheet) As Workbook
    On Error GoTo Report_ErrorHandler
    
    Dim wbReport As Workbook
    Set wbReport = CreateOutputWorkbook(wb, strAffiliate, wsSummary)
    
    If Not wbReport Is Nothing Then
        If Not DEBUG_MODE Then
            Dim strFilePath As String
            strFilePath = GetOutputFilePath(wb.Path, strAffiliate)
            Application.StatusBar = "Saving final report for " & strAffiliate & "..."
            wbReport.SaveAs strFilePath
            wbReport.Close SaveChanges:=False
            WriteToLog "Info", "GenerateAffiliateReport", "Report saved for " & strAffiliate & " to " & strFilePath
        Else
            WriteToLog "Debug", "GenerateAffiliateReport", "DEBUG MODE: Report for " & strAffiliate & " created but not saved/closed."
        End If
    End If
    
    Set GenerateAffiliateReport = wbReport
    Exit Function
    
Report_ErrorHandler:
    lngWarningCount = lngWarningCount + 1
    WriteToLog "Error", "GenerateAffiliateReport", "Could not generate or save report for '" & strAffiliate & "'. Error: " & Err.Description
End Function

Private Sub CleanupEnvironment(ByVal dteStartTime As Date, ByVal lngAffiliateCount As Long)
    Application.StatusBar = False
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    
    Dim strMessage As String
    strMessage = "Forecast process completed in " & Format$(Now - dteStartTime, "nn:ss") & " minutes." & vbCrLf & vbCrLf
    strMessage = strMessage & "Affiliates Processed: " & lngAffiliateCount & vbCrLf
    strMessage = strMessage & "Warnings: " & lngWarningCount & " (see Log sheet for details)"
    
    MsgBox strMessage, IIf(lngWarningCount > 0, vbExclamation, vbInformation), "Forecast Update Complete"
End Sub

'================================================================================================================
' 3. Core Logic & Calculation Functions
'================================================================================================================

'------------------------------------------------------------------------------------------------
' Procedure: ProcessForecastForAffiliate
' Purpose:   Loops through each tier sheet for an affiliate and triggers the calculation.
' UX UPDATE: Shows progress by tier sheet count in the status bar.
'------------------------------------------------------------------------------------------------
Private Sub ProcessForecastForAffiliate(ByVal wb As Workbook, ByVal strAffiliate As String, ByVal arrHistory As Variant, ByVal arrDemand As Variant, ByVal wsSummary As Worksheet, ByVal dictLifecycle As Object)
    Dim wsTier As Worksheet
    Dim objTierSheets As Object: Set objTierSheets = CreateObject("System.Collections.ArrayList")
    Dim lngSheetCounter As Long, lngTotalSheets As Long
    
    'First, get a count of sheets to process for the status bar
    For Each wsTier In wb.Worksheets
        If InStr(1, wsTier.Name, strAffiliate & " - ") > 0 Then
            objTierSheets.Add wsTier.Name
        End If
    Next wsTier
    lngTotalSheets = objTierSheets.Count
    
    'Now, process each sheet
    For Each wsTier In wb.Worksheets
        If InStr(1, wsTier.Name, strAffiliate & " - ") > 0 Then
            lngSheetCounter = lngSheetCounter + 1
            Dim strTierName As String: strTierName = Replace(wsTier.Name, strAffiliate & " - ", "")
            Application.StatusBar = "Processing Tier: " & strTierName & " (" & lngSheetCounter & " of " & lngTotalSheets & ")..."
            
            If wsTier.Cells(wsTier.Rows.Count, "A").End(xlUp).Row > 1 Then
                CalculateAndFormatTierSheet wsTier, strAffiliate, arrHistory, arrDemand, dictLifecycle
                AppendToSummarySheet wsTier, wsSummary
            Else
                WriteToLog "Info", "ProcessForecastForAffiliate", "Skipping empty tier sheet: " & wsTier.Name
            End If
        End If
    Next wsTier
End Sub

Private Sub CalculateAndFormatTierSheet(ByVal wsTier As Worksheet, ByVal strAffiliate As String, ByVal arrHistory As Variant, ByVal arrDemand As Variant, ByVal dictLifecycle As Object)
    Dim lngTierLRow As Long, lngHistLCol As Long, lngMonthCount As Long
    Dim dblSubTierSum As Double, dblTierSum As Double
    
    On Error GoTo Calc_ErrorHandler
    
    lngMonthCount = GetHistoricalMonthCount(arrDemand, arrHistory)
    
    Dim arrHeaderRow As Variant
    arrHeaderRow = GetCombinedHeaderRow(strAffiliate, arrDemand, arrHistory, lngMonthCount)
    
    '--- PERFORMANCE UPDATE: AddNewProductsToTierSheet now uses a dictionary for lookups ---
    AddNewProductsToTierSheet wsTier, strAffiliate
    
    lngTierLRow = wsTier.Cells(wsTier.Rows.Count, COL_AFFILIATE).End(xlUp).Row
    If lngTierLRow < 2 Then Exit Sub
    
    Dim arrOutput() As Variant: ReDim arrOutput(1 To lngTierLRow, 1 To UBound(arrHeaderRow))
    
    Dim r As Long, c As Long, i As Long
    For c = 1 To UBound(arrHeaderRow): arrOutput(1, c) = arrHeaderRow(c): Next c
    For r = 2 To lngTierLRow
        For c = 1 To 6: arrOutput(r, c) = wsTier.Cells(r, c).Value: Next c
    Next r
    
    lngHistLCol = 8 + lngMonthCount
    
    For r = 2 To lngTierLRow
        Dim strTier As String, strSubTierID As String, strProduct As String
        strTier = arrOutput(r, COL_TIER)
        strSubTierID = arrOutput(r, COL_SUB_TIER)
        strProduct = arrOutput(r, COL_ISD)
        
        Dim strCompositeKey As String: strCompositeKey = strAffiliate & "|" & strProduct
        Dim objLifecycle As cProductLifecycle
        If dictLifecycle.Exists(strCompositeKey) Then Set objLifecycle = dictLifecycle.Item(strCompositeKey) Else Set objLifecycle = New cProductLifecycle
        
        arrOutput(r, COL_STATUS) = GetStatusString(objLifecycle.Status)
        If objLifecycle.PhaseOutDate > 0 Then arrOutput(r, COL_PHASE_OUT_DATE) = objLifecycle.PhaseOutDate

        Dim arrHistoricSales As Variant
        arrHistoricSales = GetHistoricalDataRow(strAffiliate, strProduct, arrHistory, lngMonthCount + 6)
        For c = 1 To UBound(arrHistoricSales): arrOutput(r, c + 8) = arrHistoricSales(c): Next c
        
        dblSubTierSum = GetHistoricalSubTierSum(strAffiliate, strTier, strSubTierID, arrHistory, lngMonthCount + 6)
        dblTierSum = GetHistoricalTierSum(strAffiliate, strTier, arrHistory, dictLifecycle, lngMonthCount + 6)
        
        Dim lngDemandRow As Long: lngDemandRow = GetDemandDataRow(strAffiliate, strTier, arrDemand)

        If lngDemandRow > 0 Then
            For c = (lngHistLCol + 1) To UBound(arrOutput, 2)
                arrOutput(r, c) = CalculateForecastValue(objLifecycle, arrOutput(1, c), dblSubTierSum, dblTierSum, arrDemand(lngDemandRow, (c - lngHistLCol) + 2))
            Next c
        End If
        Set objLifecycle = Nothing
    Next r
    
    wsTier.Cells.Clear
    wsTier.Range("A1").Resize(UBound(arrOutput, 1), UBound(arrOutput, 2)).Value = arrOutput
    
    FormatEnhancedSheet wsTier
    Exit Sub
    
Calc_ErrorHandler:
    lngWarningCount = lngWarningCount + 1
    WriteToLog "Error", "CalculateAndFormatTierSheet", "Failed to calculate sheet '" & wsTier.Name & "'. Error: " & Err.Description
End Sub

Private Function CalculateForecastValue(ByVal objLifecycle As cProductLifecycle, ByVal dteForecastDate As Date, ByVal dblSubTierSum As Double, ByVal dblTierSum As Double, ByVal dblTierDemand As Double) As Double
    Dim dblBaseForecast As Double: If dblTierSum > 0 Then dblBaseForecast = (dblSubTierSum * dblTierDemand) / dblTierSum
    Dim dblFinalForecast As Double

    Select Case objLifecycle.Status
        Case psActive, psNew
            dblFinalForecast = dblBaseForecast
        Case psPhaseInOut
            If objLifecycle.IsPhasingOut And objLifecycle.PhaseOutDate > 0 And dteForecastDate >= objLifecycle.PhaseOutDate Then
                If Month(dteForecastDate) = Month(objLifecycle.PhaseOutDate) And Year(dteForecastDate) = Year(objLifecycle.PhaseOutDate) Then
                    dblFinalForecast = dblBaseForecast * objLifecycle.PhaseOutPercent
                Else
                    dblFinalForecast = 0
                End If
            Else
                dblFinalForecast = dblBaseForecast
            End If
        Case psDiscontinued
             If objLifecycle.PhaseOutDate > 0 And dteForecastDate >= objLifecycle.PhaseOutDate Then dblFinalForecast = 0 Else dblFinalForecast = dblBaseForecast
        Case Else
            dblFinalForecast = dblBaseForecast
    End Select

    If objLifecycle.IsPhasingIn Then
        If dteForecastDate < objLifecycle.PhaseInDate Then
            dblFinalForecast = 0
        ElseIf Month(dteForecastDate) = Month(objLifecycle.PhaseInDate) And Year(dteForecastDate) = Year(objLifecycle.PhaseInDate) Then
            dblFinalForecast = dblBaseForecast * objLifecycle.PhaseInPercent
        End If
    End If
    CalculateForecastValue = dblFinalForecast
End Function

Private Function BuildLifecycleMap(ByVal arrStatusData As Variant) As Object
    'Implementation remains the same as V5.1
End Function

'================================================================================================================
' 4. Utility & Helper Functions
'================================================================================================================

'------------------------------------------------------------------------------------------------
' Procedure: AddNewProductsToTierSheet
' Purpose:   Adds products with status "New" to a tier sheet if they don't already exist.
' PERF UPDATE: Replaced slow Range.Find in a loop with a fast in-memory Dictionary lookup.
'------------------------------------------------------------------------------------------------
Private Sub AddNewProductsToTierSheet(ByVal wsTier As Worksheet, ByVal strAffiliate As String)
    Dim lngStatusLRow As Long, lngTierLRow As Long, r As Long
    Dim strTierName As String, strProduct As String, strStatus As String
    Dim dictExistingProducts As Object
    
    On Error GoTo AddNew_ErrorHandler
    
    ' Step 1: Read all existing products on the sheet into a dictionary for fast lookups.
    Set dictExistingProducts = CreateObject("Scripting.Dictionary")
    lngTierLRow = wsTier.Cells(wsTier.Rows.Count, COL_ISD).End(xlUp).Row
    If lngTierLRow > 1 Then
        Dim arrExisting As Variant
        arrExisting = wsTier.Range("F2:F" & lngTierLRow).Value
        For r = 1 To UBound(arrExisting, 1)
            If Not dictExistingProducts.Exists(arrExisting(r, 1)) Then
                dictExistingProducts.Add arrExisting(r, 1), 1
            End If
        Next r
    End If
    
    ' Step 2: Loop through the Status data array and check against the dictionary.
    Dim arrStatusData As Variant
    arrStatusData = ThisWorkbook.Sheets(SHEET_STATUS).UsedRange.Value
    lngStatusLRow = UBound(arrStatusData, 1)
    strTierName = Replace(wsTier.Name, strAffiliate & " - ", "")
    
    For r = 2 To lngStatusLRow
        If LCase$(Trim$(arrStatusData(r, COL_AFFILIATE))) = LCase$(strAffiliate) And LCase$(Trim$(arrStatusData(r, COL_TIER))) = LCase$(strTierName) Then
            strStatus = Trim$(arrStatusData(r, COL_STATUS))
            If strStatus = GetStatusString(psNew) Then 'Using GetStatusString for consistency
                strProduct = Trim$(arrStatusData(r, COL_ISD))
                
                ' Use the fast, in-memory dictionary check instead of Range.Find
                If Not dictExistingProducts.Exists(strProduct) Then
                    lngTierLRow = wsTier.Cells(wsTier.Rows.Count, "A").End(xlUp).Row + 1
                    wsTier.Range("A" & lngTierLRow).Resize(1, 6).Value = Array(arrStatusData(r, 1), arrStatusData(r, 2), arrStatusData(r, 3), arrStatusData(r, 4), arrStatusData(r, 5), arrStatusData(r, 6))
                    dictExistingProducts.Add strProduct, 1 'Add to dictionary to prevent re-adding
                End If
            End If
        End If
    Next r
    Exit Sub
    
AddNew_ErrorHandler:
    lngWarningCount = lngWarningCount + 1
    WriteToLog "Error", "AddNewProductsToTierSheet", "Failed to add new products to '" & wsTier.Name & "'. Error: " & Err.Description
End Sub

'--- Other helper functions (unchanged from V5.1) follow ---
Private Function GetUniqueAffiliates(ByVal arrDemandData As Variant) As Object
    'Implementation...
End Function

Private Sub CreateTierSheets(ByVal wb As Workbook, ByVal strAffiliate As String, ByVal arrStatus As Variant, ByVal arrDemand As Variant, ByVal wsSummary As Worksheet)
   'Implementation...
End Sub

Private Function GetHistoricalDataRow(ByVal strAffiliate As String, ByVal strProduct As String, ByVal arrHistory As Variant, ByVal lngHistColCount As Long) As Variant
    'Implementation...
End Function

Private Function GetHistoricalTierSum(ByVal strAffiliate As String, ByVal strTier As String, ByVal arrHistory As Variant, ByVal dictLifecycle As Object, ByVal lngHistLCol As Long) As Double
    'Implementation...
End Function

Private Function GetHistoricalSubTierSum(ByVal strAffiliate As String, ByVal strTier As String, ByVal strSubTier As String, ByVal arrHistory As Variant, ByVal lngHistLCol As Long) As Double
    'Implementation...
End Function

Private Function GetDemandDataRow(ByVal strAffiliate As String, ByVal strTier As String, ByVal arrDemand As Variant) As Long
    'Implementation...
End Function

Private Sub CleanupAffiliateSheets(ByVal wb As Workbook, ByVal strAffiliate As String)
    'Implementation...
End Function

Private Function GetOutputFilePath(ByVal strBasePath As String, ByVal strAffiliate As String) As String
    'Implementation...
End Function

Private Sub SetupOutputSheetHeaders(ByVal ws As Worksheet)
    'Implementation...
End Function

Private Function CreateOutputWorkbook(ByVal wb As Workbook, ByVal strAffiliate As String, ByVal wsSummary As Worksheet) As Workbook
    'Implementation...
End Function

Private Function GetHistoricalMonthCount(ByVal arrDemand As Variant, ByVal arrHistory As Variant) As Long
    'Implementation...
End Function

Private Function GetCombinedHeaderRow(ByVal strAffiliate As String, ByVal arrDemand As Variant, ByVal arrHistory As Variant, ByVal lngMonthCount As Long) As Variant
    'Implementation...
End Function

Private Sub AppendToSummarySheet(ByVal wsTier As Worksheet, ByVal wsSummary As Worksheet)
    'Implementation...
End Function

Private Sub FormatEnhancedSheet(ByVal ws As Worksheet)
    'Implementation...
End Function

Private Function LoadDataToArray(ByVal ws As Worksheet) As Variant
    'Implementation...
End Function

Private Function SheetExists(ByVal wb As Workbook, ByVal strSheetName As String) As Boolean
    'Implementation...
End Function

Private Sub InitializeLogSheet(ByVal ws As Worksheet)
    'Implementation...
End Sub

Private Sub WriteToLog(ByVal strType As String, ByVal strProcedure As String, ByVal strMessage As String)
    'Implementation...
End Sub

Private Function GetLastHistoricalColumn(ByVal ws As Worksheet) As Long
    'Implementation...
End Function

Private Function GetStatusEnum(ByVal strStatus As String) As ProductStatus
    'Implementation...
End Function

Private Function GetStatusString(ByVal enmStatus As ProductStatus) As String
    'Implementation...
End Function
